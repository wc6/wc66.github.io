<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Centos install sftp</title>
      <link href="/2020/05/22/Centos-install-sftp/"/>
      <url>/2020/05/22/Centos-install-sftp/</url>
      
        <content type="html"><![CDATA[<h3 id="CentOS-install-sftp"><a href="#CentOS-install-sftp" class="headerlink" title="CentOS install sftp"></a>CentOS install sftp</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>创建用户，创建用户组，添加用户到用户组,禁止用户登录。</li><li>创建用户登录的目录</li><li>设置用户的密码</li><li>修改ssh的配置文件，限制用户访问根目录,强制用户使用internal-sftp，指定用户主目录</li><li>设置目录权限，所属主和组，所有者须为root，用户组为sftp</li><li>重启ssh服务</li></ol><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol><li>在Windows上cmd命令：sftp sftpuser@domain</li><li>即可访问目录/文件</li></ol><h4 id="操作详情"><a href="#操作详情" class="headerlink" title="操作详情"></a>操作详情</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建组</span></span><br><span class="line">groupadd sftpg</span><br><span class="line"><span class="comment"># 创建用户，并添加到组，禁止登录</span></span><br><span class="line">useradd -G sftpg -s /sbin/nologin sftpu3</span><br><span class="line">  <span class="comment"># -G 将用户添加到sftpg组</span></span><br><span class="line">  <span class="comment"># -s 用户登录后所使用的shell,这里禁止用户登录</span></span><br><span class="line"><span class="comment"># 创建sftpu3的目录</span></span><br><span class="line">mkdir /www/</span><br><span class="line">passwd sftpu3  <span class="comment"># 密码设置为123456</span></span><br><span class="line"><span class="comment"># 修改/etc/ssh/sshd_config文件</span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 节选自 sshd_config 文件</span><br><span class="line">135 # override default of no subsystems</span><br><span class="line">136 Subsystem       sftp    &#x2F;usr&#x2F;libexec&#x2F;openssh&#x2F;sftp-server</span><br><span class="line">137</span><br><span class="line">138 # Example of overriding settings on a per-user basis</span><br><span class="line">139 #Match User anoncvs</span><br><span class="line">140 #       X11Forwarding no</span><br><span class="line">141 #       AllowTcpForwarding no</span><br><span class="line">142 #       PermitTTY no</span><br><span class="line">143 #       ForceCommand cvs server</span><br><span class="line">144 UseDNS no</span><br><span class="line">145 AddressFamily inet</span><br><span class="line">146 PermitRootLogin yes</span><br><span class="line">147 SyslogFacility AUTHPRIV</span><br><span class="line">148 PasswordAuthentication yes</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># sshd_config 修改后（注释136行，添加148后面）</span><br><span class="line">135 # override default of no subsystems</span><br><span class="line">136 # Subsystem     sftp    &#x2F;usr&#x2F;libexec&#x2F;openssh&#x2F;sftp-server</span><br><span class="line">137</span><br><span class="line">138 # Example of overriding settings on a per-user basis</span><br><span class="line">139 #Match User anoncvs</span><br><span class="line">140 #       X11Forwarding no</span><br><span class="line">141 #       AllowTcpForwarding no</span><br><span class="line">142 #       PermitTTY no</span><br><span class="line">143 #       ForceCommand cvs server</span><br><span class="line">144 UseDNS no</span><br><span class="line">145 AddressFamily inet</span><br><span class="line">146 PermitRootLogin yes</span><br><span class="line">147 SyslogFacility AUTHPRIV</span><br><span class="line">148 PasswordAuthentication yes</span><br><span class="line">149</span><br><span class="line">150 Subsystem       sftp    internal-sftp  # 指定sftp服务使用系统自带的internal-stfp</span><br><span class="line">151 Match   Group   sftpg  # 匹配sftp组的用户</span><br><span class="line">152 ChrootDirectory &#x2F;www&#x2F;  # sftp主目录指定到&#x2F;www&#x2F;</span><br><span class="line">153 ForceCommand    internal-sftp  # 指定sftp命令</span><br><span class="line">154 AllowTcpForwarding      no  # 用户不能使用端口转发</span><br><span class="line">155 X11Forwarding   no  # 用户不能使用端口转发</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line">chmod 755 /www/</span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">[root@Frank /]<span class="comment"># systemctl restart sshd</span></span><br><span class="line"><span class="comment"># 在sftp 目录里面添加测试文件</span></span><br><span class="line">[root@Frank /]<span class="comment"># touch /www/aa.txt</span></span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开Windows cmd </span></span><br><span class="line">sftp sftpu3@&lt;此处请填写你的IP或域名&gt;</span><br><span class="line"><span class="comment"># 然后输入密码 123456</span></span><br><span class="line">Connected to sftpu3@&lt;你的IP&gt;.</span><br><span class="line">sftp&gt; ls</span><br><span class="line">aa.txt</span><br><span class="line">sftp&gt; <span class="built_in">pwd</span></span><br><span class="line">Remote working directory: /</span><br><span class="line">sftp&gt; <span class="built_in">cd</span> ..</span><br><span class="line">sftp&gt; <span class="built_in">pwd</span></span><br><span class="line">Remote working directory: /</span><br><span class="line">sftp&gt; ls</span><br><span class="line">aa.txt</span><br><span class="line">sftp&gt;</span><br><span class="line"><span class="comment"># 此处可见，运行cd .. 命令后，目录下还是aa.txt文件，说明sftpu3 用户不准访问根目录。对于root用户而言，/www/目录就是sftpu3用户的根目录</span></span><br></pre></td></tr></table></figure><h4 id="错误排除"><a href="#错误排除" class="headerlink" title="错误排除"></a>错误排除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误情况1</span></span><br><span class="line">[root@Frank /]<span class="comment"># systemctl restart sshd</span></span><br><span class="line">Job <span class="keyword">for</span> sshd.service failed because the control process exited with error code. See <span class="string">"systemctl status sshd.service"</span> and <span class="string">"journalctl -xe"</span> <span class="keyword">for</span> details.</span><br><span class="line">[root@Frank /]<span class="comment"># sshd -t</span></span><br><span class="line">/etc/ssh/sshd_config line 149: Directive <span class="string">'UseDNS'</span> is not allowed within a Match block</span><br><span class="line">[root@Frank /]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决方案</span></span><br><span class="line">在修改配置文件的时候，没有讲添加的内容放在最后面。正确做法如上所示，即是追加，而不是中途添加。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> sftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2020/05/22/docker/"/>
      <url>/2020/05/22/docker/</url>
      
        <content type="html"><![CDATA[<h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h4 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h4><ul><li>RHEL/CentOS 6:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm</span><br></pre></td></tr></table></figure><ul><li>RHEL/CentOS 7:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br></pre></td></tr></table></figure><ul><li>RHEL/CentOS 8:<ul><li>tips RHEL8 天生安装docker，只是用的podman管理的。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm</span><br></pre></td></tr></table></figure><ul><li>安装rpm 仓库之后，就可以安装docker了。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-io -y  <span class="comment"># 安装docker</span></span><br><span class="line">sudo yum update docker-io -y  <span class="comment"># 更新docker</span></span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">sudo service docker start  <span class="comment"># 启动服务</span></span><br><span class="line">sudo chkconfig docker on  <span class="comment"># 开机自启动docker</span></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">sudo systemctl start docker  <span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> httpd  <span class="comment"># 开机自启动docker</span></span><br></pre></td></tr></table></figure><p>[service与systemctl差异]（<a href="https://www.cnblogs.com/shijingjing07/p/9301590.html" target="_blank" rel="noopener">https://www.cnblogs.com/shijingjing07/p/9301590.html</a>）</p><h4 id="docker-的使用"><a href="#docker-的使用" class="headerlink" title="docker 的使用"></a>docker 的使用</h4><ul><li>检查docker是否安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[wc@Frank ~]<span class="comment"># sudo docker info</span></span><br><span class="line">Containers: 1</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 1</span><br><span class="line">Images: 1</span><br><span class="line">Server Version: 1.13.1</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Supports d_type: <span class="literal">true</span></span><br><span class="line"> Native Overlay Diff: <span class="literal">true</span></span><br><span class="line">Logging Driver: journald</span><br><span class="line">Cgroup Driver: systemd</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: <span class="built_in">local</span></span><br><span class="line"> Network: bridge host macvlan null overlay</span><br><span class="line">Swarm: inactive</span><br><span class="line">Runtimes: docker-runc runc</span><br><span class="line">Default Runtime: docker-runc</span><br><span class="line">Init Binary: /usr/libexec/docker/docker-init-current</span><br><span class="line">containerd version:  (expected: aa8187dbd3b7ad67d8e5e3a15115d3eef43a7ed1)</span><br><span class="line">runc version: 66aedde759f33c190954815fb765eedc1d782dd9 (expected: 9df8b306d01f59d3a8029be411de015b7304dd8f)</span><br><span class="line">init version: fec3683b971d9c3ef73f284f176672c44b448662 (expected: 949e6facb77383876aeff8a6944dde66b3089574)</span><br><span class="line">Security Options:</span><br><span class="line"> seccomp</span><br><span class="line">  WARNING: You<span class="string">'re not using the default seccomp profile</span></span><br><span class="line"><span class="string">  Profile: /etc/docker/seccomp.json</span></span><br><span class="line"><span class="string">Kernel Version: 3.10.0-1127.el7.x86_64</span></span><br><span class="line"><span class="string">Operating System: CentOS Linux 7 (Core)</span></span><br><span class="line"><span class="string">OSType: linux</span></span><br><span class="line"><span class="string">Architecture: x86_64</span></span><br><span class="line"><span class="string">Number of Docker Hooks: 3</span></span><br><span class="line"><span class="string">CPUs: 1</span></span><br><span class="line"><span class="string">Total Memory: 1.795 GiB</span></span><br><span class="line"><span class="string">Name: Frank</span></span><br><span class="line"><span class="string">ID: YUZO:Q7LQ:DBGA:3452:KUZG:24AD:EYN6:OMPX:NOFS:GZ43:OAVE:E3QV</span></span><br><span class="line"><span class="string">Docker Root Dir: /var/lib/docker</span></span><br><span class="line"><span class="string">Debug Mode (client): false</span></span><br><span class="line"><span class="string">Debug Mode (server): false</span></span><br><span class="line"><span class="string">Registry: https://index.docker.io/v1/</span></span><br><span class="line"><span class="string">Experimental: false</span></span><br><span class="line"><span class="string">Insecure Registries:</span></span><br><span class="line"><span class="string"> 127.0.0.0/8</span></span><br><span class="line"><span class="string">Live Restore Enabled: false</span></span><br><span class="line"><span class="string">Registries: docker.io (secure)</span></span><br><span class="line"><span class="string">[wc@Frank ~]#</span></span><br></pre></td></tr></table></figure><ul><li>下载Ubuntu镜像<ul><li>docker pull  系统:tag</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[wc@Frank ~]<span class="comment"># sudo docker pull ubuntu</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">Trying to pull repository docker.io/library/ubuntu ...</span><br><span class="line">latest: Pulling from docker.io/library/ubuntu</span><br><span class="line">d51af753c3d3: Pull complete</span><br><span class="line">fc878cd0a91c: Pull complete</span><br><span class="line">6154df8ff988: Pull complete</span><br><span class="line">fee5db0ff82f: Pull complete</span><br><span class="line">Digest: sha256:747d2dbbaaee995098c9792d99bd333c6783ce56150d1b11e333bbceed5c54d7</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> docker.io/ubuntu:latest</span><br></pre></td></tr></table></figure><ul><li>运行docker 容器里面的Ubuntu运行一个交互式shell</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -i -t ubuntu /bin/bash</span><br><span class="line"><span class="comment"># -i 以交互式运行容器</span></span><br><span class="line"><span class="comment"># -t 分配一个伪终端，通常 -t -i 一起使用</span></span><br><span class="line"><span class="comment"># ubuntu 镜像名字 默认是ubuntu:latest</span></span><br></pre></td></tr></table></figure><ul><li>docker 以指定的端口运行 -H</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker -H :5555 pull ubuntu  <span class="comment"># 使得docker在5555端口拉取ubuntu:latest镜像</span></span><br><span class="line">sudo docker -H tcp://127.0.0.1:4243 pull ubuntu  <span class="comment"># docker 在本地的4243端口拉取ubuntu:latest镜像</span></span><br></pre></td></tr></table></figure><ul><li>docker 常用命令<ul><li>tips:  镜像  –&gt; 容器</li></ul></li></ul><p>镜像管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull name[:tag]  <span class="comment"># 从镜像库中拉取name镜像</span></span><br><span class="line">docker images  <span class="comment"># 列出本地所有的镜像</span></span><br><span class="line">docker rmi name  <span class="comment"># 删除name镜像</span></span><br><span class="line">docker <span class="built_in">history</span> INAME  <span class="comment"># 查看指定镜像的历史</span></span><br></pre></td></tr></table></figure><p>容器管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run name  <span class="comment"># 运行一个容器</span></span><br><span class="line">docker create --name myname nginx:latest  <span class="comment"># 使用镜像nginx:latest 创建一个名为myname的容器</span></span><br><span class="line">docker ps  <span class="comment"># 列出正在运行的容器</span></span><br><span class="line">  <span class="comment"># -a 列出所有镜像，</span></span><br><span class="line">  <span class="comment"># -q 列出容器的编号即短ID</span></span><br><span class="line">docker inspect name  <span class="comment"># 获取name镜像/容器的元数据</span></span><br><span class="line">docker top name  <span class="comment"># 获取容器中正在运行的进程</span></span><br><span class="line">docker start/stop/restart name  <span class="comment"># 启动/停止/重启name容器</span></span><br><span class="line">docker <span class="built_in">kill</span> name  <span class="comment"># 杀死正在运行的容器、</span></span><br><span class="line">docker rm name1 name2  <span class="comment"># 删除name1 name2容器</span></span><br><span class="line">  <span class="comment"># -f 强制删除  发送SIGKILL信号</span></span><br><span class="line">docker pause/unpause name  <span class="comment"># 暂停/杰出暂停name容器</span></span><br><span class="line">docker logs name  <span class="comment"># 显示容器日志</span></span><br><span class="line">  <span class="comment"># -f 跟踪显示日志</span></span><br><span class="line">  <span class="comment"># -t 显示时间戳</span></span><br><span class="line">  <span class="comment"># -tail n 仅列出最新n条日志</span></span><br></pre></td></tr></table></figure><ul><li>docker  从中央仓库中查询镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search name  <span class="comment"># 从中央仓库中找name的镜像</span></span><br></pre></td></tr></table></figure><h3 id="端口重定向"><a href="#端口重定向" class="headerlink" title="端口重定向"></a>端口重定向</h3><ul><li>将内部的容器的端口映射到真实主机上的端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将容器的8080端口绑定到真实主机的80端口</span></span><br><span class="line">docker run -p 127.0.0.1:80:8080 &lt;image&gt; &lt;cmd&gt;</span><br><span class="line"><span class="comment"># 将容器的8080端口动态绑定到真实主机的随机端口</span></span><br><span class="line">docker run -p 127.0.0.1::8080 &lt;image&gt; &lt;cmd&gt;</span><br><span class="line"><span class="comment"># 将容器的8080端口动态绑定到真实主机的可用接口的80端口</span></span><br><span class="line">docker run -p 80:8080 &lt;image&gt; &lt;cmd&gt;</span><br><span class="line"><span class="comment"># 将容器的8080端口动态绑定到真实主机的可用接口的可用端口</span></span><br><span class="line">docker run -p 8080 &lt;image&gt; &lt;cmd&gt;</span><br><span class="line"><span class="comment"># 将容器的udp协议的5353端口绑定到主机的53端口</span></span><br><span class="line">docker run -p 127.0.0.1:53:5353/udp &lt;image&gt; &lt;cmd&gt;</span><br><span class="line"></span><br><span class="line">docker run -p 127.0.0.1::8080 -name dyn-bound &lt;image&gt; &lt;cmd&gt;</span><br><span class="line">docker port 查询映射关系</span><br><span class="line">[<span class="keyword">in</span>]  :docker port dyn-bound 8080</span><br><span class="line">[out] :127.0.0.1:49160</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
            <tag> 虚拟化 </tag>
            
            <tag> 沙箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01. Ansible简介与基本安装</title>
      <link href="/2020/05/20/01.%20Ansible%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
      <url>/2020/05/20/01.%20Ansible%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Ansible简介与基本安装"><a href="#1-Ansible简介与基本安装" class="headerlink" title="1. Ansible简介与基本安装"></a>1. Ansible简介与基本安装</h1><p>[toc]</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Ansible 是一个 IT 自动化工具。它能配置系统、部署软件、编排更复杂的 IT 任务，如连续部署或零停机时间滚动更新。</p><p>Ansible 用 python 编写，尽管市面上已经有很多可供选择的配置管理解决方案（例如 Salt，Puppet，Chef等），但它们各有优劣，而Ansible的特点在于它的简洁。让 Ansible 在主流的配置管理系统中与众不同的一点便是，它并不需要你在想要配置的每个节点上安装自己的组件。同时提供的一个优点在于，如果需要的话，你可以在不止一个地方控制你的整个基础架构。</p><h2 id="Ansible特性"><a href="#Ansible特性" class="headerlink" title="Ansible特性"></a>Ansible特性</h2><ul><li>Agentless：不需要在被管理节点上安装客户端，只要有sshd即可</li><li>Serverless：在服务端不需要启动任何服务，只需要执行命令就行</li><li>Modules in any language：基于模块工作，可以使用任意语言开发ansible模块</li><li>YAML, not code：使用yaml语言定制playbook</li><li>SSH by default：默认使用ssh控制各节点</li><li>Strong multi-tier solution：可实现多级控制</li></ul><h2 id="Ansible的基本组件"><a href="#Ansible的基本组件" class="headerlink" title="Ansible的基本组件"></a>Ansible的基本组件</h2><img src="https://code.aliyun.com/yanruogu/mypics/raw/master/ansible/ansible.png" / loading="lazy"><ul><li>核心：ansible</li><li>核心模块（Core Modules）：这些都是ansible自带的模块 </li><li>扩展模块（Custom Modules）：如果核心模块不足以完成某种功能，可以添加扩展模块</li><li>插件（Plugins）：完成模块功能的补充</li><li>剧本（Playbooks）：把需要完成的多个任务定义在剧本中</li><li>连接插件（Connectior Plugins）：ansible基于连接插件连接到各个主机上，虽然ansible是使用ssh连接到各个主机的，但是它还支持其他的连接方法，所以需要有连接插件</li><li>主机群（Host Inventory）：ansible在管理多台主机时，可以选择只对其中的一部分执行某些操作</li></ul><h2 id="Ansible工作机制"><a href="#Ansible工作机制" class="headerlink" title="Ansible工作机制"></a>Ansible工作机制</h2><p>Ansible 在管理节点将 Ansible 模块通过 SSH 协议（或者 Kerberos、LDAP）推送到被管理端执行，执行完之后自动删除，可以使用版本控制系统（git/svn）来管理自定义模块及playbooks。</p><p><img src="https://code.aliyun.com/yanruogu/mypics/raw/master/ansible/ansible2.png" alt="ansible2" loading="lazy"></p><h2 id="Ansible的安装"><a href="#Ansible的安装" class="headerlink" title="Ansible的安装"></a>Ansible的安装</h2><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p>Ansible的安装方式有很多种，常用的安装方法是基于yum或者源码，如果是基于yum安装，需要配置epel源，然后直接执行<code>yum -y install ansibl</code>即可。源码安装配置如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决依赖关系：</span></span><br><span class="line">yum install -y python36 python36-devel python36-setuptools gcc libffi-devel openssl-devel</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下载ansible：</span></span><br><span class="line">wget https://github.com/ansible/ansible/archive/v2.8.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压安装</span></span><br><span class="line"></span><br><span class="line">tar xf v2.8.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ansible-2.8.0/</span><br><span class="line">python setup.py build</span><br><span class="line">python setup.py install</span><br><span class="line">mkdir /etc/ansible</span><br><span class="line">cp -r examples/* /etc/ansible</span><br></pre></td></tr></table></figure><h3 id="使用pip安装"><a href="#使用pip安装" class="headerlink" title="使用pip安装"></a>使用pip安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo apt-add-repository --yes --update ppa:ansible/ansible</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ansible</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02. Ansible Inventory</title>
      <link href="/2020/05/20/02.%20Ansible%20Inventory/"/>
      <url>/2020/05/20/02.%20Ansible%20Inventory/</url>
      
        <content type="html"><![CDATA[<h1 id="2-Ansible-Inventory"><a href="#2-Ansible-Inventory" class="headerlink" title="2. Ansible Inventory"></a>2. Ansible Inventory</h1><p>[toc]</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在使用Ansible来批量管理主机的时候，通常我们需要先定义要管理哪些主机或者主机组，而这个用于管理主机与主机组的文件就叫做Inventory，也叫主机清单。该文件默认位于/etc/ansible/hosts。当然我们也可以通过修改ansible配置文件的hostfile配置项来修改默认inventory的位置。</p><h2 id="定义主机和组"><a href="#定义主机和组" class="headerlink" title="定义主机和组"></a>定义主机和组</h2><p>对于/etc/ansible/hosts最简单的定义格式像下面：</p><h3 id="1-简单的主机和组"><a href="#1-简单的主机和组" class="headerlink" title="1. 简单的主机和组"></a>1. 简单的主机和组</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 中括号中的名字代表组名，可以根据自己的需求将庞大的主机分成具有标识的组，如上面分了两个组webservers和dbservers组；  </span></span><br><span class="line"><span class="comment"># 主机(hosts)部分可以使用域名、主机名、IP地址表示；当然使用前两者时，也需要主机能反解析到相应的IP地址，一般此类配置中多使用IP地址；</span></span><br><span class="line">mail.yanruogu.com</span><br><span class="line">[webservers]</span><br><span class="line">web1.yanruogu.com</span><br><span class="line">web2.yanruogu.com </span><br><span class="line">[dbservers]</span><br><span class="line">db1.yanruogu.com</span><br><span class="line">db2.yanruogu.com</span><br></pre></td></tr></table></figure><h3 id="2-指定主机范围"><a href="#2-指定主机范围" class="headerlink" title="2. 指定主机范围"></a>2. 指定主机范围</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面指定了从web01到web50，webservers组共计50台主机；databases组有db-a到db-f共6台主机</span></span><br><span class="line">[webservers]</span><br><span class="line">www[01:50].yanruogu.com</span><br><span class="line">[databases]</span><br><span class="line">db-[a:f].yanruogu.com</span><br></pre></td></tr></table></figure><h3 id="3-定义主机组嵌套"><a href="#3-定义主机组嵌套" class="headerlink" title="3. 定义主机组嵌套"></a>3. 定义主机组嵌套</h3><p>一个主机组可以包含若干个子主机组：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如下示例中，production组包含两个子组，分别为webservers和dbservers，webservers和dbservers组分别包含若干主机</span></span><br><span class="line">[webservers]</span><br><span class="line">web1.lab.example.com</span><br><span class="line">web2.lab.example.com</span><br><span class="line"></span><br><span class="line">[dbservers]</span><br><span class="line">db1.lab.example.com</span><br><span class="line">db2.lab.example.com</span><br><span class="line"></span><br><span class="line">[production:children]</span><br><span class="line">webservers</span><br><span class="line">dbservers</span><br></pre></td></tr></table></figure><h2 id="选择主机与组"><a href="#选择主机与组" class="headerlink" title="选择主机与组"></a>选择主机与组</h2><p>在前面定义Inventory的时候，我们会把所有被管理主机通过主机组的方式定义到Inventory当中，但是当我们实际使用的时候，可能只需要对某一主机或主机组进行操作，这个时候就需要通过匹配的方式指定某一特定主机或主机组。</p><p>在此之间，我们先定义一个主机清单示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">srv1.example.com</span><br><span class="line">srv2.example.com</span><br><span class="line">s1.lab.example.com</span><br><span class="line">s2.lab.example.com</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">jupiter.lab.example.com</span><br><span class="line">saturn.example.com</span><br><span class="line"></span><br><span class="line">[db]</span><br><span class="line">db1.example.com</span><br><span class="line">db2.example.com</span><br><span class="line">db3.example.com</span><br><span class="line"></span><br><span class="line">[lb]</span><br><span class="line">lb1.lab.example.com</span><br><span class="line">lb2.lab.example.com</span><br><span class="line"></span><br><span class="line">[boston]</span><br><span class="line">db1.example.com</span><br><span class="line">jupiter.lab.example.com</span><br><span class="line">lb2.lab.example.com</span><br><span class="line"></span><br><span class="line">[london]</span><br><span class="line">db2.example.com</span><br><span class="line">db3.example.com</span><br><span class="line">file1.lab.example.com</span><br><span class="line">lb1.lab.example.com</span><br><span class="line"></span><br><span class="line">[dev]</span><br><span class="line">web1.lab.example.com</span><br><span class="line">db3.example.com</span><br><span class="line"></span><br><span class="line">[stage]</span><br><span class="line">file2.example.com</span><br><span class="line">db2.example.com</span><br><span class="line"></span><br><span class="line">[prod]</span><br><span class="line">lb2.lab.example.com</span><br><span class="line">db1.example.com</span><br><span class="line">jupiter.lab.example.com</span><br><span class="line"></span><br><span class="line">[<span class="keyword">function</span>:children]</span><br><span class="line">web</span><br><span class="line">db</span><br><span class="line">lb</span><br><span class="line">city</span><br><span class="line"></span><br><span class="line">[city:children]</span><br><span class="line">boston</span><br><span class="line">london</span><br><span class="line">environments</span><br><span class="line"></span><br><span class="line">[environments:children]</span><br><span class="line">dev</span><br><span class="line">stage</span><br><span class="line">prod</span><br><span class="line">new</span><br><span class="line"></span><br><span class="line">[new]</span><br><span class="line">172.25.252.23</span><br><span class="line">172.25.252.44</span><br></pre></td></tr></table></figure><h3 id="1-匹配所有主机"><a href="#1-匹配所有主机" class="headerlink" title="1. 匹配所有主机"></a>1. 匹配所有主机</h3><p>可以通过<code>all</code>或者<code>*</code>来指定匹配所有主机，通过如下指令查看<code>all</code>匹配到的主机：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ansible all --list-hosts</span></span><br><span class="line">  hosts (16):</span><br><span class="line">    srv1.example.com</span><br><span class="line">    srv2.example.com</span><br><span class="line">    s1.lab.example.com</span><br><span class="line">    s2.lab.example.com</span><br><span class="line">    jupiter.lab.example.com</span><br><span class="line">    saturn.example.com</span><br><span class="line">    db1.example.com</span><br><span class="line">    db2.example.com</span><br><span class="line">    db3.example.com</span><br><span class="line">    lb1.lab.example.com</span><br><span class="line">    lb2.lab.example.com</span><br><span class="line">    file1.lab.example.com</span><br><span class="line">    web1.lab.example.com</span><br><span class="line">    file2.example.com</span><br><span class="line">    172.25.252.23</span><br><span class="line">    172.25.252.44</span><br><span class="line">    172.25.252.32</span><br></pre></td></tr></table></figure><h3 id="2-匹配指定的主机或主机组"><a href="#2-匹配指定的主机或主机组" class="headerlink" title="2. 匹配指定的主机或主机组"></a>2. 匹配指定的主机或主机组</h3><ol><li><p>匹配单个组</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ansible prod --list-hosts</span></span><br><span class="line">  hosts (3):</span><br><span class="line">    lb2.lab.example.com</span><br><span class="line">    db1.example.com</span><br><span class="line">    jupiter.lab.example.com</span><br></pre></td></tr></table></figure></li><li><p>匹配单个主机</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ansible db2.example.com --list-hosts</span></span><br><span class="line">  hosts (1):</span><br><span class="line">    db2.example.com</span><br><span class="line">```    </span><br><span class="line">3. 匹配多个主机</span><br></pre></td></tr></table></figure><h1 id="ansible-‘lb1-lab-example-com-s1-lab-example-com-db1-example-com’-–list-hosts"><a href="#ansible-‘lb1-lab-example-com-s1-lab-example-com-db1-example-com’-–list-hosts" class="headerlink" title="ansible ‘lb1.lab.example.com,s1.lab.example.com,db1.example.com’ –list-hosts"></a>ansible ‘lb1.lab.example.com,s1.lab.example.com,db1.example.com’ –list-hosts</h1><p>hosts (3):<br> lb1.lab.example.com<br> s1.lab.example.com<br> db1.example.com</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. 匹配多个组</span><br><span class="line">&#96;&#96;&#96;sh</span><br><span class="line"># ansible &#39;london,boston&#39; --list-hosts</span><br><span class="line">  hosts (7):</span><br><span class="line">    db2.example.com</span><br><span class="line">    db3.example.com</span><br><span class="line">    file1.lab.example.com</span><br><span class="line">    lb1.lab.example.com</span><br><span class="line">    db1.example.com</span><br><span class="line">    jupiter.lab.example.com</span><br><span class="line">    lb2.lab.example.com</span><br></pre></td></tr></table></figure></li><li><p>匹配不属于任何组的主机</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ansible ungrouped --list-hosts</span></span><br><span class="line">  hosts (4):</span><br><span class="line">    srv1.example.com</span><br><span class="line">    srv2.example.com</span><br><span class="line">    s1.lab.example.com</span><br><span class="line">    s2.lab.example.com</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-通配符匹配"><a href="#3-通配符匹配" class="headerlink" title="3. 通配符匹配"></a>3. 通配符匹配</h3><ol><li>匹配’*.example.com’：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ansible '*.example.com' --list-hosts</span></span><br><span class="line">  hosts (14):</span><br><span class="line">    srv1.example.com</span><br><span class="line">    srv2.example.com</span><br><span class="line">    s1.lab.example.com</span><br><span class="line">    s2.lab.example.com</span><br><span class="line">    jupiter.lab.example.com</span><br><span class="line">    saturn.example.com</span><br><span class="line">    db1.example.com</span><br><span class="line">    db2.example.com</span><br><span class="line">    db3.example.com</span><br><span class="line">    lb1.lab.example.com</span><br><span class="line">    lb2.lab.example.com</span><br><span class="line">    file1.lab.example.com</span><br><span class="line">    web1.lab.example.com</span><br><span class="line">    file2.example.com</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>匹配<code>172.25.*</code>的主机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># ansible &#39;172.25.*&#39; --list-hosts                         </span><br><span class="line">  hosts (3):</span><br><span class="line">    172.25.252.23</span><br><span class="line">    172.25.252.44</span><br><span class="line">    172.25.252.32</span><br></pre></td></tr></table></figure></li><li><p>匹配以<code>s</code>开头的主机及主机组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ansible &#39;s*&#39; --list-hosts</span><br><span class="line">  hosts (7):</span><br><span class="line">    file2.example.com</span><br><span class="line">    db2.example.com</span><br><span class="line">    srv1.example.com</span><br><span class="line">    srv2.example.com</span><br><span class="line">    s1.lab.example.com</span><br><span class="line">    s2.lab.example.com</span><br><span class="line">    saturn.example.com</span><br></pre></td></tr></table></figure><h3 id="4-通配符组合匹配"><a href="#4-通配符组合匹配" class="headerlink" title="4. 通配符组合匹配"></a>4. 通配符组合匹配</h3></li><li><p>匹配包含<code>*.example.com</code>但不包含<code>*.lab.example.com</code>的主机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ansible &#39;*.example.com,!*.lab.example.com&#39; --list-hosts  </span><br><span class="line">  hosts (7):</span><br><span class="line">    srv1.example.com</span><br><span class="line">    srv2.example.com</span><br><span class="line">    saturn.example.com</span><br><span class="line">    db1.example.com</span><br><span class="line">    db2.example.com</span><br><span class="line">    db3.example.com</span><br><span class="line">    file2.example.com</span><br></pre></td></tr></table></figure></li><li><p>匹配包含prod以及172开头、包含lab关键字的主机或组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># ansible &#39;prod,172*,*lab*&#39; --list-hosts</span><br><span class="line">  hosts (11):</span><br><span class="line">    lb2.lab.example.com</span><br><span class="line">    db1.example.com</span><br><span class="line">    jupiter.lab.example.com</span><br><span class="line">    172.25.252.23</span><br><span class="line">    172.25.252.44</span><br><span class="line">    172.25.252.32</span><br><span class="line">    s1.lab.example.com</span><br><span class="line">    s2.lab.example.com</span><br><span class="line">    lb1.lab.example.com</span><br><span class="line">    file1.lab.example.com</span><br><span class="line">    web1.lab.example.com</span><br></pre></td></tr></table></figure></li><li><p>匹配属于db组同时还属于london组的主机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ansible &#39;db,&amp;london&#39; --list-hosts</span><br><span class="line">  hosts (2):</span><br><span class="line">    db2.example.com</span><br><span class="line">    db3.example.com</span><br></pre></td></tr></table></figure></li><li><p>匹配在london组或者boston组，还必须在prod组中且必须不在lb组中的主机：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ansible 'boston,london,&amp;prod,!lb' --list-hosts</span></span><br><span class="line">  hosts (2):</span><br><span class="line">    db1.example.com</span><br><span class="line">    jupiter.lab.example.com</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-正则表达式匹配"><a href="#4-正则表达式匹配" class="headerlink" title="4. 正则表达式匹配"></a>4. 正则表达式匹配</h3><p>在开头的地方使用”~”，用来表示这是一个正则表达式:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ansible '~(s|db).*example\.com' --list-hosts</span></span><br><span class="line">  hosts (8):</span><br><span class="line">    srv1.example.com</span><br><span class="line">    srv2.example.com</span><br><span class="line">    s1.lab.example.com</span><br><span class="line">    s2.lab.example.com</span><br><span class="line">    saturn.example.com</span><br><span class="line">    db1.example.com</span><br><span class="line">    db2.example.com</span><br><span class="line">    db3.example.com</span><br></pre></td></tr></table></figure><h3 id="5-通过-limit明确指定主机或组"><a href="#5-通过-limit明确指定主机或组" class="headerlink" title="5. 通过--limit明确指定主机或组"></a>5. 通过<code>--limit</code>明确指定主机或组</h3><ol><li><p>通过<code>--limit</code>在选定的组中明确指定主机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ansible ungrouped  --limit srv1.example.com --list-hosts</span><br><span class="line">  hosts (1):</span><br><span class="line">    srv1.example.com</span><br></pre></td></tr></table></figure></li><li><p>通过<code>--limit</code>参数，还可以指定一个文件，该文件中定义明确指定的主机的列表，定义一个retry_hosts.txt如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srv1.example.com</span><br></pre></td></tr></table></figure><p>再次执行ansible指令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ansible ungrouped  --limit @retry_hosts.txt --list-hosts</span></span><br><span class="line">  hosts (1):</span><br><span class="line">    srv1.example.com</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>后续学习中，在ansible-playbook命令行中也可以通过复杂的主机表达式来选定主机，不过需要使用-e参数来指定：ansible-palybook -e webservers:!:&amp; 。不过这个用法并不常用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03. Ansible配置文件管理</title>
      <link href="/2020/05/20/03.%20Ansible%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
      <url>/2020/05/20/03.%20Ansible%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="3-Ansible配置文件管理"><a href="#3-Ansible配置文件管理" class="headerlink" title="3. Ansible配置文件管理"></a>3. Ansible配置文件管理</h1><p>[toc]</p><h2 id="配置文件优先级"><a href="#配置文件优先级" class="headerlink" title="配置文件优先级"></a>配置文件优先级</h2><p>ansible的配置文件名为ansible.cfg，它一般会存在于四个地方：</p><ul><li>ANSIBLE_CONFIG：首先，Ansible命令会检查该环境变量，及这个环境变量将指向的配置文件</li><li>./ansible.cfg：当前工作目录，即当前执行ansible指令的目录，如果ANSIBEL_CONFIG环境变量未定义，则优先使用该配置文件 </li><li>~/.ansible.cfg：当前用户家目录下的一个隐藏文件，如果当前工作目录下不存在ansible.cfg配置文件，则会查找用户家目录下的该隐藏文件</li><li>/etc/ansible/ansible.cfg：默认配置文件，如果上面两个路径下的ansible.cfg都不存在，则使用该文件</li></ul><blockquote><p>需要说明的是，配置文件中所有的配置项都可以通过环境变量的方式来定义，而环境变量定义的配置项具有最高优先级，会覆盖掉所有配置文件中的配置项</p></blockquote><h2 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h2><h3 id="配置文件分段说明"><a href="#配置文件分段说明" class="headerlink" title="配置文件分段说明"></a>配置文件分段说明</h3><p>ansible.cfg的配置默认分为十段：</p><ul><li>[defaults]：通用配置项</li><li>[inventory]：与主机清单相关的配置项</li><li>[privilege_escalation]：特权升级相关的配置项</li><li>[paramiko_connection]：使用paramiko连接的相关配置项，Paramiko在RHEL6以及更早的版本中默认使用的ssh连接方式</li><li>[ssh_connection]：使用OpenSSH连接的相关配置项，OpenSSH是Ansible在RHEL6之后默认使用的ssh连接方式</li><li>[persistent_connection]：持久连接的配置项</li><li>[accelerate]：加速模式配置项</li><li>[selinux]：selinux相关的配置项</li><li>[colors]：ansible命令输出的颜色相关的配置项</li><li>[diff]：定义是否在运行时打印diff（变更前与变更后的差异）</li></ul><h3 id="配置参数说明"><a href="#配置参数说明" class="headerlink" title="配置参数说明"></a>配置参数说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line">inventory      &#x3D; &#x2F;etc&#x2F;ansible&#x2F;hosts</span><br><span class="line">remote_user    &#x3D; root</span><br><span class="line">ask_pass       &#x3D; false</span><br><span class="line">log_path       &#x3D; &#x2F;var&#x2F;log&#x2F;ansible.log</span><br><span class="line"></span><br><span class="line">[privilege_escalation]</span><br><span class="line">become&#x3D;True</span><br><span class="line">become_method&#x3D;sudo</span><br><span class="line">become_user&#x3D;root</span><br><span class="line">become_ask_pass&#x3D;False</span><br><span class="line"></span><br><span class="line">[ssh_connection]</span><br><span class="line">ssh_args &#x3D; -C -o ControlMaster&#x3D;auto -o ControlPersist&#x3D;60s </span><br><span class="line">host_key_checking &#x3D; False</span><br></pre></td></tr></table></figure><p>配置项说明：</p><ul><li>inventory：定义默认使用的主机清单</li><li>remote_user： ansible在操作远程主机时，使用远程主机上的哪个用户身份，默认是root</li><li>ask_pass：ansible在操作远程主机时，获取远程主机上的用户身份，是否交互提示密码验证，默认为true。如果使用密钥认证的话，建议将其设置为false</li><li>log_path：默认ansible 执行的时候，并不会输出日志到文件，打开该配置项，所有的命令执行后，都会将日志输出到<code>/var/log/ansible.log</code>文件。</li></ul><ul><li>become：如果ansible在操作远程主机时，使用的是远程主机上的普通用户，该普通用户是否允许提权</li><li>become_method：如果允许提权，使用何种提权方式，默认是sudo</li><li>become_user：提权到哪个用户身份，默认是root</li><li>become_ask_pass：提权时，是否交互提示密码验证，默认为False</li></ul><ul><li>ssh_args：ansible通过ssh连接远程被管理机，这里用于定义一些ssh连接时的参数，如-C启用压缩传输，ControlPersist用于提升性能。</li><li>host_key_checking：通过ssh首次连接远程主机时，由于在本机的<code>~/.ssh/known_hosts</code>文件中并有<code>fingerprint key</code>串，ssh第一次连接的时候一般会提示输入yes/no进行确认将key字符串加入到<code>~/.ssh/known_hosts</code>文件中。将此项设置为False将跳过该确认过程。</li></ul><h2 id="关于ssh连接一些常见的错误说明"><a href="#关于ssh连接一些常见的错误说明" class="headerlink" title="关于ssh连接一些常见的错误说明"></a>关于ssh连接一些常见的错误说明</h2><ol><li><code>ERROR! to use the &#39;ssh&#39; connection type with passwords, you must install the sshpass program</code></li></ol><p>完整错误示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ctnr:&#x2F;etc&#x2F;ansible# ansible &#39;*.a32-168-1.*&#39; -m ping</span><br><span class="line">ctnr.a32-168-1.prod.yiz | FAILED! &#x3D;&gt; &#123;</span><br><span class="line">    &quot;failed&quot;: true, </span><br><span class="line">    &quot;msg&quot;: &quot;ERROR! to use the &#39;ssh&#39; connection type with passwords, you must install the sshpass program&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般出现这种错误，是在通过密码验证远程被管理机的时候，需要在server端安装sshpass：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install sshpass -y</span><br></pre></td></tr></table></figure><ol start="2"><li><code>Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this.  Please add this host&#39;s fingerprint to your known_hosts file to manage this host</code></li></ol><p>完整错误如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ansible test -a &#39;uptime&#39;</span><br><span class="line"></span><br><span class="line">192.168.1.1| FAILED &#x3D;&gt;Using a SSH password instead of a key is not possible because HostKey checking is enabled and sshpass does not support this.Please add this host&#39;s fingerprint to your known_hosts file to manage this host.</span><br><span class="line">192.168.1.2 | FAILED &#x3D;&gt; Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this.  Please add this host&#39;s fingerprint to your known_hosts file to manage this host.</span><br></pre></td></tr></table></figure><p>这种错误通常就出现在server端第一次连接被管理机的时候，就是上面说到的需要通过输入yes/no进行确认将key字符串加入到<code>~/.ssh/known_hosts</code>文件中。</p><p>解决办法有两个：</p><ul><li>通过修改上面提到的host_key_cheking，将其设置为false（在实际测试中，似乎并没有效果）</li><li>通过修改ssh_args参数，修改如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh_args &#x3D; -C -o ControlMaster&#x3D;auto -o ControlPersist&#x3D;60s -o StrictHostKeyChecking&#x3D;no</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04. Ansible Ad-hoc与命令执行模块</title>
      <link href="/2020/05/20/04.%20Ansible%20Ad-hoc%E4%B8%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/05/20/04.%20Ansible%20Ad-hoc%E4%B8%8E%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="4-Ansible-Ad-hoc与命令执行模块"><a href="#4-Ansible-Ad-hoc与命令执行模块" class="headerlink" title="4. Ansible Ad-hoc与命令执行模块"></a>4. Ansible Ad-hoc与命令执行模块</h1><p>[toc]</p><h2 id="Ad-hoc"><a href="#Ad-hoc" class="headerlink" title="Ad-hoc"></a>Ad-hoc</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Ad-Hoc 是指ansible下临时执行的一条命令，并且不需要保存的命令，对于复杂的命令会使用playbook。Ad-hoc的执行依赖于模块，ansible官方提供了大量的模块。 如：command、raw、shell、file、cron等，具体可以通过ansible-doc -l 进行查看 。可以使用ansible-doc -s module来查看某个模块的参数，也可以使用ansible-doc help module来查看该模块更详细的信息。</p><h3 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h3><p>一个ad-hoc命令的执行，需要按以下格式进行执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible 主机或组 -m 模块名 -a <span class="string">'模块参数'</span>  ansible参数</span><br></pre></td></tr></table></figure><ul><li>主机和组，是在/etc/ansible/hosts 里进行指定的部分，当然动态Inventory 使用的是脚本从外部应用里获取的主机；</li><li>模块名，可以通过ansible-doc -l 查看目前安装的模块，默认不指定时，使用的是command模块，具体可以查看/etc/ansible/ansible.cfg 的“#module_name = command ” 部分，默认模块可以在该配置文件中进行修改；</li><li>模块参数，可以通过 “ansible-doc -s 模块名” 查看具体的用法及后面的参数；</li><li>ansible参数，可以通过ansible命令的帮助信息里查看到，这里有很多参数可以供选择，如是否需要输入密码、是否sudo等。</li></ul><h3 id="用户说明"><a href="#用户说明" class="headerlink" title="用户说明"></a>用户说明</h3><p>ansible在执行ad-hoc的时候，需要使用远程管理机上的一个用户身份，默认这个用户是root，而在实际生产环境中，不建议直接使用root，而推荐使用一个普通用户，需要配置该普通用户可通过sudo提权。</p><p>下面是一个配置示例：</p><ol><li><p>在被管理机上创建一个普通用户ansible，并配置sudo提权：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 创建ansible用户</span><br><span class="line">useradd ansible</span><br><span class="line"></span><br><span class="line"># 设置ansible用户可免密提权</span><br><span class="line">vim &#x2F;etc&#x2F;sudoers.d&#x2F;ansible</span><br><span class="line">ansible    ALL&#x3D;(ALL)       NOPASSWD:ALL</span><br><span class="line"></span><br><span class="line">chmod 400 &#x2F;etc&#x2F;sudoers.d&#x2F;ansible</span><br><span class="line"></span><br><span class="line">mkdir &#x2F;home&#x2F;ansible&#x2F;.ssh</span><br><span class="line">chown ansible.ansible &#x2F;home&#x2F;ansible&#x2F;.ssh</span><br><span class="line">chmod 700 &#x2F;home&#x2F;ansible&#x2F;.ssh</span><br></pre></td></tr></table></figure></li><li><p>在管理端修改ansible.cfg配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line">remote_user &#x3D; ansible</span><br><span class="line">ask_pass &#x3D; False</span><br><span class="line"></span><br><span class="line">[privilege_escalation]</span><br><span class="line">become&#x3D;True</span><br><span class="line">become_method&#x3D;sudo</span><br><span class="line">become_user&#x3D;root</span><br><span class="line">become_ask_pass&#x3D;False</span><br></pre></td></tr></table></figure></li><li><p>将管理端用户的<code>id_rsa.pub</code>复制到被管理端的<code>/home/ansible/.ssh//home/ansible/.ssh/authorized_keys</code>文件中，并设置该文件的权限为400</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 管理端执行：</span><br><span class="line">ssh-copy-id -i .ssh&#x2F;id_rsa.pub ansible@db1.example.com</span><br></pre></td></tr></table></figure><blockquote><p>需要说明的是，通过上面的操作，需要为ansible用户先创建密码，在实际生产当中，不建议为该用户设置密码。可在安装系统时，提前将管理端公钥直接写入到被管理节点的ansible用户下</p></blockquote><h2 id="命令执行模块"><a href="#命令执行模块" class="headerlink" title="命令执行模块"></a>命令执行模块</h2><p>命令执行模块包含如下 四个模块：</p><ul><li>command模块：该模块通过-a跟上要执行的命令可以直接执行，不过命令里如果有带有如下字符部分则执行不成功 “  “&lt;”, “&gt;”, “|”,  “&amp;” ；</li><li>shell 模块：用法基本和command一样，不过其是通过/bin/sh进行执行，所以shell 模块可以执行任何命令，就像在本机执行一样；</li><li>raw模块：用法和shell模块一样，也可以执行任意命令，就像在本机执行一样；和command、shell模块不同的是其没有chdir、creates、removes参数</li><li>script模块：将管理端的shell 在被管理主机上执行，其原理是先将shell 复制到远程主机，再在远程主机上执行，原理类似于raw模块。  </li></ul><h3 id="shell模块"><a href="#shell模块" class="headerlink" title="shell模块"></a>shell模块</h3><p>shell模块包含如下选项： </p><ul><li>creates：一个文件名，当该文件存在，则该命令不执行 </li><li>free_form：要执行的linux指令 </li><li>chdir：在执行指令之前，先切换到该指定的目录 </li><li>removes：一个文件名，当该文件不存在，则该选项不执行</li></ul><p>chdir示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三个命令都会返回执行成功的状态。不过实际上只有前两个文件会被创建成功。使用raw模块的执行的结果文件事实上也被正常创建了，不过不是在chdir指定的目录，而是在当前执行用户的家目录</span></span><br><span class="line">ansible 192.168.1.1 -m <span class="built_in">command</span> -a <span class="string">'chdir=/tmp/test.txt touch test.file'</span></span><br><span class="line">ansible 192.168.1.1 -m shell -a <span class="string">'chdir=/tmp/test.txt touch test2.file'</span></span><br><span class="line">ansible 192.168.1.1 -m raw -a <span class="string">'chdir=/tmp/text.txt touch test3.file'</span></span><br></pre></td></tr></table></figure><p>creates与removes示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible 192.168.1.1 -a <span class="string">'creates=/tmp/server.txt uptime'</span> <span class="comment">#当/tmp/server.txt文件存在时，则不执行uptime指令</span></span><br><span class="line">ansible 192.168.1.1 -a <span class="string">'removes=/tmp/server.txt uptime'</span> <span class="comment">#当/tmp/server.txt文件不存在时，则不执行uptime指令</span></span><br></pre></td></tr></table></figure><h3 id="script模块"><a href="#script模块" class="headerlink" title="script模块"></a>script模块</h3><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要执行的脚本文件script.sh内容如下： </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">ifconfig</span><br><span class="line">df -hT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行ansible指令：</span></span><br><span class="line">ansible 10.212.52.252 -m script -a <span class="string">'script.sh'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05. Ansible 常用模块</title>
      <link href="/2020/05/20/05.%20Ansible%20%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/05/20/05.%20Ansible%20%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="5-Ansible-常用模块"><a href="#5-Ansible-常用模块" class="headerlink" title="5. Ansible 常用模块"></a>5. Ansible 常用模块</h1><p>[toc]    </p><html><p>根据官方的分类，将模块按功能分类为：云模块、命令模块、数据库模块、文件模块、资产模块、消息模块、监控模块、网络模块、通知模块、包管理模块、源码控制模块、系统模块、单元模块、web设施模块、windows模块 ，具体可以参看官方页面。  这里从官方分类的模块里选择最常用的一些模块进行介绍。</p><h1>ping模块</h1><p>测试主机是否是通的，用法很简单，不涉及参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible <span class="built_in">test</span> -m ping</span><br></pre></td></tr></table></figure><h2 id="authorized-key"><a href="#authorized-key" class="headerlink" title="authorized_key"></a>authorized_key</h2><p>用于向被控端推送公钥，通常用于在ansible第一次连接被控端时向其推送ansible主控端的管理公钥。</p><p>常用选项：</p><ul><li>user: 指定将公钥推送给被控端的哪个用户</li><li>key：指定被推送的公钥的内容</li><li>path：默认情况下，会将公钥推送至被控端用户家目录的.ssh/authorized_keys文件中，可通过该配置项自定义该路径</li><li>state：是推送还是删除，present|absent</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible test -m authorized_key -a &#39;user&#x3D;ansible key&#x3D;&quot;&#123;&#123; lookup(&#39;file&#39;,&#39;&#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub&#39;)&#125;&#125;&quot;&#39;</span><br></pre></td></tr></table></figure><blockquote><p>更多用法可参考<a href="https://docs.ansible.com/ansible/latest/modules/authorized_key_module.html?highlight=authorized_keys" target="_blank" rel="noopener">官方文档</a></p></blockquote><h2 id="file模块"><a href="#file模块" class="headerlink" title="file模块"></a>file模块</h2><p>file模块主要用于远程主机上的文件操作，file模块包含如下选项： </p><ul><li>force：需要在两种情况下强制创建软链接，一种是源文件不存在但之后会建立的情况下；另一种是目标软链接已存在,需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no </li><li>group：定义文件/目录的属组 </li><li>mode：定义文件/目录的权限</li><li>owner：定义文件/目录的属主</li><li>path：必选项，定义文件/目录的路径</li><li>src：要被链接的源文件的路径，只应用于state=link的情况</li><li>dest：被链接到的路径，只应用于state=link的情况 </li><li>state：  <ul><li>directory：如果目录不存在，创建目录</li><li>file：即使文件不存在，也不会被创建</li><li>link：创建软链接</li><li>hard：创建硬链接</li><li>touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间</li><li>absent：删除目录、文件或者取消链接文件</li></ul></li></ul><p>使用示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ansible 192.168.8.120 -m file -a <span class="string">'path=/tmp/test.txt state=touch owner=root group=root mode=644'</span></span><br><span class="line"></span><br><span class="line">ansible 192.168.8.120 -m file -a <span class="string">'src=/tmp/test.txt dest=/root/test.txt state=link'</span></span><br><span class="line"></span><br><span class="line">ansible 192.168.8.120 -m file -a <span class="string">'path=/tmp/test.txt state=file'</span></span><br><span class="line"></span><br><span class="line">ansible 192.168.8.120 -m file -a <span class="string">'path=/tmp/test state=directory owner=root group=root mode=755'</span></span><br><span class="line"></span><br><span class="line">ansible 192.168.8.120 -m file -a <span class="string">'path=/tmp/test2/test3/aaa/bbb state=directory owner=root group=root mode=755'</span></span><br><span class="line"></span><br><span class="line">ansible 192.168.8.120 -m file -a <span class="string">'path=/tmp/test2 state=absent'</span></span><br></pre></td></tr></table></figure><blockquote><p>更多用法可参考<a href="https://docs.ansible.com/ansible/latest/modules/file_module.html?highlight=file" target="_blank" rel="noopener">官方文档</a></p></blockquote><h2 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h2><p>复制文件到远程主机，copy模块包含如下选项：</p><ul><li>backup：在覆盖之前将原文件备份，备份文件包含时间信息。有两个选项：yes|no </li><li>content：用于替代”src”,可以直接设定指定文件的值 </li><li>dest：必选项。要将源文件复制到的远程主机的绝对路径，如果源文件是一个目录，那么该路径也必须是个目录 </li><li>force：如果目标主机包含该文件，但内容不同，如果设置为yes，则强制覆盖，如果为no，则只有当目标主机的目标位置不存在该文件时，才复制。默认为yes</li><li>others：所有的file模块里的相关文件属性选项都可以在这里使用</li><li>src：要复制到远程主机的文件在本地的地址，可以是绝对路径，也可以是相对路径。如果路径是一个目录，它将递归复制。在这种情况下，如果路径使用”/“来结尾，则只复制目录里的内容，如果没有使用”/“来结尾，则包含目录在内的整个内容全部复制，类似于rsync。 </li></ul><p>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ansible 192.168.8.120 -m copy -a &#39;src&#x3D;&#x2F;etc&#x2F;ansible&#x2F;ansible.cfg dest&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F; owner&#x3D;root group&#x3D;root mode&#x3D;644&#39;</span><br><span class="line"></span><br><span class="line">ansible 192.168.8.120 -m copy -a &#39;backup&#x3D;yes src&#x3D;&#x2F;etc&#x2F;fstab dest&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;ansible.cfg owner&#x3D;root group&#x3D;root mode&#x3D;644&#39;</span><br><span class="line"></span><br><span class="line">ansible 192.168.8.120 -m copy -a &#39;content&#x3D;&quot;just a test!&quot; dest&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;test.txt&#39;</span><br><span class="line"></span><br><span class="line">ansible 192.168.8.120 -m copy -a &#39;src&#x3D;&#x2F;data dest&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">ansible 192.168.8.120 -m copy -a &#39;src&#x3D;&#x2F;data&#x2F; dest&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">ansible 192.168.8.120 -m copy -a &quot;src&#x3D;&#x2F;mine&#x2F;sudoers dest&#x3D;&#x2F;etc&#x2F;sudoers validate&#x3D;&#39;visudo -cf %s&#39;&quot;</span><br></pre></td></tr></table></figure><h2 id="yum模块"><a href="#yum模块" class="headerlink" title="yum模块"></a>yum模块</h2><p>使用yum包管理器来管理软件包，其选项有： </p><ul><li><code>name</code>：要进行操作的软件包的名字，也可以传递一个url或者一个本地的rpm包的路径 </li><li><code>state</code>：状态（present，absent，latest）</li></ul><p>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ansible test -m yum -a &#39;name&#x3D;httpd state&#x3D;latest&#39;</span><br><span class="line">ansible test -m yum -a &#39;name&#x3D;&quot;@Development tools&quot; state&#x3D;present&#39;</span><br><span class="line">ansible test -m yum -a &#39;name&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;6&#x2F;noarch&#x2F;RPMS&#x2F;nginx-release-centos-6-0.el6.ngx.noarch.rpm state&#x3D;present&#39;</span><br></pre></td></tr></table></figure><h2 id="service模块"><a href="#service模块" class="headerlink" title="service模块"></a>service模块</h2><p>用于管理服务<br>该模块包含如下选项： </p><ul><li>arguments：给命令行提供一些选项 </li><li>enabled：是否开机启动 yes|no</li><li>name：必选项，服务名称 </li><li>pattern：定义一个模式，如果通过status指令来查看服务的状态时，没有响应，就会通过ps指令在进程中根据该模式进行查找，如果匹配到，则认为该服务依然在运行</li><li>runlevel：运行级别</li><li>sleep：如果执行了restarted，在则stop和start之间沉睡几秒钟</li><li>state：对当前服务执行启动，停止、重启、重新加载等操作（started,stopped,restarted,reloaded）</li><li>daemon_reload：针对使用systemd的系统，重新加载systemd配置，yes/no</li></ul><p>使用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ansible test -m service -a &quot;name&#x3D;httpd state&#x3D;started enabled&#x3D;yes&quot;</span><br><span class="line">asnible test -m service -a &quot;name&#x3D;foo pattern&#x3D;&#x2F;usr&#x2F;bin&#x2F;foo state&#x3D;started&quot;</span><br><span class="line">ansible test -m service -a &quot;name&#x3D;network state&#x3D;restarted args&#x3D;eth0&quot;</span><br></pre></td></tr></table></figure><h2 id="systemd模块"><a href="#systemd模块" class="headerlink" title="systemd模块"></a>systemd模块</h2><ul><li>daemon_reload：当服务配置文件发生变更时重载服务</li><li>name：指定服务名称</li><li>enabled：是否设置开机自启</li><li>state：管理服务状态，reloaded|restarted|started|stopped</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible test -m systemd -a &quot;name&#x3D;httpd state&#x3D;started enabled&#x3D;yes daemon_reload&#x3D;yes&quot;</span><br></pre></td></tr></table></figure><h2 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a>cron模块</h2><p>用于管理计划任务  </p><p>包含如下选项： </p><ul><li>backup：对远程主机上的原任务计划内容修改之前做备份 </li><li>cron_file：如果指定该选项，则用该文件替换远程主机上的cron.d目录下的用户的任务计划 </li><li>day：日（1-31，<em>，</em>/2,……） </li><li>hour：小时（0-23，<em>，</em>/2，……）  </li><li>minute：分钟（0-59，<em>，</em>/2，……） </li><li>month：月（1-12，<em>，</em>/2，……） </li><li>weekday：周（0-7，*，……）</li><li>job：要执行的任务，依赖于state=present </li><li>name：该任务的描述 </li><li>special_time：指定什么时候执行，参数：reboot,yearly,annually,monthly,weekly,daily,hourly </li><li>state：确认该任务计划是创建还是删除 </li><li>user：以哪个用户的身份执行</li></ul><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ansible <span class="built_in">test</span> -m cron -a <span class="string">'name="a job for reboot" special_time=reboot job="/some/job.sh"'</span></span><br><span class="line">ansible <span class="built_in">test</span> -m cron -a <span class="string">'name="yum autoupdate" weekday="2" minute=0 hour=12 user="root"'</span></span><br><span class="line">ansible <span class="built_in">test</span> -m cron  -a <span class="string">'backup="True" name="test" minute="0" hour="5,2" job="ls -alh &gt; /dev/null"'</span></span><br><span class="line">ansilbe <span class="built_in">test</span> -m cron -a <span class="string">'cron_file=ansible_yum-autoupdate state=absent'</span></span><br></pre></td></tr></table></figure><h2 id="group模块"><a href="#group模块" class="headerlink" title="group模块"></a>group模块</h2><p>goup模块请求的是groupadd, groupdel, groupmod 三个指令。</p><ul><li>gid：指定组id</li><li>name：指定组名</li><li>state：创建还是删除组，选项：present|absent</li><li>system：是否将该组创建为系统组，默认为no</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible test -m group -a &#39;name&#x3D;test gid&#x3D;1001 state&#x3D;present system&#x3D;yes&#39;</span><br></pre></td></tr></table></figure><h2 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h2><p>user模块是请求的是useradd, userdel, usermod三个指令</p><ul><li>home：指定用户的家目录，需要与createhome配合使用</li><li>groups：指定用户的附加组</li><li>group：指定用户属组</li><li>uid：指定用的uid</li><li>password：指定用户的密码</li><li>name：指定用户名</li><li>createhome：是否创建家目录 yes|no</li><li>system：是否为系统用户</li><li>comment：定义用户描述信息</li><li>remove：当state=absent时，remove=yes则表示连同家目录一起删除，等价于userdel -r</li><li>state：是创建还是删除</li><li>shell：指定用户的shell环境</li></ul><p>使用示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user: name=johnd comment=<span class="string">"John Doe"</span> uid=1040 group=admin</span><br><span class="line">user: name=james shell=/bin/bash groups=admins,developers append=yes user: name=johnd state=absent remove=yes</span><br><span class="line">user: name=james18 shell=/bin/zsh groups=developers expires=1422403387</span><br><span class="line"><span class="comment">#生成密钥时，只会生成公钥文件和私钥文件，和直接使用ssh-keygen指令效果相同，不会生成authorized_keys文件</span></span><br><span class="line">user: name=<span class="built_in">test</span> generate_ssh_key=yes ssh_key_bits=2048 ssh_key_file=.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>需要说明的是，在指定password参数时，不能使用明文密码，因为后面这一串密码会被直接传送到被管理主机的/etc/shadow文件中，所以需要先将密码字符串进行加密处理。然后将得到的字符串放到password中即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;123456&quot; | openssl passwd -1 -salt $(&lt; &#x2F;dev&#x2F;urandom tr -dc &#39;[:alnum:]&#39; | head -c 32) -stdin</span><br><span class="line">$1$4P4PlFuE$ur9ObJiT5iHNrb9QnjaIB0</span><br><span class="line"></span><br><span class="line">#使用上面的密码创建用户</span><br><span class="line">ansible all -m user -a &#39;name&#x3D;foo password&#x3D;&quot;$1$4P4PlFuE$ur9ObJiT5iHNrb9QnjaIB0&quot;&#39;</span><br></pre></td></tr></table></figure><blockquote><p>不同的发行版默认使用的加密方式可能会有区别，具体可以查看/etc/login.defs文件确认，centos 7使用的是SHA512加密算法。</p></blockquote><h2 id="synchronize模块"><a href="#synchronize模块" class="headerlink" title="synchronize模块"></a>synchronize模块</h2><p>使用rsync同步文件，其参数如下：</p><ul><li>archive: 归档，相当于同时开启recursive(递归)、links、perms、times、owner、group、-D选项都为yes ，默认该项为开启</li><li>checksum: 跳过检测sum值，默认关闭</li><li>compress:是否开启压缩</li><li>copy_links：复制链接文件，默认为no ，注意后面还有一个links参数</li><li>delete: 删除不存在的文件，默认no</li><li>dest：目录路径</li><li>dest_port：默认目录主机上的端口 ，默认是22，走的ssh协议</li><li>dirs：传输目录不进行递归，默认为no，即进行目录递归</li><li>rsync_opts：rsync参数部分</li><li>set_remote_user：主要用于/etc/ansible/hosts中定义或默认使用的用户与rsync使用的用户不同的情况</li><li>mode: push或pull 模块，push模式的话，一般用于从本机向远程主机上传文件，pull 模式用于从远程主机上取文件</li></ul><p>使用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src&#x3D;some&#x2F;relative&#x2F;path dest&#x3D;&#x2F;some&#x2F;absolute&#x2F;path rsync_path&#x3D;&quot;sudo rsync&quot;</span><br><span class="line">src&#x3D;some&#x2F;relative&#x2F;path dest&#x3D;&#x2F;some&#x2F;absolute&#x2F;path archive&#x3D;no links&#x3D;yes</span><br><span class="line">src&#x3D;some&#x2F;relative&#x2F;path dest&#x3D;&#x2F;some&#x2F;absolute&#x2F;path checksum&#x3D;yes times&#x3D;no</span><br><span class="line">src&#x3D;&#x2F;tmp&#x2F;helloworld dest&#x3D;&#x2F;var&#x2F;www&#x2F;helloword rsync_opts&#x3D;--no-motd,--exclude&#x3D;.git mode&#x3D;pull</span><br></pre></td></tr></table></figure><h2 id="filesystem模块"><a href="#filesystem模块" class="headerlink" title="filesystem模块"></a>filesystem模块</h2><p>在块设备上创建文件系统<br>常用选项： </p><ul><li>dev：目标块设备</li><li>force：在一个已有文件系统的设备上强制创建</li><li>fstype：文件系统的类型</li><li>opts：传递给mkfs命令的选项</li></ul><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible <span class="built_in">test</span> -m filesystem -a <span class="string">'fstype=ext2 dev=/dev/sdb1 force=yes'</span></span><br><span class="line">ansible <span class="built_in">test</span> -m filesystem -a <span class="string">'fstype=ext4 dev=/dev/sdb1 opts="-cc"'</span></span><br></pre></td></tr></table></figure><h2 id="mount模块"><a href="#mount模块" class="headerlink" title="mount模块"></a>mount模块</h2><p>配置挂载点<br>选项： </p><ul><li>boot：是否开机自动挂载</li><li>fstype：必选项，挂载文件的类型 </li><li>name：必选项，挂载点 </li><li>opts：传递给mount命令的参数</li><li>src：必选项，要挂载的文件 </li><li>state：必选项 <ul><li>present：只处理fstab中的配置 </li><li>absent：删除挂载点 </li><li>mounted：自动创建挂载点并挂载之 </li><li>umounted：卸载</li></ul></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name&#x3D;&#x2F;mnt&#x2F;dvd src&#x3D;&#x2F;dev&#x2F;sr0 fstype&#x3D;iso9660 opts&#x3D;ro state&#x3D;present</span><br><span class="line">name&#x3D;&#x2F;srv&#x2F;disk src&#x3D;&#39;LABEL&#x3D;SOME_LABEL&#39; state&#x3D;present</span><br><span class="line">name&#x3D;&#x2F;home src&#x3D;&#39;UUID&#x3D;b3e48f45-f933-4c8e-a700-22a159ec9077&#39; opts&#x3D;noatime state&#x3D;present</span><br><span class="line"></span><br><span class="line">ansible test -a &#39;dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;disk.img bs&#x3D;4k count&#x3D;1024&#39;</span><br><span class="line">ansible test -a &#39;losetup &#x2F;dev&#x2F;loop0 &#x2F;disk.img&#39;</span><br><span class="line">ansible test -m filesystem &#39;fstype&#x3D;ext4 force&#x3D;yes opts&#x3D;-F dev&#x3D;&#x2F;dev&#x2F;loop0&#39;</span><br><span class="line">ansible test -m mount &#39;name&#x3D;&#x2F;mnt src&#x3D;&#x2F;dev&#x2F;loop0 fstype&#x3D;ext4 state&#x3D;mounted opts&#x3D;rw&#39;</span><br></pre></td></tr></table></figure><h2 id="get-url-模块"><a href="#get-url-模块" class="headerlink" title="get_url 模块"></a>get_url 模块</h2><p>该模块主要用于从http、ftp、https服务器上下载文件（类似于wget），主要有如下选项：</p><ul><li>sha256sum：下载完成后进行sha256 check；</li><li>timeout：下载超时时间，默认10s</li><li>url：下载的URL</li><li>url_password、url_username：主要用于需要用户名密码进行验证的情况</li><li>use_proxy：是事使用代理，代理需事先在环境变更中定义</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get_url: url&#x3D;http:&#x2F;&#x2F;example.com&#x2F;path&#x2F;file.conf dest&#x3D;&#x2F;etc&#x2F;foo.conf mode&#x3D;0440</span><br><span class="line">get_url: url&#x3D;http:&#x2F;&#x2F;example.com&#x2F;path&#x2F;file.conf dest&#x3D;&#x2F;etc&#x2F;foo.conf sha256sum&#x3D;b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c</span><br></pre></td></tr></table></figure><h2 id="unarchive模块"><a href="#unarchive模块" class="headerlink" title="unarchive模块"></a>unarchive模块</h2><p>用于解压文件，模块包含如下选项：</p><ul><li>remote_src：如果为yes，则文件会从master端复制到目标端。否则会直接尝试从目标端查找文件。默认为no。</li><li>creates：指定一个文件名，当该文件存在时，则解压指令不执行</li><li>dest：远程主机上的一个路径，即文件解压的路径 </li><li>group：解压后的目录或文件的属组</li><li>list_files：如果为yes，则会列出压缩包里的文件，默认为no，2.0版本新增的选项</li><li>mode：解决后文件的权限</li><li>src：如果copy为yes，则需要指定压缩文件的源路径 </li><li>owner：解压后文件或目录的属主</li></ul><p>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- unarchive: src&#x3D;foo.tgz dest&#x3D;&#x2F;var&#x2F;lib&#x2F;foo</span><br><span class="line">- unarchive: src&#x3D;&#x2F;tmp&#x2F;foo.zip dest&#x3D;&#x2F;usr&#x2F;local&#x2F;bin copy&#x3D;no</span><br><span class="line">- unarchive: src&#x3D;https:&#x2F;&#x2F;example.com&#x2F;example.zip dest&#x3D;&#x2F;usr&#x2F;local&#x2F;bin remote_src&#x3D;yes</span><br></pre></td></tr></table></figure><h2 id="assemble"><a href="#assemble" class="headerlink" title="assemble"></a>assemble</h2><p>用于组装文件，即将多个零散的文件，合并一个大文件  </p><p>常用参数：</p><ul><li>src：原文件(即零散文件)的路径</li><li>dest：合并后的大文件路径</li><li>group：合并后的大文件的属组</li><li>owner：合并后的大文件的属主</li><li>mode：合并后的大文件的权限</li><li>validate：与template的validate相同，指定命令验证文件</li><li>ignore_hidden：组装时，是否忽略隐藏文件，默认为no，该参数在2.0版本中新增</li></ul><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Make</span> <span class="string">a</span> <span class="string">Directory</span> <span class="string">in</span> <span class="string">/opt</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">path=/opt/sshkeys</span> <span class="string">state=directory</span> <span class="string">owner=root</span> <span class="string">group=root</span> <span class="string">mode=0700</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">SSH</span> <span class="string">keys</span> <span class="string">over</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=keys/&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;.pub</span> <span class="string">dest=/opt/sshkeys/&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;.pub</span> <span class="string">owner=root</span> <span class="string">group=root</span> <span class="string">mode=0600</span></span><br><span class="line">      <span class="attr">with_items:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">dan</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">kate</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">mal</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Make</span> <span class="string">the</span> <span class="string">root</span> <span class="string">users</span> <span class="string">SSH</span> <span class="string">config</span> <span class="string">directory</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">path=/root/.ssh</span> <span class="string">state=directory</span> <span class="string">owner=root</span> <span class="string">group=root</span> <span class="string">mode=0700</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">#将/opt/sshkeys目录里所有的文件合并到/root/.ssh/authorized_keys一个文件中</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">the</span> <span class="string">authorized_keys</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">assemble:</span> <span class="string">src=/opt/sshkeys/</span> <span class="string">dest=/root/.ssh/authorized_keys</span> <span class="string">owner=root</span> <span class="string">group=root</span> <span class="string">mode=0700</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06. Ansible Playbook基本使用</title>
      <link href="/2020/05/20/06.%20Ansible%20Playbook%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/20/06.%20Ansible%20Playbook%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="6-Ansible-Playbook基本使用"><a href="#6-Ansible-Playbook基本使用" class="headerlink" title="6. Ansible Playbook基本使用"></a>6. Ansible Playbook基本使用</h1><p>[toc]</p><h2 id="Ansible-Playbook简介"><a href="#Ansible-Playbook简介" class="headerlink" title="Ansible Playbook简介"></a>Ansible Playbook简介</h2><p>ansbile-playbook是一系列ansible命令的集合，利用yaml 语言编写。playbook命令根据自上而下的顺序依次执行。同时，playbook开创了很多特性,它可以允许你传输某个命令的状态到后面的指令,如你可以从一台机器的文件中抓取内容并附为变量,然后在另一台机器中使用,这使得你可以实现一些复杂的部署机制,这是ansible命令无法实现的。 </p><p>playbook通过ansible-playbook命令使用,它的参数和ansible命令类似,如参数-k(–ask-pass) 和 -K (–ask-sudo) 来询问ssh密码和sudo密码,-u指定用户,这些指令也可以通过规定的单元写在playbook 。<br>ansible-playbook的简单使用方法: ansible-playbook example-play.yml 。</p><h2 id="Playbook基本语法"><a href="#Playbook基本语法" class="headerlink" title="Playbook基本语法"></a>Playbook基本语法</h2><p>下面是一个简单的ansible-playbook示例，可以了解其构成:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat user.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="string">user:"test"</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span>  <span class="string">user</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">name="&#123;&#123;</span> <span class="string">user</span> <span class="string">&#125;&#125;"</span></span><br></pre></td></tr></table></figure><p>配置项说明：</p><ul><li><code>name</code>：对该playbook实现的功能做一个概述，后面执行过程中，会打印 name变量的值</li><li><code>hosts</code>：指定对哪些被管理机进行操作；</li><li><code>remote_user</code>：指定在远程被管理机上执行操作时使用什么用户，如不指定，则使用ansible.cfg中配置的remote_user</li><li><code>gather_facts</code>：指定在执行任务之前，是否先执行setup模块获取主机相关信息，如未用到，可不指定</li><li><code>vars</code>：定义后续任务中会使用到的变量，如未用到，可不指定</li><li><code>tasks</code>：定义具体需要执行的任务<ul><li>name：对任务的描述，在执行过程中会打印出来。</li><li>user：指定调用user模块；<ul><li>name：user模块里的一个参数，用于指定创建的用户名称</li></ul></li></ul></li></ul><p>同样，如果想实现把这个新增的用户删除，只需将该playbook文件的最后一行替换为如下行再执行相应的playbook即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user: name&#x3D;&quot;&#123;&#123; user &#125;&#125;&quot; state&#x3D;absent remove&#x3D;yes</span><br></pre></td></tr></table></figure><h2 id="Playbook简单示例"><a href="#Playbook简单示例" class="headerlink" title="Playbook简单示例"></a>Playbook简单示例</h2><p>下面通过playbook管理一个httpd服务器来简单了解下playbook的应用：</p><ol><li>创建playbook<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat manage_apache.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">play</span> <span class="string">to</span> <span class="string">setup</span> <span class="string">web</span> <span class="string">server</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">latest</span> <span class="string">httpd</span> <span class="string">version</span> <span class="string">installed</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">correct</span> <span class="string">index.html</span> <span class="string">is</span> <span class="string">present</span></span><br><span class="line">      <span class="attr">copy:</span> </span><br><span class="line">        <span class="attr">src:</span> <span class="string">files/index.html</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/var/www/html/index.html</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">httpd</span> <span class="string">service</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>执行playbook<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook  manage_apache.yml </span><br><span class="line"></span><br><span class="line">PLAY [play to setup web server] *********************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [latest httpd version installed] ***************************************************************************************************************************************</span><br><span class="line">changed: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [correct index.html is present] ****************************************************************************************************************************************</span><br><span class="line">changed: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [start httpd service] **************************************************************************************************************************************************</span><br><span class="line">changed: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;4    changed&#x3D;2    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure></li></ol><h2 id="ansible-playbook常用选项"><a href="#ansible-playbook常用选项" class="headerlink" title="ansible-playbook常用选项"></a>ansible-playbook常用选项</h2><h3 id="1-打印详细信息"><a href="#1-打印详细信息" class="headerlink" title="1. 打印详细信息"></a>1. 打印详细信息</h3><ul><li>-v：打印任务运行结果</li><li>-vv：打印任务运行结果以及任务的配置信息</li><li>-vvv：包含了远程连接的一些信息</li><li>-vvvv：Adds extra verbosity options to the connection plug-ins,including the users being used in the managed hosts to execute scripts, and what scripts have been executed<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook  manage_apache.yml  -vv</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-校验playbook语法"><a href="#2-校验playbook语法" class="headerlink" title="2. 校验playbook语法"></a>2. 校验playbook语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook --syntax-check  manage_apache.yml   </span><br><span class="line"></span><br><span class="line">playbook: manage_apache.yml</span><br></pre></td></tr></table></figure><h3 id="3-测试运行playbook"><a href="#3-测试运行playbook" class="headerlink" title="3. 测试运行playbook"></a>3. 测试运行playbook</h3><p>通过-C选项可以测试playbook的执行情况，但不会真的执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook -C  manage_apache.yml  </span><br><span class="line"></span><br><span class="line">PLAY [play to setup web server] *********************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [latest httpd version installed] ***************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [correct index.html is present] ****************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [start httpd service] **************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;4    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><h2 id="Multiple-Plays"><a href="#Multiple-Plays" class="headerlink" title="Multiple Plays"></a>Multiple Plays</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># This is a simple playbook with two plays</span><br><span class="line"></span><br><span class="line">- name: first play</span><br><span class="line">  hosts: web.example.com</span><br><span class="line">  tasks:</span><br><span class="line">    - name: first task</span><br><span class="line">      yum:</span><br><span class="line">        name: httpd</span><br><span class="line">        status: present</span><br><span class="line">    - name: second task</span><br><span class="line">      service:</span><br><span class="line">        name: httpd</span><br><span class="line">        state: started</span><br><span class="line">    </span><br><span class="line">- name: second play</span><br><span class="line">  hosts: db.example.com</span><br><span class="line">  tasks:</span><br><span class="line">    - name: first task</span><br><span class="line">      yum:</span><br><span class="line">        name: mariadb-server</span><br><span class="line">        status: present</span><br><span class="line">    - name: second task</span><br><span class="line">      service:</span><br><span class="line">        name: mariadb</span><br><span class="line">        state: started</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07. Ansible Playbook的结构及handler用法</title>
      <link href="/2020/05/20/07.%20Ansible%20Playbook%E7%9A%84%E7%BB%93%E6%9E%84%E5%8F%8Ahandler%E7%94%A8%E6%B3%95/"/>
      <url>/2020/05/20/07.%20Ansible%20Playbook%E7%9A%84%E7%BB%93%E6%9E%84%E5%8F%8Ahandler%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="7-Ansible-Playbook的结构及handler用法"><a href="#7-Ansible-Playbook的结构及handler用法" class="headerlink" title="7. Ansible Playbook的结构及handler用法"></a>7. Ansible Playbook的结构及handler用法</h1><p>[toc]</p><h2 id="playbook的结构说明"><a href="#playbook的结构说明" class="headerlink" title="playbook的结构说明"></a>playbook的结构说明</h2><p>playbook是由一个或多个”play”组成的列表。play的主要功能就是对一组主机应用play中定义好的task。从根本上来讲一个task就是对ansible一个module的调用。而将多个play按照一定的顺序组织到一个playbook中，我们称之为编排。</p><p>playbook主要有以下四部分构成:</p><ul><li>Target section：   用于定义将要执行playbook的远程主机组及远程主机组上的用户，还包括定义通过什么样的方式连接远程主机（默认ssh）</li><li>Variable section： 定义playbook运行时需要使用的变量</li><li>Task section：     定义将要在远程主机上执行的任务列表</li><li>Handler section：  定义task执行完成以后需要调用的任务</li></ul><h3 id="Target-section"><a href="#Target-section" class="headerlink" title="Target section"></a>Target section</h3><p>playbook中的每一个play的目的都是为了让某个或某些主机以某个指定的用户身份执行任务。</p><h4 id="Playbook中的远程用户"><a href="#Playbook中的远程用户" class="headerlink" title="Playbook中的远程用户"></a>Playbook中的远程用户</h4><p>playbook中的远程用户和ad-hoc中的使用没有区别，默认不定义，则直接使用ansible.cfg配置中的用户相关的配置。也可在playbook中定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- name: &#x2F;etc&#x2F;hosts is up to date</span><br><span class="line">  hosts: datacenter</span><br><span class="line">  remote_user: automation</span><br><span class="line">  become: yes</span><br><span class="line">  become_mothod: sudo</span><br><span class="line">  become_user: root</span><br><span class="line">  </span><br><span class="line">  tasks:</span><br><span class="line">    - name: server.example.com in &#x2F;etc&#x2F;hosts</span><br><span class="line">      lineinfile:</span><br><span class="line">        path: &#x2F;etc&#x2F;hosts</span><br><span class="line">        line: &#39;192.168.0.200 server.exmaple.com server&#39;</span><br><span class="line">        state: present</span><br></pre></td></tr></table></figure><h4 id="Playbook中的hosts"><a href="#Playbook中的hosts" class="headerlink" title="Playbook中的hosts"></a>Playbook中的hosts</h4><p>playbook中的hosts即inentory中的定义主机与主机组，在《Ansible Inventory》中我们讲到了如何选择主机与主机组，在这里也完全适用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: start mariadb</span><br><span class="line">  hosts: db,&amp;london</span><br><span class="line">  tasks:</span><br><span class="line">    - name: start mariadb</span><br><span class="line">      service:</span><br><span class="line">        name: mariadb</span><br><span class="line">        state: started</span><br></pre></td></tr></table></figure><h3 id="Task-section"><a href="#Task-section" class="headerlink" title="Task section"></a>Task section</h3><p>play的主体部分是任务列表。</p><p>任务列表中的各任务按次序逐个在hosts中指定的所有主机上执行，在所有主机上完成第一个任务后再开始第二个。在自上而下运行某playbook时，如果中途发生错误，则整个playbook会停止执行，由于playbook的幂等性，playbook可以被反复执行，所以即使发生了错误，在修复错误后，再执行一次即可。</p><p>定义task可以使用<code>action: module options</code>或<code>module: options</code>的格式，推荐使用后者以实现向后兼容。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">make</span> <span class="string">sure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">running</span></span><br><span class="line">    <span class="attr">service:</span> </span><br><span class="line">      <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">      </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">disable</span> <span class="string">selinux</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/sbin/setenforce</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>如果命令或脚本的退出码不为零可以使用如下方式替代：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span> <span class="string">this</span> <span class="string">command</span> <span class="string">and</span> <span class="string">ignore</span> <span class="string">the</span> <span class="string">result</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">/usr/bin/somecommand</span> <span class="string">||</span> <span class="string">/bin/true</span></span><br></pre></td></tr></table></figure><p>可以使用ignore_errors来忽略错误信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span> <span class="string">this</span> <span class="string">command</span> <span class="string">and</span> <span class="string">ignore</span> <span class="string">the</span> <span class="string">result</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">/usr/bin/somecommand</span></span><br><span class="line">    <span class="attr">ignore_errors:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="Handler-section"><a href="#Handler-section" class="headerlink" title="Handler section"></a>Handler section</h3><ul><li><p>在Ansible Playbook中，handler事实上也是个task，只不过这个task默认并不执行，只有在被触发时才执行。</p></li><li><p>handler通过notify来监视某个或者某几个task，一旦task执行结果发生变化，则触发handler，执行相应操作。</p></li><li><p>handler会在所有的play都执行完毕之后才会执行，这样可以避免当handler监视的多个task执行结果都发生了变化之后而导致handler的重复执行（handler只需要在最后执行一次即可）。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">template</span> <span class="string">configuration</span> <span class="string">file</span></span><br><span class="line">    <span class="attr">template:</span> </span><br><span class="line">      <span class="attr">src:</span> <span class="string">template.j2</span> </span><br><span class="line">      <span class="attr">dest:</span> <span class="string">/etc/foo.conf</span></span><br><span class="line">    <span class="attr">notify:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">restart</span> <span class="string">memcached</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">memcached</span></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">memcached</span></span><br><span class="line">      <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">apache</span></span><br><span class="line">    <span class="string">service</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line"><span class="attr">handlers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">memcached</span></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">memcached</span></span><br><span class="line">      <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line">    <span class="attr">service:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">state:</span> <span class="string">restarted</span></span><br></pre></td></tr></table></figure><blockquote><p>在notify中定义内容一定要和tasks中定义的 - name 内容一样，这样才能达到触发的效果，否则会不生效。</p></blockquote><p>默认情况下，在一个play中，只要有task执行失败，则play终止，即使是与handler关联的task在失败的task之前运行成功了，handler也不会被执行。如果希望在这种情况下handler仍然能够执行，则需要使用如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  force_handlers: yes</span><br><span class="line">  tasks:</span><br><span class="line">    - name: a task which always notifies its handler</span><br><span class="line">      command: &#x2F;bin&#x2F;true</span><br><span class="line">      notify: restart the database</span><br><span class="line">    - name: a task which fails because the package doesn&#39;t exist</span><br><span class="line">      yum:</span><br><span class="line">        name: notapkg</span><br><span class="line">        state: latest</span><br><span class="line">      </span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart the database</span><br><span class="line">      service:</span><br><span class="line">        name: mariadb</span><br><span class="line">        state: restarted</span><br></pre></td></tr></table></figure><blockquote><p>如果与handler关联的task还未执行，在其前的task已经失败，整个play终止，则handler未被触发，也不会执行。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08. Ansible变量之自定义变量</title>
      <link href="/2020/05/20/08.%20Ansible%E5%8F%98%E9%87%8F%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/"/>
      <url>/2020/05/20/08.%20Ansible%E5%8F%98%E9%87%8F%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="8-Ansible变量之自定义变量"><a href="#8-Ansible变量之自定义变量" class="headerlink" title="8. Ansible变量之自定义变量"></a>8. Ansible变量之自定义变量</h1><p>[toc]</p><h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p>ansible支持变量，用于存储会在整个项目中重复使用到的一些值。以简化项目的创建与维护，降低出错的机率。</p><p>变量的定义：</p><ul><li>变量名应该由字母、数字下划数组成</li><li>变量名必须以字母开头</li><li>ansible内置关键字不能作为变量名</li></ul><h2 id="1-在Inventory中定义变量"><a href="#1-在Inventory中定义变量" class="headerlink" title="1. 在Inventory中定义变量"></a>1. 在Inventory中定义变量</h2><h3 id="1-1-定义主机变量"><a href="#1-1-定义主机变量" class="headerlink" title="1.1. 定义主机变量"></a>1.1. 定义主机变量</h3><h4 id="1-1-1-内置主机变量"><a href="#1-1-1-内置主机变量" class="headerlink" title="1.1.1. 内置主机变量"></a>1.1.1. 内置主机变量</h4><p>所谓内置变量其实就是ansible.cfg配置文件中的选项，在其前加上<code>ansible_</code>即成为内置变量。当然内置变拥有比ansible.cfg中选项更高的优先级，而且针对不同的主机，可以定义不同的值。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 一般连接</span></span><br><span class="line"></span><br><span class="line">ansible_host     <span class="comment">#用于指定被管理的主机的真实IP</span></span><br><span class="line">ansible_port     <span class="comment">#用于指定连接到被管理主机的ssh端口号，默认是22</span></span><br><span class="line">ansible_user     <span class="comment">#ssh连接时默认使用的用户名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特定ssh连接</span></span><br><span class="line">ansible_connection     <span class="comment">#SSH连接的类型：local, ssh, paramiko，在ansible 1.2 之前默认是paramiko，后来智能选择，优先使用基于ControlPersist的ssh（如果支持的话）</span></span><br><span class="line"></span><br><span class="line">ansible_ssh_pass     <span class="comment">#ssh连接时的密码</span></span><br><span class="line">ansible_ssh_private_key_file  <span class="comment">#秘钥文件路径，如果不想使用ssh-agent管理秘钥文件时可以使用此选项</span></span><br><span class="line"></span><br><span class="line">ansible_ssh_executable  <span class="comment">#如果ssh指令不在默认路径当中，可以使用该变量来定义其路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特权升级</span></span><br><span class="line">ansible_become  <span class="comment">#相当于ansible_sudo或者ansible_su，允许强制特权升级</span></span><br><span class="line">ansible_become_user <span class="comment">#通过特权升级到的用户，相当于ansible_sudo_user或者ansible_su_user</span></span><br><span class="line">ansible_become_pass  <span class="comment"># 提升特权时，如果需要密码的话，可以通过该变量指定，相当于ansible_sudo_pass或者ansible_su_pass</span></span><br><span class="line"></span><br><span class="line">ansible_sudo_exec     <span class="comment">#如果sudo命令不在默认路径，需要指定sudo命令路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程主机环境参数</span></span><br><span class="line"></span><br><span class="line">ansible_shell_executable <span class="comment"># 设置目标机上使用的shell，默认为/bin/sh</span></span><br><span class="line"></span><br><span class="line">ansible_python_interpreter     <span class="comment">#用来指定python解释器的路径，默认为/usr/bin/python 同样可以指定ruby 、perl 的路径</span></span><br><span class="line">ansible_*_interpreter     <span class="comment">#其他解释器路径，用法与ansible_python_interpreter类似，这里"*"可以是ruby或才perl等其他语言</span></span><br></pre></td></tr></table></figure><p>下面是一个简单的示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定了三台主机，三台主机的用密码分别是P@ssw0rd、123456、45789，指定的ssh连接的用户名分别为root、breeze、bernie，ssh 端口分别为22、22、3055 ，这样在ansible命令执行的时候就不用再指令用户和密码等了</span></span><br><span class="line"></span><br><span class="line">[<span class="built_in">test</span>]</span><br><span class="line">192.168.1.1 ansible_ssh_user=root ansible_ssh_pass=<span class="string">'P@ssw0rd'</span></span><br><span class="line">192.168.1.2 ansible_ssh_user=breeze ansible_ssh_pass=<span class="string">'123456'</span></span><br><span class="line">192.168.1.3 ansible_ssh_user=bernie ansible_ssh_port=3055 ansible_ssh_pass=<span class="string">'456789'</span></span><br></pre></td></tr></table></figure><h3 id="1-2-定义主机组变量"><a href="#1-2-定义主机组变量" class="headerlink" title="1.2. 定义主机组变量"></a>1.2. 定义主机组变量</h3><p>变量也可以通过组名，应用到组内的所有成员：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test组中包含两台主机，通过对test组指定vars变更，相应的host1和host2相当于相应的指定了ntp_server和proxy变量参数值</span></span><br><span class="line"></span><br><span class="line">[<span class="built_in">test</span>]</span><br><span class="line">host1</span><br><span class="line">host2</span><br><span class="line">[<span class="built_in">test</span>:vars]</span><br><span class="line">ntp_server=192.168.1.10</span><br><span class="line">proxy=192.168.1.20</span><br></pre></td></tr></table></figure><p>主机组变量示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 下面是一个示例，指定了一个武汉组有web1、web2；随州组有web3、web4主机；又指定了一个湖北组，同时包含武汉和随州；同时为该组内的所有主机指定了2个vars变量。设定了一个组中国组，包含湖北、湖南。</span><br><span class="line"></span><br><span class="line">[wuhan]</span><br><span class="line">web1</span><br><span class="line">web2</span><br><span class="line"></span><br><span class="line">[suizhou]</span><br><span class="line">web4</span><br><span class="line">web3</span><br><span class="line"></span><br><span class="line">[hubei:children]</span><br><span class="line">wuhan</span><br><span class="line">suizhou</span><br><span class="line"></span><br><span class="line">[hubei:vars]</span><br><span class="line">ntp_server&#x3D;192.168.1.10</span><br><span class="line">zabbix_server&#x3D;192.168.1.10</span><br></pre></td></tr></table></figure><h2 id="2-在Playbook中定义变量"><a href="#2-在Playbook中定义变量" class="headerlink" title="2. 在Playbook中定义变量"></a>2. 在Playbook中定义变量</h2><h3 id="2-1-变量的定义方式"><a href="#2-1-变量的定义方式" class="headerlink" title="2.1. 变量的定义方式"></a>2.1. 变量的定义方式</h3><h4 id="2-1-1-通过vars关键字定义"><a href="#2-1-1-通过vars关键字定义" class="headerlink" title="2.1.1. 通过vars关键字定义"></a>2.1.1. 通过vars关键字定义</h4><p>下面是一个简单示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">name：</span> <span class="string">use</span> <span class="string">vars</span> <span class="string">define</span> <span class="string">invrionmemnt</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">ansible</span></span><br><span class="line">  <span class="attr">vars:</span> </span><br><span class="line">    <span class="attr">http_port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">server_name:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">conf_file:</span> <span class="string">/etc/nginx/conf/default.conf</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-通过vars-files关键字引入变量文件"><a href="#2-1-2-通过vars-files关键字引入变量文件" class="headerlink" title="2.1.2. 通过vars_files关键字引入变量文件"></a>2.1.2. 通过vars_files关键字引入变量文件</h4><p>下面是一个简单示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">favcolor:</span> <span class="string">blue</span></span><br><span class="line">  <span class="attr">vars_files:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">vars/external_vars.yml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">vars/user_vars.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vars/user_vars.yml示例：</span></span><br><span class="line"></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="attr">bjones:</span></span><br><span class="line">    <span class="attr">first_name:</span> <span class="string">Bob</span></span><br><span class="line">    <span class="attr">last_name:</span> <span class="string">Jones</span></span><br><span class="line">    <span class="attr">home_dirs:</span> <span class="string">/users/bjones</span></span><br><span class="line">  <span class="attr">acook:</span></span><br><span class="line">    <span class="attr">first_name:</span> <span class="string">Anne</span></span><br><span class="line">    <span class="attr">last_name:</span> <span class="string">Cook</span></span><br><span class="line">    <span class="attr">home_dirs:</span> <span class="string">/users/acook</span></span><br></pre></td></tr></table></figure><blockquote><p>变量的定义格式是成键值对出现的，键值对之间可以嵌套，最终形成一个大字典</p></blockquote><h4 id="2-1-3-在playbook中通过host-vars和group-vars目录定义变量"><a href="#2-1-3-在playbook中通过host-vars和group-vars目录定义变量" class="headerlink" title="2.1.3. 在playbook中通过host_vars和group_vars目录定义变量"></a>2.1.3. 在playbook中通过host_vars和group_vars目录定义变量</h4><p>下面这是一个项目的playbook目录结构。这个项目中，包含一个ansible.cfg文件，一个inventory文件，一个playbook.yml文件，一个<code>group_vars</code>目录和一个<code>host_vars</code>目录:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># tree &#x2F;etc&#x2F;ansible&#x2F;playbooks&#x2F;project</span><br><span class="line">&#x2F;etc&#x2F;ansible&#x2F;playbooks&#x2F;project</span><br><span class="line">├── ansible.cfg</span><br><span class="line">├── group_vars</span><br><span class="line">│   ├── datacenter1</span><br><span class="line">│   ├── datacenter2</span><br><span class="line">│   └── datacenters</span><br><span class="line">├── host_vars</span><br><span class="line">│   ├── demo1.example.com</span><br><span class="line">│   ├── demo2.example.com</span><br><span class="line">│   ├── demo3.example.com</span><br><span class="line">│   └── demo4.example.com</span><br><span class="line">├── inventory</span><br><span class="line">└── playbook.yml</span><br></pre></td></tr></table></figure><p>其中inventory文件的示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[datacenter1]</span><br><span class="line">demo1.example.com</span><br><span class="line">demo2.example.com</span><br><span class="line"></span><br><span class="line">[datacenter2]</span><br><span class="line">demo3.example.com</span><br><span class="line">demo4.example.com</span><br><span class="line"></span><br><span class="line">[datacenters:children]</span><br><span class="line">datacenter1</span><br><span class="line">datacenter2</span><br></pre></td></tr></table></figure><p>可以看到group_vars目录中，定义了三个文件，分别以inventory文件中的三个主机组命名，所以这三个文件中定义的就分别是这三个组可以使用的变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># cat datacenter1</span><br><span class="line">package: httpd</span><br><span class="line"></span><br><span class="line"># cat datacenter2 </span><br><span class="line">package: apache</span><br><span class="line"></span><br><span class="line"># cat datacenters </span><br><span class="line">package: httpd</span><br></pre></td></tr></table></figure><p>在host_vars目录中，定义了三个文件，分别以inventory文件中的四个主机命名，所以这四个文件中定义的就分别是这四个主机可以使用的变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># cat demo1.example.com </span><br><span class="line">package: httpd</span><br><span class="line"></span><br><span class="line"># cat demo2.example.com </span><br><span class="line">package: apache</span><br><span class="line"></span><br><span class="line"># cat demo3.example.com </span><br><span class="line">package: mariadb-server</span><br><span class="line"></span><br><span class="line"># cat demo4.example.com </span><br><span class="line">package: mysql-server</span><br></pre></td></tr></table></figure><blockquote><p>需要说明的是，如果主机组定义的变量与主机冲突，主机变量优先级最高</p></blockquote><h4 id="2-1-4-注册变量"><a href="#2-1-4-注册变量" class="headerlink" title="2.1.4. 注册变量"></a>2.1.4. 注册变量</h4><p>在有些时候，可能需要将某一条任务执行的结果保存下来，以便在接下的任务中调用或者做些判断。可以通过register关键字来实现将某一任务结果保存为一个变量。</p><p>下面是个简单的例子，将whoami命令执行的结果注册到变量login：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- name: register variables</span><br><span class="line">  hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">    - name: capture output of whoami command</span><br><span class="line">      command: whoami</span><br><span class="line">      register: login</span><br></pre></td></tr></table></figure><p>注册变量的应用场景：</p><ul><li>在一台远端的服务器获取一个目录下的一列表的文件,然后下载这些文件</li><li>在handler执行之前,发现前面一个task发生了changed,然后执行一个指定的task</li><li>获取远端服务器的ssh key的内容,构建出known_hosts文件</li></ul><h4 id="2-1-5-通过命令行设置变量"><a href="#2-1-5-通过命令行设置变量" class="headerlink" title="2.1.5. 通过命令行设置变量"></a>2.1.5. 通过命令行设置变量</h4><p>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: &#39;&#123;&#123; hosts &#125;&#125;&#39;</span><br><span class="line">  remote_user: &#39;&#123;&#123; user &#125;&#125;&#39;</span><br><span class="line">  tasks:</span><br><span class="line">     - ...</span><br><span class="line">     </span><br><span class="line">ansible-playbook release.yml --extra-vars &quot;hosts&#x3D;vipers user&#x3D;starbuck&quot;</span><br></pre></td></tr></table></figure><p>也可以写成类似如下方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--extra-vars &#39;&#123;&quot;hosts&quot;:&quot;vipers&quot;,&quot;user&quot;:&quot;starbuck&quot;&#125;&#39;</span><br></pre></td></tr></table></figure><h3 id="2-2-使用与调试变量"><a href="#2-2-使用与调试变量" class="headerlink" title="2.2 使用与调试变量"></a>2.2 使用与调试变量</h3><p>我们通过以上5种方式在playbook中定义了各种变量。说到底，最终的目的，还是为了方便使用。下面我们就看一看具体如何使用这些变量。</p><h4 id="2-2-1-变量的引用"><a href="#2-2-1-变量的引用" class="headerlink" title="2.2.1. 变量的引用"></a>2.2.1. 变量的引用</h4><p>下面是一个变量的基本使用示例，前面的变量定义部分，直接使用的2.1.1中的变量示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">use</span> <span class="string">vars</span> <span class="string">define</span> <span class="string">variables</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">vars:</span> </span><br><span class="line">    <span class="attr">http_port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">server_name:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">conf_file:</span> <span class="string">/etc/nginx/conf/default.conf</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">print</span> <span class="string">variables</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">"<span class="template-variable">&#123;&#123; http_port &#125;&#125;</span> <span class="template-variable">&#123;&#123; server_name &#125;&#125;</span> <span class="template-variable">&#123;&#123; conf_file &#125;&#125;</span>"</span>  <span class="string">&gt;</span> <span class="string">/tmp/text.txt</span></span><br></pre></td></tr></table></figure><p>在2.1.2中，我们通过<code>vars_files</code>引用了一个文件<code>user_vars.yml</code>，在该文件中定义了一个稍微复杂的字典变量，现在我想要获取<code>users</code>中<code>bjones</code>用户的<code>first_name</code>和<code>acook</code>用户的<code>home_dirs</code>，可以使用如下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; users.bjones.first_name &#125;&#125;</span><br><span class="line">&#123;&#123; users.acook.home_dirs &#125;&#125;</span><br></pre></td></tr></table></figure><p>或者如下写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; users[&#39;bjones&#39;][&#39;first_name&#39;] &#125;&#125;</span><br><span class="line">&#123;&#123; users[&#39;acook&#39;][&#39;home_dirs&#39;] &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-变量的调试输出"><a href="#2-2-2-变量的调试输出" class="headerlink" title="2.2.2. 变量的调试输出"></a>2.2.2. 变量的调试输出</h4><p>有些时候，我们在引用变量的时候，可能需要知道变量中包含哪些信息，以方便在执行过程中，对变量做些处理。ansible提供一个debug模块用于调试变量输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: register variables</span><br><span class="line">  hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">    - name: capture output of whoami command</span><br><span class="line">      command: whoami</span><br><span class="line">      register: login</span><br><span class="line">    - debug: var&#x3D;login</span><br></pre></td></tr></table></figure><p>执行后输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook register.yml </span><br><span class="line"></span><br><span class="line">PLAY [register variables] ***************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [capture output of whoami command] *************************************************************************************************************************************</span><br><span class="line">changed: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [debug] ****************************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;login&quot;: &#123;</span><br><span class="line">        &quot;changed&quot;: true,</span><br><span class="line">        &quot;cmd&quot;: [</span><br><span class="line">            &quot;whoami&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;delta&quot;: &quot;0:00:00.004279&quot;,</span><br><span class="line">        &quot;end&quot;: &quot;2019-05-24 00:41:43.710398&quot;,</span><br><span class="line">        &quot;failed&quot;: false,</span><br><span class="line">        &quot;rc&quot;: 0,</span><br><span class="line">        &quot;start&quot;: &quot;2019-05-24 00:41:43.706119&quot;,</span><br><span class="line">        &quot;stderr&quot;: &quot;&quot;,</span><br><span class="line">        &quot;stderr_lines&quot;: [],</span><br><span class="line">        &quot;stdout&quot;: &quot;root&quot;,</span><br><span class="line">        &quot;stdout_lines&quot;: [</span><br><span class="line">            &quot;root&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;3    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><p>关于输出的debug部分重点说明如下：</p><ul><li>login： 变量名，其值为一个字典</li><li>changed：ansible基于此来判断是否发生了状态改变</li><li>cmd：被调用的命令</li><li>failed：是否运行失败</li><li>rc：返回值，0代表正常，非0代表异常</li><li>stderr：如果出现异常，会在这里显示错误输出</li><li>stderr_lines：按行分割的错误输出</li><li>stdout：如果指令正常运行，则在这里输出返回结果</li><li>stdout：按行分割的返回结果</li></ul><blockquote><p>需要说明的是，通过register注册的变量的结果并不是一成不变的，在不确定返回值的情况下，尽量调试看看输出结果。</p></blockquote><p>关于debug的更多用法说明：</p><p>调试模块，用于在调试中输出信息<br>常用参数：</p><ul><li>msg：调试输出的消息</li><li>var：将某个变量传递给debug模块，debug会直接将其打印输出</li><li>verbosity：debug的级别</li></ul><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example that prints the loopback address and gateway for each host</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">msg="System</span> <span class="string">&#123;&#123;</span> <span class="string">inventory_hostname</span> <span class="string">&#125;&#125;</span> <span class="string">has</span> <span class="string">uuid</span> <span class="string">&#123;&#123;</span> <span class="string">ansible_product_uuid</span> <span class="string">&#125;&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">msg="System</span> <span class="string">&#123;&#123;</span> <span class="string">inventory_hostname</span> <span class="string">&#125;&#125;</span> <span class="string">has</span> <span class="string">gateway</span> <span class="string">&#123;&#123;</span> <span class="string">ansible_default_ipv4.gateway</span> <span class="string">&#125;&#125;"</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">ansible_default_ipv4.gateway</span> <span class="string">is</span> <span class="string">defined</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">/usr/bin/uptime</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">result</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">var=result</span> <span class="string">verbosity=2</span>    <span class="comment">#直接将上一条指令的结果作为变量传递给var，由debug打印出result的值</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Display</span> <span class="string">all</span> <span class="string">variables/facts</span> <span class="string">known</span> <span class="string">for</span> <span class="string">a</span> <span class="string">host</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="string">var=hostvars[inventory_hostname]</span> <span class="string">verbosity=4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09. Ansible变量之fact</title>
      <link href="/2020/05/20/09.%20Ansible%E5%8F%98%E9%87%8F%E4%B9%8Bfact/"/>
      <url>/2020/05/20/09.%20Ansible%E5%8F%98%E9%87%8F%E4%B9%8Bfact/</url>
      
        <content type="html"><![CDATA[<h1 id="9-Ansible变量之fact"><a href="#9-Ansible变量之fact" class="headerlink" title="9. Ansible变量之fact"></a>9. Ansible变量之fact</h1><p>[toc]</p><h2 id="fact简介"><a href="#fact简介" class="headerlink" title="fact简介"></a>fact简介</h2><p>ansible有一个模块叫setup，用于获取远程主机的相关信息，并可以将这些信息作为变量在playbook里进行调用。而setup模块获取这些信息的方法就是依赖于fact。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># ansible test -m setup</span><br><span class="line">10.1.61.187 | SUCCESS &#x3D;&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_all_ipv4_addresses&quot;: [</span><br><span class="line">            &quot;10.1.61.187&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ansible_all_ipv6_addresses&quot;: [</span><br><span class="line">            &quot;fe80::f816:3eff:fe4f:6611&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ansible_apparmor&quot;: &#123;</span><br><span class="line">            &quot;status&quot;: &quot;disabled&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ansible_architecture&quot;: &quot;x86_64&quot;,</span><br><span class="line">        &quot;ansible_bios_date&quot;: &quot;04&#x2F;01&#x2F;2014&quot;,</span><br><span class="line">        &quot;ansible_bios_version&quot;: &quot;Ubuntu-1.8.2-1ubuntu1~cloud0&quot;,</span><br><span class="line">        </span><br><span class="line">        ...output omitted...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setup获取的这些信息，都是可用于该主机的变量。</p><p>setup模块其他用法示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看主机内存信息</span></span><br><span class="line">ansible 10.212.52.252 -m setup -a <span class="string">'filter=ansible_*_mb'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看地接口为eth0-2的网卡信息</span></span><br><span class="line">ansible 10.212.52.252 -m setup -a <span class="string">'filter=ansible_eth[0-2]'</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有主机的信息输入到/tmp/facts目录下，每台主机的信息输入到主机名文件中（/etc/ansible/hosts里的主机名）</span></span><br><span class="line">ansible all -m setup --tree /tmp/facts</span><br></pre></td></tr></table></figure><h2 id="自定义fact"><a href="#自定义fact" class="headerlink" title="自定义fact"></a>自定义fact</h2><h3 id="1-手动设置fact"><a href="#1-手动设置fact" class="headerlink" title="1. 手动设置fact"></a>1. 手动设置fact</h3><p>ansible除了能获取到预定义的fact的内容,还支持手动为某个主机定制fact。称之为本地fact。本地fact默认存放于被控端的<code>/etc/ansible/facts.d</code>目录下，如果文件为<code>ini</code>格式或者<code>json</code>格式，ansible会自动识别。以这种形式加载的fact是key为<code>ansible_local</code>的特殊变量。</p><p>下面是一个简单的示例，在ansibler主控端定义一个<code>ini</code>格式的custom.fact文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[general]</span><br><span class="line">package &#x3D; httpd</span><br><span class="line">service &#x3D; httpd</span><br><span class="line">state &#x3D; started</span><br></pre></td></tr></table></figure><p>然后我们编写一个playbook文件名为setup_facts.yml内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: Install remote facts</span><br><span class="line">  hosts: test</span><br><span class="line">  vars: </span><br><span class="line">    remote_dir: &#x2F;etc&#x2F;ansible&#x2F;facts.d</span><br><span class="line">    facts_file: custom.fact</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Create the remote directory</span><br><span class="line">      file:</span><br><span class="line">        state: directory</span><br><span class="line">        recurse: yes</span><br><span class="line">        path: &quot;&#123;&#123; remote_dir &#125;&#125;&quot;</span><br><span class="line">    - name: Install the new facts</span><br><span class="line">      copy:</span><br><span class="line">        src: &quot;&#123;&#123; facts_file &#125;&#125;&quot;</span><br><span class="line">        dest: &quot;&#123;&#123; remote_dir &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>执行该playbook，完成facts的推送：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook setup_facts.yml</span><br></pre></td></tr></table></figure><p>此时，我们可以在被控端看到新的facts已经生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># ansible test -m setup        </span><br><span class="line">10.1.61.187 | SUCCESS &#x3D;&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">    </span><br><span class="line">        ...output omitted...</span><br><span class="line">        </span><br><span class="line">        &quot;ansible_local&quot;: &#123;</span><br><span class="line">            &quot;custom&quot;: &#123;</span><br><span class="line">                &quot;general&quot;: &#123;</span><br><span class="line">                    &quot;package&quot;: &quot;httpd&quot;,</span><br><span class="line">                    &quot;service&quot;: &quot;httpd&quot;,</span><br><span class="line">                    &quot;state&quot;: &quot;started&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        ...output omitted...</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以写一个简单的playbook来使用这些facts：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- name: Install Apache and starts the service</span><br><span class="line">  hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Install the required package</span><br><span class="line">      yum: </span><br><span class="line">        name: &quot;&#123;&#123; ansible_facts.ansible_local.custom.general.package &#125;&#125;&quot;</span><br><span class="line">        state: latest</span><br><span class="line">    - name: Start the service</span><br><span class="line">      service: </span><br><span class="line">        name: &quot;&#123;&#123; ansible_facts.ansible_local.custom.general.service &#125;&#125;&quot;</span><br><span class="line">        state: &quot;&#123;&#123; ansible_facts.ansible_local.custom.general.state &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="2-使用set-fact模块定义新的变量"><a href="#2-使用set-fact模块定义新的变量" class="headerlink" title="2. 使用set_fact模块定义新的变量"></a>2. 使用set_fact模块定义新的变量</h3><p><code>set_fact</code>模块可以自定义facts，这些自定义的facts可以通过template或者变量的方式在playbook中使用。如果你想要获取一个进程使用的内存的百分比，则必须通过set_fact来进行计算之后得出其值，并将其值在playbook中引用。  </p><p>下面是一个set_fact模块的应用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: set_fact example</span><br><span class="line">  hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Calculate InnoDB buffer pool size</span><br><span class="line">      set_fact: innodb_buffer_pool_size_mb&#x3D;&quot;&#123;&#123; ansible_memtotal_mb &#x2F; 2 |int &#125;&#125;&quot;</span><br><span class="line">      </span><br><span class="line">    - debug: var&#x3D;innodb_buffer_pool_size_mb</span><br></pre></td></tr></table></figure><p>执行playbook如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook set_fact_ex.yaml </span><br><span class="line"></span><br><span class="line">PLAY [set_fact example] *****************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [Calculate InnoDB buffer pool size] ************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [debug] ****************************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;innodb_buffer_pool_size_mb&quot;: &quot;3911.0&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;3    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><blockquote><p>这种设置方式只在当前playbook当中有效</p></blockquote><h2 id="手动采集fact"><a href="#手动采集fact" class="headerlink" title="手动采集fact"></a>手动采集fact</h2><p>通常情况下，我们在运行play的时候，ansible会先尝试ssh到被控端采集fact，如果此时，被控制端的ssh还没有完全启动，就会导致整个play执行失败。这个时候，我们可以先显式的关闭fact采集，然后在task中通过wait_for等待被控端ssh端口被正常监听，再在task中使用setup模块来手动采集fact：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- name: Deploy apps</span><br><span class="line">  hosts: webservers</span><br><span class="line">  gather_facts: False</span><br><span class="line">  tasks：</span><br><span class="line">    - name: wait for ssh to be running</span><br><span class="line">      local_action: wait_for port&#x3D;22 host&#x3D;&quot;&#123;&#123; inventory_hostname &#125;&#125;&quot; search_regex&#x3D;OpenSSH</span><br><span class="line">    - name: gather facts</span><br><span class="line">      setup:</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h2 id="启用fact缓存"><a href="#启用fact缓存" class="headerlink" title="启用fact缓存"></a>启用fact缓存</h2><p>如果在play中需要引入fact，则可以开启fact缓存。fact缓存目前支持三种存储方式，分别为JSON、memcached、redis。</p><h3 id="1-Json文件fact缓存后端"><a href="#1-Json文件fact缓存后端" class="headerlink" title="1. Json文件fact缓存后端"></a>1. Json文件fact缓存后端</h3><p>使用JSON文件作为fact缓存后端的时候，ansible将会把采集的fact写入到控制主机的文件中。</p><p>ansible.cfg配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">gathering &#x3D; smart</span><br><span class="line">#缓存时间，单位为秒</span><br><span class="line">fact_caching_timeout &#x3D; 86400    </span><br><span class="line">fact_caching &#x3D; jsonfile</span><br><span class="line">#指定ansible包含fact的json文件位置，如果目录不存在，会自动创建</span><br><span class="line">fact_caching_connection &#x3D; &#x2F;tmp&#x2F;ansible_fact_cache</span><br></pre></td></tr></table></figure><p>选项说明：</p><ul><li>gathering： 是否启用fact，有三个选项：<ul><li>smart：默认收集facts，但在facts已有的情况下就不收集，即使用facts缓存</li><li>implicit：默认收集facts，要禁止收集，必须显式的申明：gather_facts: false</li><li>explicit：默认不收集，要收集，必须显示的申明： gather_facts: true</li></ul></li><li>fact_cacheing_timeout：缓存时间，单位为s</li><li>fact_caching：缓存的方式，支持jsonfile、redis、memcached</li><li>fact_caching_connection：指定ansible缓存fact的连接方式，如果是jsonfile，则指定jsonfile的缓存路径</li></ul><h3 id="2-Redis-fact缓存后端"><a href="#2-Redis-fact缓存后端" class="headerlink" title="2. Redis fact缓存后端"></a>2. Redis fact缓存后端</h3><p>使用redis作为fact缓存后端，需要在控制主机上安装redis服务并保持运行。需要安装python操作redis的软件包。</p><p>ansible.cfg配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">gathering &#x3D; smart</span><br><span class="line">fact_caching_timeout &#x3D; 86400 </span><br><span class="line">fact_caching &#x3D; redis</span><br><span class="line">fact_caching_connection &#x3D; 127.0.0.1:6379:0</span><br></pre></td></tr></table></figure><h3 id="3-Memcached-fact缓存后端"><a href="#3-Memcached-fact缓存后端" class="headerlink" title="3. Memcached fact缓存后端"></a>3. Memcached fact缓存后端</h3><p>使用memcached作为fact缓存后端，需要在控制主机上安装Memcached服务并保持运行，需要安装python操作memcached的软件包。</p><p>ansible.cfg配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">gathering &#x3D; smart</span><br><span class="line">fact_caching_timeout &#x3D; 86400 </span><br><span class="line">fact_caching &#x3D; memcached</span><br><span class="line">fact_caching_connection &#x3D; 127.0.0.1:11211</span><br></pre></td></tr></table></figure><h2 id="关闭fact"><a href="#关闭fact" class="headerlink" title="关闭fact"></a>关闭fact</h2><p>如果不想从fact中获取变量，或者说整个playbook当中都没有使用到fact变量，可以通过如下方法关闭fact以提升执行效率：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br></pre></td></tr></table></figure><p>也可以在ansible.cfg中添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">gathering &#x3D; explicit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10. Ansible魔法变量及变量优先级</title>
      <link href="/2020/05/20/10.%20Ansible%E9%AD%94%E6%B3%95%E5%8F%98%E9%87%8F%E5%8F%8A%E5%8F%98%E9%87%8F%E4%BC%98%E5%85%88%E7%BA%A7/"/>
      <url>/2020/05/20/10.%20Ansible%E9%AD%94%E6%B3%95%E5%8F%98%E9%87%8F%E5%8F%8A%E5%8F%98%E9%87%8F%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="10-Ansible魔法变量及变量优先级"><a href="#10-Ansible魔法变量及变量优先级" class="headerlink" title="10. Ansible魔法变量及变量优先级"></a>10. Ansible魔法变量及变量优先级</h1><p>[toc]</p><h2 id="魔法变量"><a href="#魔法变量" class="headerlink" title="魔法变量"></a>魔法变量</h2><p>Ansible默认会提供一些内置的变量以实现一些特定的功能，我们称之为魔法变量。下面列举一些常用的魔法变量。</p><h3 id="1-hostvars"><a href="#1-hostvars" class="headerlink" title="1. hostvars"></a>1. hostvars</h3><p>获取某台指定的主机的相关变量。如果有一台web服务器的配置文件中需要指定db服务器的ip地址，我们假定这台db服务器的hostname为db.exmaple.com,ip地址绑定在eth0网卡上，我们可以通过如下方法在web服务器上调用db服务器的ip地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; hostvars[&#39;db.example.com&#39;].ansible_eth0.ipv4.address &#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是db.example.com不能使用ip地址来取代，只能使用主机名或别名。</p></blockquote><h3 id="2-inventory-hostname"><a href="#2-inventory-hostname" class="headerlink" title="2. inventory_hostname"></a>2. inventory_hostname</h3><p>inventory_hostname是Ansible所识别的当前正在运行task的主机的主机名。如果在inventory里定义过别名，那么这里就是那个别名，如果inventory包含如下一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server1 ansible_ssh_host&#x3D;192.168.1.1</span><br></pre></td></tr></table></figure><p>则<code>inventory_hostname</code>即为<code>server1</code><br>利用<code>hostvars</code>和<code>inventory_hostname</code>变量，可以输出与当前主机相关联的所有变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- debug: var&#x3D;hostvars[inventory_hostname]</span><br></pre></td></tr></table></figure><blockquote><p>与inventory_hostname相近的还有一个inventory_hostname_short，如果一台主机的inventory_hostname为server1.exmaple.com，则inventory_hostname_short的值为server1</p></blockquote><h3 id="3-group-names"><a href="#3-group-names" class="headerlink" title="3. group_names"></a>3. group_names</h3><p>group_names返回的是主机所属主机组，如果该主机在多个组中，则返回多个组，如果它不在组中，则返回ungrouped这个特殊组。</p><p>如下示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.100</span><br><span class="line">192.168.0.101</span><br><span class="line">1982.168.0.103</span><br><span class="line">[mdb]</span><br><span class="line">192.168.0.100</span><br><span class="line"></span><br><span class="line">[sdb]</span><br><span class="line">192.168.0.101</span><br><span class="line">192.168.0.102</span><br><span class="line"></span><br><span class="line">[db:children]</span><br><span class="line">mdb</span><br><span class="line">sdb</span><br></pre></td></tr></table></figure><p>这个时候，192.168.0.100的主机组就会返回mdb和db，同样,192.168.0.101的主机组会返回sdb和db，而192.168.0.103的主机组则会返回ungrouped</p><h3 id="4-groups"><a href="#4-groups" class="headerlink" title="4. groups"></a>4. groups</h3><p>groups是inventory中所有主机组的列表，可用于枚举主机组中的所有主机。</p><p>假如我们有一个inventory文件定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[web]</span><br><span class="line">server1</span><br><span class="line">server2</span><br></pre></td></tr></table></figure><p>在配置一台HAproxy的负载均衡器时，我们的配置文件肯定需要web主机组的所有服务器的IP，配置文件包含如下片段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">backend web-backend</span><br><span class="line">&#123;% for host in groups.web%&#125;</span><br><span class="line">    server &#123;&#123;host.inventory_hostname&#125;&#125; &#123;&#123; host.ansible_default_ipv4.address &#125;&#125;:80</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>最终生成的文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">backend web-backend</span><br><span class="line">    server server1 192.168.1.1:80</span><br><span class="line">    server server2 192.168.1.2:80</span><br></pre></td></tr></table></figure><p>再给一个例子，在所有的dbservers组的服务器上创建一个数据库用户kate：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- name: Create a user for all db servers</span><br><span class="line">  mysql_user: name&#x3D;kate password&#x3D;test host&#x3D;&#123;&#123; hostvars.[item].ansible_eth0.ipv4.address &#125;&#125; state&#x3D;present</span><br><span class="line">  with_items: groups[&#39;dbservers&#39;]</span><br></pre></td></tr></table></figure><h3 id="5-play-hosts"><a href="#5-play-hosts" class="headerlink" title="5. play_hosts"></a>5. play_hosts</h3><p>当前playbook会在哪些hosts上运行</p><h3 id="6-inventory-dir"><a href="#6-inventory-dir" class="headerlink" title="6. inventory_dir"></a>6. inventory_dir</h3><p>主机清单所在目录</p><h3 id="7-inventory-file"><a href="#7-inventory-file" class="headerlink" title="7. inventory_file"></a>7. inventory_file</h3><p>主机清单文件</p><h2 id="变量优先级"><a href="#变量优先级" class="headerlink" title="变量优先级"></a>变量优先级</h2><ol><li>extra vars(命令中-e)最优先</li><li>inventory 主机清单中连接变量(ansible_ssh_user等)</li><li>play 中 vars、vars_files 等</li><li>剩余的在 inventory 中定义的变量</li><li>系统的 facts 变量</li><li>角色定义的默认变量(roles/rolesname/defaults/main.yml)</li></ol><blockquote><p>子组会覆盖父组，主机总是覆盖组定义的变量</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11. 使用lookup生成变量</title>
      <link href="/2020/05/20/11.%20%E4%BD%BF%E7%94%A8lookup%E7%94%9F%E6%88%90%E5%8F%98%E9%87%8F/"/>
      <url>/2020/05/20/11.%20%E4%BD%BF%E7%94%A8lookup%E7%94%9F%E6%88%90%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="11-使用lookup生成变量"><a href="#11-使用lookup生成变量" class="headerlink" title="11. 使用lookup生成变量"></a>11. 使用lookup生成变量</h1><p>[toc]</p><h2 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h2><p>在通常情况下，所有的配置信息都会被作为ansible的变量保存了，而且可以保存在ansible允许定义变量的各种地方，诸如vars区段，<code>vars_files</code>加载的文件中，以及host_vars和group_vars目录中。</p><p>但在有些时候，我们希望从诸如文本文件或者.csv文件中收集数据作为ansible的变量，或者直接获取某些命令的输出作为ansible的变量，甚至从redis或者etcd这样的键值存储中取得相应的值作为ansible的变量。这个时候，我们就需要通过ansible的lookup插件来从这些数据源中读取配置数据，传递给ansbile变量，并在playbook或者模板中使用这些数据。</p><p>ansible支持一套从不同数据源获取数据的lookup，包括file, password, pipe, env, template, csvfile, dnstxt, redis_kv, etcd等</p><h2 id="1-file"><a href="#1-file" class="headerlink" title="1. file"></a>1. file</h2><p>使用file lookup可以从文本文件中获取数据，并在这些数据传递给ansible变量，在task或者jinja2模板中进行引用。下面是一个从文本文件中获取ssh公钥并复制到远程主机的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: copy authorized_host file</span><br><span class="line">  template: </span><br><span class="line">    src: authorized_keys.j2 </span><br><span class="line">    dest: &#x2F;home&#x2F;deploy&#x2F;.ssh&#x2F;authrized_keys </span><br><span class="line">    owner: deploy</span><br><span class="line">    group: deploy</span><br><span class="line">    mode: 0600</span><br></pre></td></tr></table></figure><p>authorized_keys.j2模板文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&#123;&#123;</span> <span class="string">lookup('file',</span> <span class="string">'/users/breeze/.ssh/id_rsa.pub'</span><span class="string">)&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-pipe"><a href="#2-pipe" class="headerlink" title="2. pipe"></a>2. pipe</h2><p>使用pipe lookup可以直接调用外部命令，并将命令执行的结果打印到标准输出，作为ansible变量。下面的例子通过pipe调用date指令拿到一个以时间数字组成的字串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- name: Flamingo | Get release version</span><br><span class="line">  set_fact:</span><br><span class="line">    flamingo_release_version: &quot;&#123;&#123; lookup(&#39;pipe&#39;, &#39;date +%Y%m%d%H%M%SZ&#39;) &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="3-url"><a href="#3-url" class="headerlink" title="3. url"></a>3. url</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; lookup(&#39;url&#39;, &#39;http:&#x2F;&#x2F;xxx&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="3-env"><a href="#3-env" class="headerlink" title="3. env"></a>3. env</h2><p>env lookup实际就是获取在控制主机上的某个环境变量的值。下面是一个读取控制机上<code>$JAVA_HOME</code>变量值的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: get JAVA_HOME</span><br><span class="line">  debug: msg&#x3D;&quot;&#123;&#123; lookup(&#39;env&#39;, &#39;JAVA_HOME&#39;)&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="4-template"><a href="#4-template" class="headerlink" title="4. template"></a>4. template</h2><p>template lookup可以指定一个jinja2模板，然后返回这个模板中的变量被替换以后的结果。</p><p>假设我们有一个message.j2模板，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This host runs &#123;&#123; ansible_distribution &#125;&#125;</span><br></pre></td></tr></table></figure><p>定义一个如下的task：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: print message from template</span><br><span class="line">  debug: msg&#x3D;&quot;&#123;&#123; lookup(&#39;template&#39;, &#39;message.j2&#39;)&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>输出的msg的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This host runs CentOS</span><br></pre></td></tr></table></figure><h2 id="5-csvfile"><a href="#5-csvfile" class="headerlink" title="5. csvfile"></a>5. csvfile</h2><p>csvfile可以从.csv文件中读取一个条目。假设我们有如下示例的名为users.csv的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username,email</span><br><span class="line">lorin,lorin@test.com</span><br><span class="line">john,john@example.com</span><br><span class="line">sue,sue@exmaple.com</span><br></pre></td></tr></table></figure><p>下面是一个使用csvfile lookkup提取sue的电子邮件地址的task示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">get</span> <span class="string">sue's</span> <span class="string">email</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="string">msg="&#123;&#123;</span> <span class="string">lookup('csvfile','sue</span> <span class="string">file=users.csv</span> <span class="string">delimiter=,</span> <span class="string">col=1')&#125;&#125;"</span></span><br></pre></td></tr></table></figure><p>可以看到，一共向插件传递了四个参数：sue, file=users.csv, delimiter=,以及col=1。说明如下：</p><ul><li>第一个参数指定一个名字，该名字必须出现在其所在行的第0列，需要说明的是，如果指定的第一个参数名字在文件中出现多次，则匹配第一次出现的结果</li><li>第二个参数指定csv文件的文件名</li><li>第三个参数指定csv文件的中条目的分隔符，</li><li>第四个参数指定要取得哪一列的值，这一列正是第一个参数所在行的那一列的值</li></ul><p>如果我们想要查找的用户存储在名为username的变量中，则可以使用”+”符号来连接username字串和其他的参数字串，来构建完整的参数字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lookup(&#39;csvfile&#39;, username+&#39;file&#x3D;users.csv&#39; delimiter&#x3D;, col&#x3D;1)</span><br></pre></td></tr></table></figure><h2 id="6-redis-kv"><a href="#6-redis-kv" class="headerlink" title="6. redis_kv"></a>6. redis_kv</h2><p><code>redis_kv lookup</code>可以直接从redis存储中来获取一个key的value，key必须是一个字符串，如同Redis GET指令一样。需要注意的是，要使用<code>redis_kv lookup</code>，需要在主控端安装python的redis客户端，在centos上，软件包为python-redis。</p><p>下面是一个在playbook中调用redis lookup的task，从本地的redis中取中一个key为weather的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: lookup value in redis</span><br><span class="line">  debug: msg&#x3D;&quot;&#123;&#123; lookup(&#39;redis_kv&#39;, &#39;redis:&#x2F;&#x2F;localhost:6379,weather&#39;)&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>其中URL部分如果不指定，该模块会默认连接到<code>redis://localhost:6379</code>，所以实际上在上面的实例中，调用可以直接写成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; lookup(&#39;redis_kv&#39;, &#39;weather&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="7-etcd"><a href="#7-etcd" class="headerlink" title="7. etcd"></a>7. etcd</h2><p>etcd是一个分布式的key-value存储，通常被用于保存配置信息或者被用于实现服务发现。可以使用etcd lookup来从etcd中获取指定key的value。</p><p>我们通过如下方法往一个etcd中写入一个key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L http:&#x2F;&#x2F;127.0.0.1:2379&#x2F;v2&#x2F;keys&#x2F;weather -XPUT -d value&#x3D;sunny</span><br></pre></td></tr></table></figure><p>定义一个调用etcd插件的task：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: look up value in etcd</span><br><span class="line">  debug: msg&#x3D;&quot;&#123;&#123; lookup(&#39;etcd&#39;,&#39;http:&#x2F;&#x2F;127.0.0.1:2379,weather&#39;)&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>默认情况下，etcd lookup会在<a href="http://127.0.0.1:2379上查找etcd服务器。但我们在执行playbook之前可以通过设置`ANSIBLE_ETCD_URL`环境变量来修改这个设置。">http://127.0.0.1:2379上查找etcd服务器。但我们在执行playbook之前可以通过设置`ANSIBLE_ETCD_URL`环境变量来修改这个设置。</a></p><h2 id="8-password"><a href="#8-password" class="headerlink" title="8. password"></a>8. password</h2><p>password lookup会随机生成一个密码，并将这个密码写入到参数指定的文件中。如下示例，创建一个名为bob的mysql用户，并随机生成该用户的密码，并将密码写入到主控端的bob-password.txt中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: create deploy mysql user</span><br><span class="line">  mysql_user: name&#x3D;bob password&#x3D;&#123;&#123; lookup(&#39;password&#39;, &#39;bob-password.txt&#39;)&#125;&#125; priv&#x3D;*.*:ALL state&#x3D;present</span><br></pre></td></tr></table></figure><h2 id="9-dnstxt"><a href="#9-dnstxt" class="headerlink" title="9. dnstxt"></a>9. dnstxt</h2><p>dnstxt lookup用于获取指定域名的TXT记录。需要在主控端安装python-dns。</p><p>使用方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: lookup TXT record</span><br><span class="line">  debug: msg&#x3D;&quot;&#123;&#123; lookup(&#39;dnstxt&#39;, &quot;aliyun.com&quot;) &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>如果某一个主机有多个相关联的TXT记录，那么模块会把他们连在一起，并且每次调用时的连接顺序可能不同</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12. Ansible Vault配置加密</title>
      <link href="/2020/05/20/12.%20Ansible%20Vault%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86/"/>
      <url>/2020/05/20/12.%20Ansible%20Vault%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="12-Ansible-Vault配置加密"><a href="#12-Ansible-Vault配置加密" class="headerlink" title="12. Ansible Vault配置加密"></a>12. Ansible Vault配置加密</h1><p>[toc]</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在使用ansible的过程中，不可避免的会存储一些敏感信息，比如在变量文件中存储帐号密码信息等。</p><p>ansible通过ansible-vault命令行工具来提供对敏感文件的加密和解密。</p><p>ansible-vault可以创建、加密、解密和查看文件。其可以加密任何ansible使用的文件，包括inventory文件，playbook中调用的变量文件等。</p><h2 id="Ansible-vault常用操作"><a href="#Ansible-vault常用操作" class="headerlink" title="Ansible-vault常用操作"></a>Ansible-vault常用操作</h2><ol><li>创建加密文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-vault create file</span><br></pre></td></tr></table></figure><ol start="2"><li>编辑加密文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-vault edit file</span><br></pre></td></tr></table></figure><ol start="3"><li>重置密码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-vault rekey file</span><br></pre></td></tr></table></figure><ol start="4"><li>加密已有文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-vault encrypt file</span><br></pre></td></tr></table></figure><ol start="5"><li>解密文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-vault decrypt file</span><br></pre></td></tr></table></figure><ol start="6"><li>查看文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-vault view file</span><br></pre></td></tr></table></figure><h2 id="Ansible-vault配置示例"><a href="#Ansible-vault配置示例" class="headerlink" title="Ansible-vault配置示例"></a>Ansible-vault配置示例</h2><ol><li><p>创建一个user.yml的变量文件，内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username: &quot;user1&quot;</span><br><span class="line">pwhash: &quot;$1$GkTPu7we$ZZtdsLPIHkS.fmoVcn3v51&quot;</span><br></pre></td></tr></table></figure></li><li><p>加密上面创建的变量文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ansible-vault encrypt user.yml </span><br><span class="line">New Vault password: </span><br><span class="line">Confirm New Vault password: </span><br><span class="line">Encryption successful</span><br></pre></td></tr></table></figure></li><li><p>编写playbook文件如下：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- name: create user accounts for all our servers</span><br><span class="line">  hosts: test</span><br><span class="line">  become: True</span><br><span class="line">  remote_user: ansible</span><br><span class="line">  vars_files:</span><br><span class="line">    - user.yml</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Creating user from user.yml</span><br><span class="line">      user:</span><br><span class="line">        name: &quot;&#123;&#123; username &#125;&#125;&quot;</span><br><span class="line">        password: &quot;&#123;&#123; pwhash &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li>执行playbook</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook create_user.yml --ask-vault-pass</span><br><span class="line">Vault password:</span><br></pre></td></tr></table></figure><p>也可以通过如下操作执行playbook：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo redhat &gt; vault-pass</span><br><span class="line">chmod 600 vault-pass</span><br><span class="line"></span><br><span class="line">ansible-playbook create_user.yml --vault-password-file&#x3D;vault-pass</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13. Ansible文件管理模块及Jinja2过滤器</title>
      <link href="/2020/05/20/13.%20Ansible%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E5%8F%8AJinja2%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2020/05/20/13.%20Ansible%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E5%8F%8AJinja2%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="13-Ansible文件管理模块及Jinja2过滤器"><a href="#13-Ansible文件管理模块及Jinja2过滤器" class="headerlink" title="13. Ansible文件管理模块及Jinja2过滤器"></a>13. Ansible文件管理模块及Jinja2过滤器</h1><p>[toc]</p><p>对于任何自动管理工具而言，对于文件的管理都是其绕不开的话题。同样，ansible也围绕文件管理提供了众多的模块。同时还提供了Jinja2模板语法来配置文件模板。</p><h2 id="常用文件管理模块"><a href="#常用文件管理模块" class="headerlink" title="常用文件管理模块"></a>常用文件管理模块</h2><h3 id="1-file"><a href="#1-file" class="headerlink" title="1. file"></a>1. file</h3><p>我们在讲ansible ad-hoc的时候，已经说过file模块，在playbook中的使用也没什么不同，下面给个简单的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: Touch a file and set permissions</span><br><span class="line">  file:</span><br><span class="line">    path: &#x2F;path&#x2F;to&#x2F;file</span><br><span class="line">    owner: user1</span><br><span class="line">    group: group1</span><br><span class="line">    mode: 0640</span><br><span class="line">    state: touch</span><br></pre></td></tr></table></figure><h3 id="2-synchronize"><a href="#2-synchronize" class="headerlink" title="2. synchronize"></a>2. synchronize</h3><p>synchronize模块示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- name: synchronize local file to remote files</span><br><span class="line">  synchronize:</span><br><span class="line">    src: file</span><br><span class="line">    dest: &#x2F;path&#x2F;to&#x2F;file</span><br></pre></td></tr></table></figure><h3 id="3-copy"><a href="#3-copy" class="headerlink" title="3. copy"></a>3. copy</h3><p>同样的，我们已经介绍过copy模块，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- name: copy a file to managed hosts</span><br><span class="line">  copy:</span><br><span class="line">    src: file</span><br><span class="line">    dest: &#x2F;path&#x2F;to&#x2F;file</span><br></pre></td></tr></table></figure><h3 id="4-fetch"><a href="#4-fetch" class="headerlink" title="4. fetch"></a>4. fetch</h3><p>fetch模块与copy模块正好相反，copy是把主控端的文件复制到被控端，而fetch则是把被控端的文件复制到主控端。并且在主控端指定的目录下，以被控端主机名的形式来组织目录结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- name: Use the fetch module to retrieve secure log files</span><br><span class="line">  hosts: all</span><br><span class="line">  user: ansible</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Fetch the &#x2F;var&#x2F;log&#x2F;secure log file from managed hosts</span><br><span class="line">      fetch:</span><br><span class="line">        src: &#x2F;var&#x2F;log&#x2F;secure</span><br><span class="line">        dest: secure-backups</span><br><span class="line">        flat: no</span><br></pre></td></tr></table></figure><p>在主控端文件存储的目录树如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># tree  secure-backups&#x2F;</span><br><span class="line">secure-backups&#x2F;</span><br><span class="line">└── 10.1.61.187</span><br><span class="line">    └── var</span><br><span class="line">        └── log</span><br><span class="line">            └── secure</span><br><span class="line"></span><br><span class="line">3 directories, 1 file</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://docs.ansible.com/ansible/latest/modules/fetch_module.html#fetch-module" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/modules/fetch_module.html#fetch-module</a></p></blockquote><h3 id="5-lineinfile"><a href="#5-lineinfile" class="headerlink" title="5. lineinfile"></a>5. lineinfile</h3><p>lineinfile是一个非常有用的模块，而且相对来说，也是用法比较复杂的模块，可直接参考《Ansible lineinfile模块》</p><h3 id="6-stat"><a href="#6-stat" class="headerlink" title="6. stat"></a>6. stat</h3><p>stat模块与linux中的stat命令一样，用来显示文件的状态信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- name: Verify the checksum of a file</span><br><span class="line">  stat:</span><br><span class="line">    path: &#x2F;path&#x2F;to&#x2F;file</span><br><span class="line">    checksum_algorithm: md5</span><br><span class="line">  register: result</span><br><span class="line">  </span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;The checksum of the file is &#123;&#123; result.stat.checksum &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><blockquote><p>参考： <a href="https://docs.ansible.com/ansible/latest/modules/stat_module.html#stat-module" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/modules/stat_module.html#stat-module</a></p></blockquote><h3 id="7-blockinfile"><a href="#7-blockinfile" class="headerlink" title="7. blockinfile"></a>7. blockinfile</h3><p>围绕着被标记的行插入、更新、删除一个文本块。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cat files/test.html</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#cat blockinfile_ex.yml</span></span><br><span class="line">---</span><br><span class="line">- name: blockinfile module <span class="built_in">test</span></span><br><span class="line">  hosts: <span class="built_in">test</span></span><br><span class="line">  tasks:</span><br><span class="line">    - name: copy test.html to dest</span><br><span class="line">      copy:</span><br><span class="line">        src: files/test.html</span><br><span class="line">        dest: /var/www/html/test.html</span><br><span class="line">    - name: add block </span><br><span class="line">      blockinfile:</span><br><span class="line">        marker: <span class="string">"&lt;!-- &#123;mark&#125; ANSIBLE MANAGED BLOCK --&gt;"</span></span><br><span class="line">        insertafter: <span class="string">"&lt;body&gt;"</span></span><br><span class="line">        path: /var/www/html/test.html</span><br><span class="line">        block: |</span><br><span class="line">          &lt;h1&gt;Welcome to &#123;&#123; ansible_hostname &#125;&#125;&lt;/h1&gt;</span><br><span class="line">          &lt;p&gt;Last updated on &#123;&#123; ansible_date_time.iso8601 &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>执行后结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@app html]# cat test.html </span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">&lt;!-- BEGIN ANSIBLE MANAGED BLOCK --&gt;</span><br><span class="line">&lt;h1&gt;Welcome to app&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;Last updated on 2019-05-28T15:00:03Z&lt;&#x2F;p&gt;</span><br><span class="line">&lt;!-- END ANSIBLE MANAGED BLOCK --&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>更多blockinfile用法参考：<a href="https://docs.ansible.com/ansible/latest/modules/blockinfile_module.html#blockinfile-module" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/modules/blockinfile_module.html#blockinfile-module</a></p></blockquote><h2 id="Jinja2模板管理"><a href="#Jinja2模板管理" class="headerlink" title="Jinja2模板管理"></a>Jinja2模板管理</h2><h3 id="Jinja2简介"><a href="#Jinja2简介" class="headerlink" title="Jinja2简介"></a>Jinja2简介</h3><p>Jinja2是基于python的模板引擎。那么什么是模板？</p><p>假设说现在我们需要一次性在10台主机上安装redis，这个通过playbook现在已经很容易实现。默认情况下，所有的redis安装完成之后，我们可以统一为其分发配置文件。这个时候就面临一个问题，这些redis需要监听的地址各不相同，我们也不可能为每一个redis单独写一个配置文件。因为这些配置文件中，绝大部分的配置其实都是相同的。这个时候最好的方式其实就是用一个通用的配置文件来解决所有的问题。将所有需要修改的地方使用变量替换，如下示例中redis.conf.j2文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">supervised systemd</span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line">port 6379</span><br><span class="line">logfile <span class="string">"/var/log/redis/redis.log"</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir /data/redis</span><br><span class="line"></span><br><span class="line">maxmemory 1G</span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span> &#123;&#123; ansible_eth0.ipv4.address &#125;&#125; 127.0.0.1</span><br><span class="line"></span><br><span class="line">timeout 300</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line">maxclients 10000</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename appendonly.aof</span><br><span class="line">appendfsync everysec</span><br></pre></td></tr></table></figure><p>那么此时，redis.conf.j2文件就是一个模板文件。<code></code>是一个fact变量，用于获取被控端ip地址以实现替换。</p><h3 id="在playbook中使用jinja2"><a href="#在playbook中使用jinja2" class="headerlink" title="在playbook中使用jinja2"></a>在playbook中使用jinja2</h3><p>现在我们有了一个模板文件，那么在playbook中如何来使用呢？</p><p>playbook使用template模块来实现模板文件的分发，其用法与copy模块基本相同，唯一的区别是，copy模块会将原文件原封不动的复制到被控端，而template会将原文件复制到被控端，并且使用变量的值将文件中的变量替换以生成完整的配置文件。</p><p>下面是一个完整的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># cat config_redis.yml </span><br><span class="line">- name: Configure Redis</span><br><span class="line">  hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">    - name: create redis group</span><br><span class="line">      group:</span><br><span class="line">        name: redis</span><br><span class="line">        gid: 1111</span><br><span class="line">    - name: create redis user</span><br><span class="line">      user:</span><br><span class="line">        name: redis</span><br><span class="line">        uid: 1111</span><br><span class="line">        group: redis</span><br><span class="line">    - name: defined  redismem</span><br><span class="line">      set_fact: redismem&#x3D;&quot;&#123;&#123; (ansible_memtotal_mb &#x2F;2) | int &#125;&#125;M&quot;</span><br><span class="line">    - name: install redis</span><br><span class="line">      yum:</span><br><span class="line">        name: redis</span><br><span class="line">        state: present</span><br><span class="line">    - name: create data dir</span><br><span class="line">      file:</span><br><span class="line">        path: &#x2F;data&#x2F;redis</span><br><span class="line">        state: directory</span><br><span class="line">        recurse: yes</span><br><span class="line">        owner: redis</span><br><span class="line">        group: redis</span><br><span class="line">    - name: copy redis.conf to dest</span><br><span class="line">      template:</span><br><span class="line">        src: templates&#x2F;redis.conf.j2</span><br><span class="line">        dest: &#x2F;etc&#x2F;redis.conf</span><br><span class="line">      notify:</span><br><span class="line">        - restart redis</span><br><span class="line">    - name: start redis</span><br><span class="line">      service:</span><br><span class="line">        name: redis</span><br><span class="line">        state: started</span><br><span class="line">        enabled: yes</span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart redis</span><br><span class="line">      service:</span><br><span class="line">        name: redis</span><br><span class="line">        state: restarted</span><br></pre></td></tr></table></figure><p>执行完成之后，我们可以看到被控端/etc/redis.conf配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis.pid</span><br><span class="line">port 6379</span><br><span class="line">logfile &quot;&#x2F;var&#x2F;log&#x2F;redis&#x2F;redis.log&quot;</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir &#x2F;data&#x2F;redis</span><br><span class="line"></span><br><span class="line">maxmemory &#123;&#123; redismem &#125;&#125;</span><br><span class="line"></span><br><span class="line">bind 10.1.61.187 127.0.0.1</span><br><span class="line"></span><br><span class="line">timeout 300</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line">maxclients 10000</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename appendonly.aof</span><br><span class="line">appendfsync everysec</span><br></pre></td></tr></table></figure><p>关于template模块的更多参数说明：</p><ul><li>backup：如果原目标文件存在，则先备份目标文件</li><li>dest：目标文件路径</li><li>force：是否强制覆盖，默认为yes</li><li>group：目标文件属组</li><li>mode：目标文件的权限</li><li>owner：目标文件属主</li><li>src：源模板文件路径</li><li>validate：在复制之前通过命令验证目标文件，如果验证通过则复制</li></ul><h3 id="Jinja2条件语句"><a href="#Jinja2条件语句" class="headerlink" title="Jinja2条件语句"></a>Jinja2条件语句</h3><p>在上面的示例中，我们直接取了被控节点的eth0网卡的ip作为其监听地址。那么假如有些机器的网卡是bond0，这种做法就会报错。这个时候我们就需要在模板文件中定义条件语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis.pid</span><br><span class="line">port 6379</span><br><span class="line">logfile &quot;&#x2F;var&#x2F;log&#x2F;redis&#x2F;redis.log&quot;</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir &#x2F;data&#x2F;redis</span><br><span class="line"></span><br><span class="line">maxmemory 1G</span><br><span class="line"></span><br><span class="line">&#123;% if ansible_bond0 is defined %&#125;</span><br><span class="line">bind &#123;&#123; ansible_bond0.ipv4.address &#125;&#125; 127.0.0.1</span><br><span class="line">&#123;% elif ansible_eth0 is defined %&#125;</span><br><span class="line">bind &#123;&#123; ansible_eth0.ipv4.address &#125;&#125; 127.0.0.1</span><br><span class="line">&#123;% else%&#125;</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">timeout 300</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line">maxclients 10000</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename appendonly.aof</span><br><span class="line">appendfsync everysec</span><br></pre></td></tr></table></figure><p>我们可以更进一步，让redis主从角色都可以使用该文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis.pid</span><br><span class="line">port 6379</span><br><span class="line">logfile &quot;&#x2F;var&#x2F;log&#x2F;redis&#x2F;redis.log&quot;</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir &#x2F;data&#x2F;redis</span><br><span class="line"></span><br><span class="line">maxmemory 1G</span><br><span class="line"></span><br><span class="line">&#123;% if ansible_bond0 is defined %&#125;</span><br><span class="line">bind &#123;&#123; ansible_bond0.ipv4.address &#125;&#125; 127.0.0.1</span><br><span class="line">&#123;% elif ansible_eth0 is defined %&#125;</span><br><span class="line">bind &#123;&#123; ansible_eth0.ipv4.address &#125;&#125; 127.0.0.1</span><br><span class="line">&#123;% else%&#125;</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if masterip is defined %&#125;</span><br><span class="line">slaveof &#123;&#123; masterip &#125;&#125; &#123;&#123; masterport|default(6379) &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if masterpass is defined %&#125;</span><br><span class="line">masterauth &#123;&#123; masterpass &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if requirepass is defined %&#125;</span><br><span class="line">requirepass &#123;&#123; requirepass &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">timeout 300</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line">maxclients 10000</span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename appendonly.aof</span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error no</span><br></pre></td></tr></table></figure><p>我们定义一个inventory如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[redis]</span><br><span class="line">10.1.61.27  masterip&#x3D;10.1.61.187 masterpass&#x3D;123456</span><br><span class="line">10.1.61.187 requirepass&#x3D;123456</span><br></pre></td></tr></table></figure><h3 id="Jinja2循环语句"><a href="#Jinja2循环语句" class="headerlink" title="Jinja2循环语句"></a>Jinja2循环语句</h3><p>定义一个inventory示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[proxy]</span><br><span class="line">10.1.61.195</span><br><span class="line"></span><br><span class="line">[webservers]</span><br><span class="line">10.1.61.27</span><br><span class="line">10.1.61.187</span><br></pre></td></tr></table></figure><p>现在把proxy主机组中的主机作为代理服务器，安装nginx做反向代理，将请求转发至后面的两台webserver，即webserver组的服务器。</p><p>现在我们编写一个playbook如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#cat config_nginx.conf</span><br><span class="line"></span><br><span class="line"># 还需要在ansible.cfg中开启facts缓存</span><br><span class="line">- name: gather facts</span><br><span class="line">  gather_facts: Fasle</span><br><span class="line">  hosts: webservers</span><br><span class="line">  tasks:</span><br><span class="line">    - name: gather facts</span><br><span class="line">      setup:</span><br><span class="line">   </span><br><span class="line">- name: Configure Nginx</span><br><span class="line">  hosts: proxy</span><br><span class="line">  tasks:</span><br><span class="line">    - name: install nginx</span><br><span class="line">      yum:</span><br><span class="line">        name: nginx</span><br><span class="line">        state: present</span><br><span class="line">    - name: copy nginx.conf to dest</span><br><span class="line">      template:</span><br><span class="line">        src: templates&#x2F;nginx.conf.j2</span><br><span class="line">        dest: &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">      notify:</span><br><span class="line">        - restart nginx</span><br><span class="line">    - name: start nginx</span><br><span class="line">      service:</span><br><span class="line">        name: nginx</span><br><span class="line">        state: started</span><br><span class="line">        enabled: yes</span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart nginx</span><br><span class="line">      service:</span><br><span class="line">        name: nginx</span><br><span class="line">        state: restarted</span><br></pre></td></tr></table></figure><p>模板文件 templates/nginx.conf.j2示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># cat nginx.conf.j2 </span><br><span class="line">user nginx;</span><br><span class="line">worker_processes &#123;&#123; ansible_processor_vcpus &#125;&#125;;</span><br><span class="line">error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;</span><br><span class="line">pid &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line">include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 65535;</span><br><span class="line">    use epoll;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    map $http_x_forwarded_for $clientRealIP &#123;</span><br><span class="line">        &quot;&quot; $remote_addr;</span><br><span class="line">        ~^(?P&lt;firstAddr&gt;[0-9\.]+),?.*$ $firstAddr;</span><br><span class="line">    &#125;</span><br><span class="line">    log_format  real_ip &#39;&#123; &quot;datetime&quot;: &quot;$time_local&quot;, &#39;</span><br><span class="line">                        &#39;&quot;remote_addr&quot;: &quot;$remote_addr&quot;, &#39;</span><br><span class="line">                        &#39;&quot;source_addr&quot;: &quot;$clientRealIP&quot;, &#39;</span><br><span class="line">                        &#39;&quot;x_forwarded_for&quot;: &quot;$http_x_forwarded_for&quot;, &#39;</span><br><span class="line">                        &#39;&quot;request&quot;: &quot;$request_uri&quot;, &#39;</span><br><span class="line">                        &#39;&quot;status&quot;: &quot;$status&quot;, &#39;</span><br><span class="line">                        &#39;&quot;request_method&quot;: &quot;$request_method&quot;, &#39;</span><br><span class="line">                        &#39;&quot;request_length&quot;: &quot;$request_length&quot;, &#39;</span><br><span class="line">                        &#39;&quot;body_bytes_sent&quot;: &quot;$body_bytes_sent&quot;, &#39;</span><br><span class="line">                        &#39;&quot;request_time&quot;: &quot;$request_time&quot;, &#39;</span><br><span class="line">                        &#39;&quot;http_referrer&quot;: &quot;$http_referer&quot;, &#39;</span><br><span class="line">                        &#39;&quot;user_agent&quot;: &quot;$http_user_agent&quot;, &#39;</span><br><span class="line">                        &#39;&quot;upstream_addr&quot;: &quot;$upstream_addr&quot;, &#39;</span><br><span class="line">                        &#39;&quot;upstream_status&quot;: &quot;$upstream_status&quot;, &#39;</span><br><span class="line">                        &#39;&quot;upstream_http_header&quot;: &quot;$upstream_http_host&quot;,&#39;</span><br><span class="line">                        &#39;&quot;upstream_response_time&quot;: &quot;$upstream_response_time&quot;, &#39;</span><br><span class="line">                        &#39;&quot;x-req-id&quot;: &quot;$http_x_request_id&quot;, &#39;</span><br><span class="line">                        &#39;&quot;servername&quot;: &quot;$host&quot;&#39;</span><br><span class="line">                        &#39; &#125;&#39;;</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  real_ip;</span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">    default_type        application&#x2F;octet-stream;</span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">    upstream web &#123;</span><br><span class="line">    &#123;% for host in groups[&#39;webservers&#39;] %&#125;</span><br><span class="line">        &#123;% if hostvars[host][&#39;ansible_bond0&#39;][&#39;ipv4&#39;][&#39;address&#39;] is defined %&#125;</span><br><span class="line">        server &#123;&#123; hostvars[host][&#39;ansible_bond0&#39;] &#125;&#125;;</span><br><span class="line">        &#123;% elif hostvars[host][&#39;ansible_eth0&#39;] is defined %&#125;</span><br><span class="line">        server &#123;&#123; hostvars[host][&#39;ansible_eth0&#39;][&#39;ipv4&#39;][&#39;address&#39;] &#125;&#125;;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        server_name  _;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;web;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面再给一个域名解析服务bind的配置文件 named.conf的jinja2模板示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">options &#123;</span><br><span class="line"></span><br><span class="line">listen-on port 53 &#123;</span><br><span class="line">127.0.0.1;</span><br><span class="line">&#123;% for ip in ansible_all_ipv4_addresses %&#125;</span><br><span class="line">&#123;&#123; ip &#125;&#125;;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">directory &quot;&#x2F;var&#x2F;named&quot;;</span><br><span class="line">dump-file &quot;&#x2F;var&#x2F;named&#x2F;data&#x2F;cache_dump.db&quot;;</span><br><span class="line">statistics-file &quot;&#x2F;var&#x2F;named&#x2F;data&#x2F;named_stats.txt&quot;;</span><br><span class="line">memstatistics-file &quot;&#x2F;var&#x2F;named&#x2F;data&#x2F;named_mem_stats.txt&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;.&quot; IN &#123;</span><br><span class="line">type hint;</span><br><span class="line">file &quot;named.ca&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">include &quot;&#x2F;etc&#x2F;named.rfc1912.zones&quot;;</span><br><span class="line">include &quot;&#x2F;etc&#x2F;named.root.key&quot;;</span><br><span class="line"></span><br><span class="line">&#123;# Variables for zone config #&#125;</span><br><span class="line">&#123;% if &#39;authorativenames&#39; in group_names %&#125;</span><br><span class="line">&#123;% set zone_type &#x3D; &#39;master&#39; %&#125;</span><br><span class="line">&#123;% set zone_dir &#x3D; &#39;data&#39; %&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">&#123;% set zone_type &#x3D; &#39;slave&#39; %&#125;</span><br><span class="line">&#123;% set zone_dir &#x3D; &#39;slaves&#39; %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">zone &quot;internal.example.com&quot; IN &#123;</span><br><span class="line">type &#123;&#123; zone_type &#125;&#125;;</span><br><span class="line">file &quot;&#123;&#123; zone_dir &#125;&#125;&#x2F;internal.example.com&quot;;</span><br><span class="line">&#123;% if &#39;authorativenames&#39; not in group_names %&#125;</span><br><span class="line">masters &#123; 192.168.2.2; &#125;;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Jinja2过滤器"><a href="#Jinja2过滤器" class="headerlink" title="Jinja2过滤器"></a>Jinja2过滤器</h3><h4 id="1-default过滤器"><a href="#1-default过滤器" class="headerlink" title="1. default过滤器"></a>1. default过滤器</h4><p>当指定的变量不存在时，用于设定默认值</p><p>简单示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Host&quot;: &quot;&#123;&#123; db_host | default(&#39;lcoalhost&#39;) &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>复杂一点儿的实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- hosts: </span><br><span class="line">  gather_facts: false</span><br><span class="line">  vars:</span><br><span class="line">    - path: &#x2F;tmp&#x2F;test</span><br><span class="line">      mode: 0400</span><br><span class="line">    - path: &#x2F;tmp&#x2F;foo</span><br><span class="line">    - path: &#x2F;tmp&#x2F;bar</span><br><span class="line">  tasks:</span><br><span class="line">    - file:</span><br><span class="line">        path: &#123;&#123; item.path &#125;&#125;</span><br><span class="line">        state: touch</span><br><span class="line">        mode: &#123;&#123; item.mode|default(omit)&#125;&#125;</span><br><span class="line">      with_items: &quot;&#123;&#123; paths &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h4 id="2-字符串操作相关的过滤器"><a href="#2-字符串操作相关的过滤器" class="headerlink" title="2. 字符串操作相关的过滤器"></a>2. 字符串操作相关的过滤器</h4><ul><li>upper：将所有字符串转换为大写</li><li>lower：将所有字符串转换为小写</li><li>capitalize：将字符串的首字母大写，其他字母小写</li><li>reverse：将字符串倒序排列</li><li>first：返回字符串的第一个字符</li><li>last：返回字符串的最后一个字符</li><li>trim：将字符串开头和结尾的空格去掉</li><li>center(30)：将字符串放在中间，并且字符串两边用空格补齐30位</li><li>length：返回字符串的长度，与count等价</li><li>list：将字符串转换为列表</li><li>shuffle：list将字符串转换为列表，但是顺序排列，shuffle同样将字符串转换为列表，但是会随机打乱字符串顺序</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars: </span><br><span class="line">    teststr: &quot;abc123ABV&quot;</span><br><span class="line">    teststr1: &quot; abc &quot;</span><br><span class="line">    teststr2: &quot;123456789&quot;</span><br><span class="line">    teststr3: &quot;sfacb1335@#$%&quot;</span><br><span class="line">  tasks:</span><br><span class="line">    - debug: </span><br><span class="line">        msg: &quot;&#123;&#123; teststr | upper &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; teststr | lower &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; teststr | capitalize &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; teststr | reverse &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; teststr|first &#125;&#125;&quot;</span><br><span class="line">    - debug: </span><br><span class="line">        msg: &quot;&#123;&#123; teststr|last &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; teststr1 | trim &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; teststr2 | center(30) &#125;&#125;&quot;</span><br><span class="line">    - debug: </span><br><span class="line">        msg: &quot;&#123;&#123; teststr2 | length &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; teststr3 | list &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; teststr3 | shuffle &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h4 id="3-数字操作相关的过滤器"><a href="#3-数字操作相关的过滤器" class="headerlink" title="3. 数字操作相关的过滤器"></a>3. 数字操作相关的过滤器</h4><ul><li>int： 将对应的值转换为整数</li><li>float：将对应的值转换为浮点数</li><li>abs：获取绝对值</li><li>round：小数点四舍五入</li><li>random：从一个给定的范围中获取随机值</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars: </span><br><span class="line">    testnum: -1</span><br><span class="line">  tasks:</span><br><span class="line">    - debug: </span><br><span class="line">        msg: &quot;&#123;&#123;  8+(&#39;8&#39;|int) &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        # 默认情况下，如果无法完成数字转换则返回0</span><br><span class="line">        # 这里指定如果无法完成数字转换则返回6</span><br><span class="line">        msg: &quot;&#123;&#123; &#39;a&#39;|int(default&#x3D;6) &#125;&#125;&quot; </span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; &#39;8&#39;|float &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; &#39;a&#39;|float(8.88)&#39; &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testnum|abs &#125;&#125;&quot;</span><br><span class="line">    - debug: </span><br><span class="line">        msg: &quot;&#123;&#123; 12.5|round &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; 3.1415926 | round(5) &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        # 从0到100中随机返回一个数字</span><br><span class="line">        msg: &quot;&#123;&#123; 100|random &#125;&#125;&quot;</span><br><span class="line">    - debug: </span><br><span class="line">        # 从5到10中随机返回一个数字</span><br><span class="line">        msg: &quot;&#123;&#123; 10|random(start&#x3D;5) &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        # 从4到15中随机返回一个数字，步长为3</span><br><span class="line">        # 返回的随机数只可能是：4，7，10，13中的一个</span><br><span class="line">        msg: &quot;&#123;&#123; 15|random(start&#x3D;4,step&#x3D;3) &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        # 从0到15随机返回一个数字，步长为4</span><br><span class="line">        msg: &quot;&#123;&#123; 15|random(step&#x3D;4) &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h4 id="4-列表操作相关的过滤器"><a href="#4-列表操作相关的过滤器" class="headerlink" title="4. 列表操作相关的过滤器"></a>4. 列表操作相关的过滤器</h4><ul><li>length: 返回列表长度</li><li>first：返回列表的第一个值</li><li>last：返回列表的最后一个值</li><li>min：返回列表中最小的值</li><li>max：返回列表中最大的值</li><li>sort：重新排列列表，默认为升序排列，sort(reverse=true)为降序</li><li>sum：返回纯数字非嵌套列表中所有数字的和</li><li>flatten：如果列表中包含列表，则flatten可拉平嵌套的列表,levels参数可用于指定被拉平的层级</li><li>join：将列表中的元素合并为一个字符串</li><li>random：从列表中随机返回一个元素</li><li>shuffle</li><li>upper</li><li>lower</li><li>union：将两个列表合并，如果元素有重复，则只留下一个</li><li>intersect：获取两个列表的交集</li><li>difference：获取存在于第一个列表中，但不存在于第二个列表中的元素</li><li>symmetric_difference：取出两个列表中各自独立的元素，如果重复则只留一个</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: false</span><br><span class="line">  vars:</span><br><span class="line">    testlist1: [1,2,4,6,3,5]</span><br><span class="line">    testlist2: [1,[2,3,4,[5,6]]]</span><br><span class="line">    testlist3: [1,2,&#39;a&#39;,&#39;b&#39;]</span><br><span class="line">    testlist4: [1,&#39;A&#39;,&#39;b&#39;,[&#39;C&#39;,&#39;d&#39;],&#39;Efg&#39;]</span><br><span class="line">    testlist5: [&#39;abc&#39;,1,2,&#39;a&#39;,3,2,&#39;1&#39;,&#39;abc&#39;]</span><br><span class="line">    testlist6: [&#39;abc&#39;,3,&#39;1&#39;,&#39;b&#39;,&#39;a&#39;]</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist1 | length &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist1 |first &#125;&#125;&quot;</span><br><span class="line">    - debug: </span><br><span class="line">        msg: &quot;&#123;&#123; testlist1 | last &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist1 | min &#125;&#125;&quot;</span><br><span class="line">    - debug: </span><br><span class="line">        msg: &quot;&#123;&#123; testlist1 | max &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist1 | sort &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist1 | sort(reverse&#x3D;true) &#125;&#125;&quot;  </span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist2 | flatten &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist2 | flatten(levels&#x3D;1) &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist2 | flatten | max &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist3 | join &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist3 |join(&#39;,&#39;)&#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist3 | random &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist3 | shuffle &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist4 | upper &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist4 | lower &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist5 | union(testlist6) &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist5 | intersect(testlist6) &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist5 | difference(testlist6) &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist5 | symmetric_difference(testlist6) &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h4 id="5-应用于注册变量的过滤器"><a href="#5-应用于注册变量的过滤器" class="headerlink" title="5. 应用于注册变量的过滤器"></a>5. 应用于注册变量的过滤器</h4><p>正常情况下，当某个task执行失败的时候，ansible会中止运行。此时我们可以通过<code>ignore_errors</code>来捕获异常以让task继续往下执行。然后调用debug模块打印出出错时的内容，拿来错误结果后，主动失败。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- name: Run myprog</span><br><span class="line">  command: &#x2F;opt&#x2F;myprog</span><br><span class="line">  register: result</span><br><span class="line">  ignore_errors: True</span><br><span class="line">  </span><br><span class="line">- debug: </span><br><span class="line">    var: result</span><br><span class="line"></span><br><span class="line">- debug: </span><br><span class="line">    msg: &quot;Stop running the playbook if myprog failed&quot;</span><br><span class="line">  failed_when: result|failed</span><br></pre></td></tr></table></figure><p>任务返回值过滤器：</p><ul><li>failed： 如果注册变量的值是任务failed则返回True</li><li>changed: 如果注册变量的值是任务changed则返回True</li><li>success：如果注册变量的值是任务succeeded则返回True</li><li>skipped：如果注册变量的值是任务skipped则返回True</li></ul><blockquote><p>在ansible2.9中，该方式会被废弃，不推荐使用</p></blockquote><h4 id="6-应用于文件路径的过滤器"><a href="#6-应用于文件路径的过滤器" class="headerlink" title="6. 应用于文件路径的过滤器"></a>6. 应用于文件路径的过滤器</h4><ul><li>basename：返回文件路径中的文件名部分</li><li>dirname：返回文件路径中的目录部分</li><li>expanduser：将文件路径中的~替换为用户目录</li><li>realpath：处理符号链接后的文件实际路径</li></ul><p>下面是一个示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- name: test basename</span><br><span class="line">  hosts: test</span><br><span class="line">  vars:</span><br><span class="line">    homepage: &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">  tasks:</span><br><span class="line">    - name: copy homepage</span><br><span class="line">      copy:</span><br><span class="line">        src: files&#x2F;index.html</span><br><span class="line">        dest: &#123;&#123; homepage &#125;&#125;</span><br></pre></td></tr></table></figure><p>可以通过basename改写成如下方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- name: test basename</span><br><span class="line">  hosts: test</span><br><span class="line">  vars:</span><br><span class="line">    homepage: &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">  tasks:</span><br><span class="line">    - name: copy homepage</span><br><span class="line">      copy:</span><br><span class="line">        src: files&#x2F;&#123;&#123; homepage | basename &#125;&#125;</span><br><span class="line">        dest: &#123;&#123; homepage &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="7-自定义过滤器"><a href="#7-自定义过滤器" class="headerlink" title="7. 自定义过滤器"></a>7. 自定义过滤器</h4><p>举个简单的例子，现在有一个playbook如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- name: test filter</span><br><span class="line">  hosts: test</span><br><span class="line">  vars:</span><br><span class="line">    domains: [&quot;www.example.com&quot;,&quot;example.com&quot;]</span><br><span class="line">  tasks:</span><br><span class="line">    template:</span><br><span class="line">      src: templates&#x2F;test.conf.j2</span><br><span class="line">      dest: &#x2F;tmp&#x2F;test.conf</span><br></pre></td></tr></table></figure><p>templates/test.conf.j2如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hosts &#x3D; [&#123;&#123; domains | join(&#39;,&#39;) &#125;&#125;]</span><br></pre></td></tr></table></figure><p>执行playbook后，在目标机上的test.conf如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hosts &#x3D; [www.example.com,example.com]</span><br></pre></td></tr></table></figure><p>现在如果希望目标机上的test.conf文件返回结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hosts &#x3D; [&quot;www.example.com&quot;,&quot;example.com&quot;]</span><br></pre></td></tr></table></figure><p>没有现成的过滤器来帮我们做这件事情。我们可以自己简单写一个surround_by_quote.py内容如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 定义过滤器执行的操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">surround_by_quote</span><span class="params">(a_list)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> [<span class="string">'"%s"'</span> % an_element <span class="keyword">for</span> an_element <span class="keyword">in</span> a_list]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterModule</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">filters</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'surround_by_quote'</span>: surround_by_quote&#125;</span><br></pre></td></tr></table></figure><p>我们需要开启ansible.cfg的配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter_plugins     &#x3D; &#x2F;usr&#x2F;share&#x2F;ansible&#x2F;plugins&#x2F;filter</span><br></pre></td></tr></table></figure><p>将刚刚编写的代码文件放入/usr/share/ansible/plugins/filter目录下，然后修改templates/test.conf.j2如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hosts &#x3D; [&#123;&#123; domains | join(&#39;,&#39;) |surround_by_quote &#125;&#125;]</span><br></pre></td></tr></table></figure><p>再次执行playbook，最后返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hosts &#x3D; [&quot;www.example.com&quot;,&quot;example.com&quot;]</span><br></pre></td></tr></table></figure><blockquote><p>关于jinja2更多用法参考：<a href="http://docs.jinkan.org/docs/jinja2/" target="_blank" rel="noopener">http://docs.jinkan.org/docs/jinja2/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14. Ansible Playbook with_X循环语句</title>
      <link href="/2020/05/20/14.%20Ansible%20Playbook%20with_X%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2020/05/20/14.%20Ansible%20Playbook%20with_X%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="14-Ansible-Playbook-with-X循环语句"><a href="#14-Ansible-Playbook-with-X循环语句" class="headerlink" title="14. Ansible Playbook with_X循环语句"></a>14. Ansible Playbook with_X循环语句</h1><p>[toc]</p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>我们在编写playbook的时候，不可避免的要执行一些重复性操作，比如指安装软件包，批量创建用户，操作某个目录下的所有文件等。正如我们所说，ansible一门简单的自动化语言，所以流程控制、循环语句这些编程语言的基本元素它同样都具备。</p><p>在Ansible 2.5以前，playbook通过不同的循环语句以实现不同的循环，这些语句使用<code>with_</code>作为前缀。这些语法目前仍然兼容，但在未来的某个时间点，会逐步废弃。</p><p>下面列出一些较常见的<code>with_X</code>循环语句：</p><ul><li>with_items</li><li>with_flattened</li><li>with_list</li><li>with_together</li><li>with_nested</li><li>with_indexed_items</li><li>with_sequence</li><li>with_random_choice</li><li>with_dict</li><li>with_subelement</li><li>with_file</li><li>with_fileglob</li><li>with_lines</li></ul><h3 id="1-with-items"><a href="#1-with-items" class="headerlink" title="1. with_items"></a>1. with_items</h3><p>简单的列表循环</p><p>场景一： 循环打印inventory中所有未分组的主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item &#125;&#125;&quot;&quot;</span><br><span class="line">      with_items: &quot;&#123;&#123; groups.ungrouped &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>场景二： 直接在with_items中定义被循环的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - name: &quot;with_items&quot;</span><br><span class="line">      debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">      with_items:</span><br><span class="line">        - &quot;user0&quot;</span><br><span class="line">        - &quot;user1&quot;</span><br><span class="line">        - &quot;user2&quot;</span><br></pre></td></tr></table></figure><p>也可以写成如下方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - name: &quot;with_items&quot;</span><br><span class="line">      debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">      with_items:[&quot;user0&quot;,&quot;user1&quot;,&quot;user2&quot;]</span><br></pre></td></tr></table></figure><p>场景三： 在with_items中定义更复杂的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - name: &quot;create directory&quot;</span><br><span class="line">      file:</span><br><span class="line">        path: &quot;&#x2F;&#123;&#123; item.path1 &#125;&#125;&#x2F;&#123;&#123; item.path2 &#125;&#125;&quot;</span><br><span class="line">      with_items:</span><br><span class="line">        - &#123; path1: a, path2: b&#125;</span><br><span class="line">        - &#123; path1: c, path2: d&#125;</span><br></pre></td></tr></table></figure><h3 id="2-with-list"><a href="#2-with-list" class="headerlink" title="2. with_list"></a>2. with_list</h3><p>与<code>with_items</code>一样，也是用于循环列表。区别是，如果列表的值也是列表，<code>with_items</code>会将第一层嵌套的列表拉平，而<code>with_list</code>会将值作为一个整体返回。</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用with_items的示例</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"with_items"</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">with_items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">]</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">[a,</span> <span class="string">b]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回结果：</span></span><br><span class="line"><span class="comment"># ansible-playbook with_items_test.yml </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">PLAY</span> <span class="string">[test]</span> <span class="string">*****************************************************************************************************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="string">TASK</span> <span class="string">[Gathering</span> <span class="string">Facts]</span> <span class="string">******************************************************************************************************************************************************</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span></span><br><span class="line">  </span><br><span class="line"><span class="string">▽ASK</span> <span class="string">[with_items]</span> <span class="string">***********************************************************************************************************************************************************</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span> <span class="string">=&gt;</span> <span class="string">(item=1)</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"msg":</span> <span class="number">1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span> <span class="string">=&gt;</span> <span class="string">(item=2)</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"msg":</span> <span class="number">2</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span> <span class="string">=&gt;</span> <span class="string">(item=[3,</span> <span class="number">4</span><span class="string">])</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"msg":</span> <span class="string">[</span></span><br><span class="line">        <span class="number">3</span><span class="string">,</span></span><br><span class="line">        <span class="number">4</span></span><br><span class="line">    <span class="string">]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span> <span class="string">=&gt;</span> <span class="string">(item=a)</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"msg":</span> <span class="string">"a"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span> <span class="string">=&gt;</span> <span class="string">(item=b)</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"msg":</span> <span class="string">"b"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span> <span class="string">=&gt;</span> <span class="string">(item=c)</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"msg":</span> <span class="string">"c"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">PLAY</span> <span class="string">RECAP</span> <span class="string">******************************************************************************************************************************************************************</span></span><br><span class="line"><span class="attr">10.1.61.187                :</span> <span class="string">ok=2</span>    <span class="string">changed=0</span>    <span class="string">unreachable=0</span>    <span class="string">failed=0</span>    <span class="string">skipped=0</span>    <span class="string">rescued=0</span>    <span class="string">ignored=0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用with_list的示例</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"with_items"</span></span><br><span class="line">      <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span></span><br><span class="line">      <span class="attr">with_list:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">[1,</span> <span class="number">2</span><span class="string">]</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">[a,</span> <span class="string">b]</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 返回结果:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ansible-playbook with_list_ex.yml </span></span><br><span class="line"></span><br><span class="line"><span class="string">PLAY</span> <span class="string">[test]</span> <span class="string">*****************************************************************************************************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="string">TASK</span> <span class="string">[with_items]</span> <span class="string">***********************************************************************************************************************************************************</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span> <span class="string">=&gt;</span> <span class="string">(item=[1,</span> <span class="number">2</span><span class="string">])</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"msg":</span> <span class="string">[</span></span><br><span class="line">        <span class="number">1</span><span class="string">,</span></span><br><span class="line">        <span class="number">2</span></span><br><span class="line">    <span class="string">]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span> <span class="string">=&gt;</span> <span class="string">(item=['a',</span> <span class="string">'b'</span><span class="string">])</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"msg":</span> <span class="string">[</span></span><br><span class="line">        <span class="string">"a"</span><span class="string">,</span></span><br><span class="line">        <span class="string">"b"</span></span><br><span class="line">    <span class="string">]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">PLAY</span> <span class="string">RECAP</span> <span class="string">******************************************************************************************************************************************************************</span></span><br><span class="line"><span class="attr">10.1.61.187                :</span> <span class="string">ok=1</span>    <span class="string">changed=0</span>    <span class="string">unreachable=0</span>    <span class="string">failed=0</span>    <span class="string">skipped=0</span>    <span class="string">rescued=0</span>    <span class="string">ignored=0</span></span><br></pre></td></tr></table></figure><h3 id="3-with-flattened"><a href="#3-with-flattened" class="headerlink" title="3. with_flattened"></a>3. with_flattened</h3><p><code>with_flattened</code>与<code>with_items</code>类似，当处理复杂的多级列表嵌套时，会将所有的列表全部拉平：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - name: &quot;with_items&quot;</span><br><span class="line">      debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">      with_flattened:</span><br><span class="line">        - [1, 2,[3,4]]</span><br><span class="line">        - [a, b]</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook with_flattened_ex.yml </span><br><span class="line"></span><br><span class="line">PLAY [test] *****************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [with_items] ***********************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;1) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: 1</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;2) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: 2</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;3) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: 3</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;4) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: 4</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;a) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;a&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;b) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;b&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;c) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;c&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;1    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><h3 id="4-with-together"><a href="#4-with-together" class="headerlink" title="4. with_together"></a>4. with_together</h3><p><code>with_together</code>可以将两个列表中的元素对齐合并</p><p>示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">alpha:</span> <span class="string">[</span> <span class="string">'a'</span><span class="string">,'b']</span></span><br><span class="line">    <span class="attr">numbers:</span> <span class="string">[</span> <span class="number">1</span><span class="string">,2]</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">msg="&#123;&#123;</span> <span class="string">item.0</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">&#123;&#123;</span> <span class="string">item.1</span> <span class="string">&#125;&#125;"</span></span><br><span class="line">      <span class="attr">with_together:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; alpha &#125;&#125;</span>"</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; numbers &#125;&#125;</span>"</span></span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line"><span class="comment"># 输出的结果为：</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span> <span class="string">=&gt;</span> <span class="string">(item=['a',</span> <span class="number">1</span><span class="string">])</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"item":</span> <span class="string">[</span></span><br><span class="line">        <span class="string">"a"</span><span class="string">,</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">    <span class="string">],</span></span><br><span class="line">    <span class="attr">"msg":</span> <span class="string">"a and 1"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span> <span class="string">=&gt;</span> <span class="string">(item=['b',</span> <span class="number">2</span><span class="string">])</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"item":</span> <span class="string">[</span></span><br><span class="line">        <span class="string">"b"</span><span class="string">,</span></span><br><span class="line">        <span class="number">2</span></span><br><span class="line">    <span class="string">],</span></span><br><span class="line">    <span class="attr">"msg":</span> <span class="string">"b and 2"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">```</span> </span><br><span class="line"><span class="string">可以看到第一个列表中的第一个元素a与第二个列表中的第一个元素1合并输出，第一个列表中的b与第二个列表中的第二个元素2合并输出了</span></span><br><span class="line"></span><br><span class="line"><span class="string">上面的示例是基于两个列表的元素完全相同的结果，如果两个列表中的元素不同：</span></span><br><span class="line"></span><br><span class="line"><span class="string">```yaml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">alpha:</span> <span class="string">[</span> <span class="string">'a'</span><span class="string">,'b','c']</span></span><br><span class="line">    <span class="attr">numbers:</span> <span class="string">[</span> <span class="number">1</span><span class="string">,2]</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">msg="&#123;&#123;</span> <span class="string">item.0</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">&#123;&#123;</span> <span class="string">item.1</span> <span class="string">&#125;&#125;"</span></span><br><span class="line">      <span class="attr">with_together:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; alpha &#125;&#125;</span>"</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">"<span class="template-variable">&#123;&#123; numbers &#125;&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ansible-playbook with_together_ex.yml</span></span><br><span class="line"></span><br><span class="line"><span class="string">PLAY</span> <span class="string">[test]</span> <span class="string">*****************************************************************************************************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="string">TASK</span> <span class="string">[debug]</span> <span class="string">****************************************************************************************************************************************************************</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span> <span class="string">=&gt;</span> <span class="string">(item=['a',</span> <span class="number">1</span><span class="string">])</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"msg":</span> <span class="string">"a and 1"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span> <span class="string">=&gt;</span> <span class="string">(item=['b',</span> <span class="number">2</span><span class="string">])</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"msg":</span> <span class="string">"b and 2"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="attr">ok:</span> <span class="string">[10.1.61.187]</span> <span class="string">=&gt;</span> <span class="string">(item=['c',</span> <span class="string">None])</span> <span class="string">=&gt;</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">"msg":</span> <span class="string">"c and "</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">PLAY</span> <span class="string">RECAP</span> <span class="string">******************************************************************************************************************************************************************</span></span><br><span class="line"><span class="attr">10.1.61.187                :</span> <span class="string">ok=1</span>    <span class="string">changed=0</span>    <span class="string">unreachable=0</span>    <span class="string">failed=0</span>    <span class="string">skipped=0</span>    <span class="string">rescued=0</span>    <span class="string">ignored=0</span></span><br></pre></td></tr></table></figure><h3 id="5-with-nested"><a href="#5-with-nested" class="headerlink" title="5. with_nested"></a>5. with_nested</h3><p>嵌套循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tasks: </span><br><span class="line">  - name: debug loops</span><br><span class="line">    debug: msg&#x3D;&quot;name is &#123;&#123; item[0] &#125;&#125;  vaule is &#123;&#123; item[1] &#125;&#125; &quot;</span><br><span class="line">    with_nested:</span><br><span class="line">      - [&#39;alice&#39;,&#39;bob&#39;]</span><br><span class="line">      - [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</span><br></pre></td></tr></table></figure><p>item[0]是循环的第一个列表的值[‘alice’,’bob’]。item[1]是第二个列表的值；以上的执行输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook with_nested_ex.yml </span><br><span class="line"></span><br><span class="line">PLAY [with_nested test] ********************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [debug loops] *************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[&#39;alice&#39;, &#39;a&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;name is alice  vaule is a&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[&#39;alice&#39;, &#39;b&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;name is alice  vaule is b&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[&#39;alice&#39;, &#39;c&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;name is alice  vaule is c&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[&#39;bob&#39;, &#39;a&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;name is bob  vaule is a&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[&#39;bob&#39;, &#39;b&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;name is bob  vaule is b&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[&#39;bob&#39;, &#39;c&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;name is bob  vaule is c&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;1    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><p>下面是一个稍微有用点儿的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: false</span><br><span class="line">  tasks:</span><br><span class="line">    - file: </span><br><span class="line">        state: directory</span><br><span class="line">        path: &quot;&#x2F;data&#x2F;&#123;&#123; item[0] &#125;&#125;&#x2F;&#123;&#123; item[1] &#125;&#125;&quot;</span><br><span class="line">      with_nested:</span><br><span class="line">        - [test1,test2]</span><br><span class="line">        - [a,b,c]</span><br></pre></td></tr></table></figure><blockquote><p>with_cartesian与其功能完全一致</p></blockquote><h3 id="5-with-indexed-items"><a href="#5-with-indexed-items" class="headerlink" title="5. with_indexed_items"></a>5. with_indexed_items</h3><p>在循环处理列表时，为列表中的每一项添加索引（从0开始的数字索引）</p><p>简单示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: false</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">      with_indexed_items:</span><br><span class="line">        - test1</span><br><span class="line">        - test2</span><br><span class="line">        - test3</span><br></pre></td></tr></table></figure><p>执行之后，返回结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook with_indexed_items_ex.yml</span><br><span class="line"></span><br><span class="line">PLAY [test] ********************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [debug] *******************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[0, &#39;test1&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: [</span><br><span class="line">        0,</span><br><span class="line">        &quot;test1&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[1, &#39;test2&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: [</span><br><span class="line">        1,</span><br><span class="line">        &quot;test2&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[2, &#39;test3&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: [</span><br><span class="line">        2,</span><br><span class="line">        &quot;test3&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;1    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><p>所以我们可以使用with_indexed_items执行如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: false</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;index is &#123;&#123; item[0] &#125;&#125;, value is &#123;&#123; item[1] &#125;&#125;&quot;</span><br><span class="line">      with_indexed_items:</span><br><span class="line">        - test1</span><br><span class="line">        - test2</span><br><span class="line">        - test3</span><br></pre></td></tr></table></figure><p>下面再看一个稍微复杂的列表结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: false</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;index is &#123;&#123; item[0] &#125;&#125;, value is &#123;&#123; item[1] &#125;&#125;&quot;</span><br><span class="line">      with_indexed_items:</span><br><span class="line">        - test1</span><br><span class="line">        - [test2,test3]</span><br><span class="line">        - [test4,test5]</span><br></pre></td></tr></table></figure><p>这个时候，返回的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook with_indexed_items_ex2.yml</span><br><span class="line"></span><br><span class="line">PLAY [test] ********************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [debug] *******************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[0, &#39;test1&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;index is 0, value is test1&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[1, &#39;test2&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;index is 1, value is test2&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[2, &#39;test3&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;index is 2, value is test3&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[3, &#39;test4&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;index is 3, value is test4&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[4, &#39;test5&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;index is 4, value is test5&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;1    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><p>可以看到，其在处理更复杂列表的时候，会将列表拉平，类似于<code>with_items</code>。</p><p>与<code>with_items</code>一样，其也只会拉平第一层列表，如果存在多层列表嵌套，则更深的嵌套不会被拉平：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: false</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;index is &#123;&#123; item[0] &#125;&#125;, value is &#123;&#123; item[1] &#125;&#125;&quot;</span><br><span class="line">      with_indexed_items:</span><br><span class="line">        - test1</span><br><span class="line">        - [test2,[test3,test4]]</span><br></pre></td></tr></table></figure><p>此时的返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook with_indexed_items_ex3.yml </span><br><span class="line"></span><br><span class="line">PLAY [test] ********************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [debug] *******************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[0, &#39;test1&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;index is 0, value is test1&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[1, &#39;test2&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;index is 1, value is test2&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[2, [&#39;test3&#39;, &#39;test4&#39;]]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;index is 2, value is [&#39;test3&#39;, &#39;test4&#39;]&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;1    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><h3 id="6-with-sequence"><a href="#6-with-sequence" class="headerlink" title="6. with_sequence"></a>6. with_sequence</h3><p>用于返回一个数字序列</p><p>参数说明：</p><ul><li>start：指定起始值</li><li>end：指定结束值</li><li>stride：指定步长，即从start至end，每次增加的值</li><li>count：生成连续的数字序列，从1开始，到count的值结束</li><li>format：格式化输出,类似于linux命令行中的printf格式化输出</li></ul><blockquote><p>关于format参数，更多的格式化输出参数可参考：<a href="http://www.zsythink.net/archives/1411" target="_blank" rel="noopener">http://www.zsythink.net/archives/1411</a></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="comment"># create groups</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> </span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">      <span class="attr">with_items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">evens</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">odds</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># create some test users</span></span><br><span class="line">    <span class="comment"># [testuser00,testuser01,testuser02,...,testuser32]</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">user:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> </span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span> </span><br><span class="line">        <span class="attr">groups:</span> <span class="string">evens</span></span><br><span class="line">      <span class="attr">with_sequence:</span> </span><br><span class="line">        <span class="attr">start:</span> <span class="number">0</span> </span><br><span class="line">        <span class="attr">end:</span> <span class="number">32</span> </span><br><span class="line">        <span class="attr">stride:</span> <span class="number">4</span></span><br><span class="line">        <span class="string">format=testuser%02d</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment"># create a series of directories with even numbers for some reason</span></span><br><span class="line">    <span class="comment"># [4,6,8,10,...,16]</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">file:</span> </span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/var/stuff/&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> </span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">      <span class="attr">with_sequence:</span> </span><br><span class="line">          <span class="string">start=4</span> </span><br><span class="line">          <span class="string">end=16</span> </span><br><span class="line">          <span class="string">stride=2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># a simpler way to use the sequence plugin</span></span><br><span class="line">    <span class="comment"># create 4 groups</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">group&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> </span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">      <span class="attr">with_sequence:</span> <span class="string">count=4</span></span><br></pre></td></tr></table></figure><h3 id="7-with-random-choice"><a href="#7-with-random-choice" class="headerlink" title="7. with_random_choice"></a>7. with_random_choice</h3><p>用于从一个列表的多个值中随机返回一个值</p><p>下面的示例，一个列表当中有四个值，连续执行playbook，每次都随机返回一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: false</span><br><span class="line">  tasks:</span><br><span class="line">    - debug: msg&#x3D;&#123;&#123; item &#125;&#125;</span><br><span class="line">      with_random_choice:</span><br><span class="line">         - &quot;go through the door&quot;</span><br><span class="line">         - &quot;drink from the goblet&quot;</span><br><span class="line">         - &quot;press the red button&quot;</span><br><span class="line">         - &quot;do nothing&quot;</span><br></pre></td></tr></table></figure><h3 id="8-with-dict"><a href="#8-with-dict" class="headerlink" title="8. with_dict"></a>8. with_dict</h3><p>循环字典</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="comment"># 假如有如下变量内容：</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="attr">alice:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Alice</span> <span class="string">Appleworth</span></span><br><span class="line">        <span class="attr">telephone:</span> <span class="number">123</span><span class="number">-456</span><span class="number">-7890</span></span><br><span class="line">      <span class="attr">bob:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">Bob</span> <span class="string">Bananarama</span></span><br><span class="line">        <span class="attr">telephone:</span> <span class="number">987</span><span class="number">-654</span><span class="number">-3210</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 现在需要输出每个用户的用户名和手机号：</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Print</span> <span class="string">phone</span> <span class="string">records</span></span><br><span class="line">      <span class="attr">debug:</span> </span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"User <span class="template-variable">&#123;&#123; item.key &#125;&#125;</span> is <span class="template-variable">&#123;&#123; item.value.name &#125;&#125;</span> (<span class="template-variable">&#123;&#123; item.value.telephone &#125;&#125;</span>)"</span></span><br><span class="line">      <span class="attr">with_dict:</span> <span class="string">"<span class="template-variable">&#123;&#123; users &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook  with_dict_ex.yml </span><br><span class="line"></span><br><span class="line">PLAY [test] ******************************************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Print phone records] ***************************************************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;&#123;&#39;key&#39;: &#39;alice&#39;, &#39;value&#39;: &#123;&#39;name&#39;: &#39;Alice Appleworth&#39;, &#39;telephone&#39;: &#39;123-456-7890&#39;&#125;&#125;) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;User alice is Alice Appleworth (123-456-7890)&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;&#123;&#39;key&#39;: &#39;bob&#39;, &#39;value&#39;: &#123;&#39;name&#39;: &#39;Bob Bananarama&#39;, &#39;telephone&#39;: &#39;987-654-3210&#39;&#125;&#125;) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;User bob is Bob Bananarama (987-654-3210)&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;1    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><h3 id="9-with-subelement"><a href="#9-with-subelement" class="headerlink" title="9. with_subelement"></a>9. with_subelement</h3><p>with_subelement简单来讲，就是在一个复杂的列表当中，可以对这个列表变量的子元素进行遍历</p><p>下面是一个简单的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    users:</span><br><span class="line">      - name: bob</span><br><span class="line">        hobby: </span><br><span class="line">          - Games</span><br><span class="line">          - Sports</span><br><span class="line">      - name: alice</span><br><span class="line">        hobby:</span><br><span class="line">          - Music</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">      with_subelement:</span><br><span class="line">        - &quot;&#123;&#123; users &#125;&#125;&quot;</span><br><span class="line">        - hobby</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># ansible-playbook with_subelement_ex.yml </span><br><span class="line"></span><br><span class="line">PLAY [test] *****************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [debug] ****************************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[&#123;&#39;name&#39;: &#39;bob&#39;&#125;, &#39;Games&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;bob&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Games&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[&#123;&#39;name&#39;: &#39;bob&#39;&#125;, &#39;Sports&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;bob&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Sports&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;[&#123;&#39;name&#39;: &#39;alice&#39;&#125;, &#39;Music&#39;]) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;alice&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Music&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;1    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><p>可以看到，其按照我们指定的变量users的子项hobby进行了组合输出。with_elementes将hobby子元素的每一项作为一个整体，将其他子元素作为整体，然后组合在一起。</p><p>假如现在需要遍历一个用户列表，并创建每个用户，而且还需要为每个用户推送特定的SSH公钥以用于实现远程登录。同时为某一个用户创建独立的mysql登录帐号并为其授权。</p><p>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: false</span><br><span class="line">  vars:</span><br><span class="line">    users:</span><br><span class="line">      - name: alice</span><br><span class="line">        authorized:</span><br><span class="line">          - files&#x2F;keys&#x2F;master1.id_rsa.pub</span><br><span class="line">          - files&#x2F;keys&#x2F;master2.id_rsa.pub</span><br><span class="line">        mysql:</span><br><span class="line">            password: mysql-password</span><br><span class="line">            hosts:</span><br><span class="line">              - &quot;%&quot;</span><br><span class="line">              - &quot;127.0.0.1&quot;</span><br><span class="line">              - &quot;::1&quot;</span><br><span class="line">              - &quot;localhost&quot;</span><br><span class="line">            privs:</span><br><span class="line">              - &quot;*.*:SELECT&quot;</span><br><span class="line">              - &quot;DB1.*:ALL&quot;</span><br><span class="line">      - name: bob</span><br><span class="line">        authorized:</span><br><span class="line">          - files&#x2F;keys&#x2F;master3.id_rsa.pub</span><br><span class="line">        mysql:</span><br><span class="line">            password: other-mysql-password</span><br><span class="line">            hosts:</span><br><span class="line">              - &quot;db1&quot;</span><br><span class="line">            privs:</span><br><span class="line">              - &quot;*.*:SELECT&quot;</span><br><span class="line">              - &quot;DB2.*:ALL&quot;</span><br><span class="line">  tasks:</span><br><span class="line">    - user: </span><br><span class="line">        name: &quot;&#123;&#123; item.name &#125;&#125;&quot; </span><br><span class="line">        state: present </span><br><span class="line">        generate_ssh_key: yes</span><br><span class="line">      with_items: &quot;&#123;&#123; users &#125;&#125;&quot;</span><br><span class="line">    </span><br><span class="line">    - authorized_key: </span><br><span class="line">        user: &quot;&#123;&#123; item.0.name &#125;&#125;&quot; </span><br><span class="line">        key: &quot;&#123;&#123; lookup(&#39;file&#39;, item.1) &#125;&#125;&quot;</span><br><span class="line">      with_subelements:</span><br><span class="line">        - &quot;&#123;&#123; users &#125;&#125;&quot;</span><br><span class="line">        - authorized</span><br><span class="line"></span><br><span class="line">    - name: Setup MySQL users</span><br><span class="line">      mysql_user: </span><br><span class="line">        name: &quot;&#123;&#123; item.0.name &#125;&#125;&quot; </span><br><span class="line">        password: &quot;&#123;&#123; item.0.mysql.password &#125;&#125;&quot;&quot; </span><br><span class="line">        host: &quot;&#123;&#123; item.1 &#125;&#125; priv&#x3D;&#123;&#123; item.0.mysql.privs | join(&#39;&#x2F;&#39;) &#125;&#125;&quot;</span><br><span class="line">      with_subelements:</span><br><span class="line">        - &quot;&#123;&#123; users &#125;&quot;</span><br><span class="line">        - mysql.hosts</span><br></pre></td></tr></table></figure><h3 id="10-with-file"><a href="#10-with-file" class="headerlink" title="10. with_file"></a>10. with_file</h3><p>用于循环主控端的文件列表，获取文件中的内容</p><blockquote><p>注意： 循环的是主控端的文件列表，不是被控端的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: false</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &#123;&#123; item &#125;&#125;</span><br><span class="line">      with_file:</span><br><span class="line">        - &#x2F;etc&#x2F;ansible&#x2F;test1.yml</span><br><span class="line">        - &#x2F;etc&#x2F;ansible&#x2F;test2.yml</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook with_file_ex.yml </span><br><span class="line"></span><br><span class="line">PLAY [test] ********************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [debug] *******************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;content: test1.yaml) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;content: test1.yaml&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; (item&#x3D;content: test2.yml) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;content: test2.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;1    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><h3 id="11-with-fileglob"><a href="#11-with-fileglob" class="headerlink" title="11. with_fileglob"></a>11. with_fileglob</h3><p>上面<code>with_file</code>用于获取文件的内容，而<code>with_fileglob</code>则用于匹配文件名称。可以通过该关键字，在指定的目录中匹配符合模式的文件名。与<code>with_file</code>相同的是，<strong><code>with_fileglob</code>操作的文件也是主控端的文件而非被控端的文件</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Make key directory     </span><br><span class="line">      file: </span><br><span class="line">        path: &#x2F;root&#x2F;.sshkeys </span><br><span class="line">        state: directory </span><br><span class="line">        mode: 0700 </span><br><span class="line">        owner: root </span><br><span class="line">        group: root </span><br><span class="line">        </span><br><span class="line">    - name: Upload public keys     </span><br><span class="line">      copy: </span><br><span class="line">        src: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">        dest: &#x2F;root&#x2F;.sshkeys</span><br><span class="line">        mode: 0600 </span><br><span class="line">        owner: root </span><br><span class="line">        group: root  </span><br><span class="line">      with_fileglob:</span><br><span class="line">        - &#x2F;root&#x2F;.ssh&#x2F;*.pub </span><br><span class="line">        </span><br><span class="line">    - name: Assemble keys into authorized_keys file     </span><br><span class="line">      assemble: </span><br><span class="line">        src: &#x2F;root&#x2F;.sshkeys </span><br><span class="line">        dest: &#x2F;root&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">        mode: 0600 </span><br><span class="line">        owner: root </span><br><span class="line">        group: root</span><br><span class="line">&#96;&#96;&#96;   </span><br><span class="line"></span><br><span class="line">### 12. with_lines</span><br><span class="line"></span><br><span class="line">with_lines循环结构会让你在控制主机上执行任意命令，并对命令的输出进行逐行迭代。</span><br><span class="line"></span><br><span class="line">假设我们有一个文件test.txt包含如下行：</span><br></pre></td></tr></table></figure><p>Breeze Yan<br>Bernie Yang<br>jerry Qing</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们可以通过如下方法进行逐行输出：</span><br></pre></td></tr></table></figure><ul><li>name: print all names<br>debug: msg=”“<br>with_lines:<ul><li>cat test.txt<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 13. do-Until循环</span><br></pre></td></tr></table></figure></li></ul></li><li>action: shell /usr/bin/foo<br>register: result<br>until: result.stdout.find(“all systems go”) != -1<br>retries: 5<br>delay: 10<pre><code>重复执行shell模块，当shell模块执行的命令输出内容包含&quot;all systems go&quot;的时候停止。重试5次，延迟时间10秒。retries默认值为3，delay默认值为5。任务的返回值为最后一次循环的返回结果。</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15. Ansible Playbook loop循环语句</title>
      <link href="/2020/05/20/15.%20Ansible%20Playbook%20loop%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
      <url>/2020/05/20/15.%20Ansible%20Playbook%20loop%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="15-Ansible-Playbook-loop循环语句"><a href="#15-Ansible-Playbook-loop循环语句" class="headerlink" title="15. Ansible Playbook loop循环语句"></a>15. Ansible Playbook loop循环语句</h1><p>[toc]</p><h2 id="loop关键字说明"><a href="#loop关键字说明" class="headerlink" title="loop关键字说明"></a>loop关键字说明</h2><p>在ansible 2.5及以前的版本当中，所有的循环都是使用<code>with_X</code>风格。但是从2.6版本开始，官方开始推荐使用<code>loop</code>关键字来代替<code>with_X</code>风格的关键字。</p><p>在playbook中使用循环，直接使用loop关键字即可。</p><p>如下示例，启动httpd和postfix服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - name: postfix and httpd are running</span><br><span class="line">    service:</span><br><span class="line">      name: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">      state: started</span><br><span class="line">    loop:</span><br><span class="line">      - postfix</span><br><span class="line">      - httpd</span><br></pre></td></tr></table></figure><p>那么在这个示例当中，其实就是使用loop代替了<code>with_list</code>循环。</p><p>事实上，我们可以使用loop关键字搭配一些过滤器来替换更多的、更复杂的<code>with_X</code>循环。</p><h2 id="with-list"><a href="#with-list" class="headerlink" title="with_list"></a>with_list</h2><p>loop可以替代with_list，当处理嵌套列表时，列表不会被拉平</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    testlist:</span><br><span class="line">      - a</span><br><span class="line">      - [b,c]</span><br><span class="line">      - d</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">      loop: &quot;&#123;&#123; testlist &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="with-flattened"><a href="#with-flattened" class="headerlink" title="with_flattened"></a>with_flattened</h2><p>将所有嵌套都拉平</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    testlist:</span><br><span class="line">      - a</span><br><span class="line">      - [b,c]</span><br><span class="line">      - d</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">      loop: &quot;&#123;&#123; testlist| flatten &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="with-items"><a href="#with-items" class="headerlink" title="with_items"></a>with_items</h2><p>只拉平第一层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    testlist:</span><br><span class="line">      - a</span><br><span class="line">      - [b,c]</span><br><span class="line">      - d</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">      loop: &quot;&#123;&#123; testlist| flatten(levels&#x3D;1) &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="with-indexed-items"><a href="#with-indexed-items" class="headerlink" title="with_indexed_items"></a>with_indexed_items</h2><p>通过flatten过滤器（加参数），再配合<code>loop_control</code>关键字，可以替代<code>with_indexed_items</code>，当处理多层嵌套的列表时，只有列表中的第一层会被拉平</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    testlist:</span><br><span class="line">      - a</span><br><span class="line">      - [b,c]</span><br><span class="line">      - d</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; index &#125;&#125;: &#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">      loop: &quot;&#123;&#123; testlist | flatten(levels&#x3D;1) &#125;&#125;&quot;</span><br><span class="line">      loop_control:</span><br><span class="line">        index_var: index</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>loop_control</code>： 用于控制循环的行为，比如在循环时获取到元素的索引</li><li><code>index_var</code>：<code>loop_control</code>的选项，让我们指定一个变量，<code>loop_control</code>会将列表元素的索引值存放到这个指定的变量中</li></ul><h2 id="with-together"><a href="#with-together" class="headerlink" title="with_together"></a>with_together</h2><p><code>zip_longest</code>过滤器配合list过滤器，可以替代<code>with_together</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars: </span><br><span class="line">    testlist1: [a,b]</span><br><span class="line">    testlist2: [1,2,3]</span><br><span class="line">    testlist3: [A,B,C,D]</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item.0 &#125;&#125; -- &#123;&#123; item.1 &#125;&#125; -- &#123;&#123; item.2 &#125;&#125;&quot;</span><br><span class="line">      #with_together:</span><br><span class="line">      #  - &quot;&#123;&#123; testlist1 &#125;&#125;&quot;</span><br><span class="line">      #  - &quot;&#123;&#123; testlist2 &#125;&#125;&quot;</span><br><span class="line">      #  - &quot;&#123;&#123; testlist3 &#125;&#125;&quot;</span><br><span class="line">    - debug:</span><br><span class="line">        # [a,1,A],[b,2,B],[&#39;&#39;,3,C],[&#39;&#39;,&#39;&#39;,D]</span><br><span class="line">        # [a,1,A],[b,2,B]</span><br><span class="line">        msg: &quot;&#123;&#123; item.0 &#125;&#125; -- &#123;&#123; item.1 &#125;&#125; -- &#123;&#123; item.2 &#125;&#125;&quot;</span><br><span class="line">      loop: &quot;&#123;&#123; testlist1 | zip_longest(testlist2,testlist3) | list&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>当多个列表使用<code>with_together</code>进行对齐合并时，如果多个列表的长度不同，则使用最长的列表进行对齐，由于短列表中的元素数量不够，所以使用空值与长列表中的元素进行对齐，<code>zip_longest</code>过滤器也会像<code>with_together</code>一样，对列表进行组合，但是还需要借助list过滤器，将组合后的数据列表化。</p><p>在使用zip_longest过滤器代替with_together关键字时，默认也是使用空值与长列表中的元素进行对齐，但是也可以指定其他的字符串代替空值，如下示例即使用”NONE”代替空值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- debug:</span><br><span class="line">    msg: &quot;&#123;&#123; item.0 &#125;&#125; - &#123;&#123; item.1 &#125;&#125; - &#123;&#123; item.2 &#125;&#125;&quot;</span><br><span class="line">  loop: &#123;&#123; testlist1 | zip_longest(testlist2,testlist3,filevalue&#x3D;&#39;NONE&#39;) | list &#125;&#125;</span><br></pre></td></tr></table></figure><p>zip_longest默认使用最长的列表长度进行对齐，当有多个列表的长度不同时，如果希望使用最短的列表对齐，则可以使用zip过滤器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- debug:</span><br><span class="line">    msg: &quot;&#123;&#123; item.0 &#125;&#125; - &#123;&#123; item.1 &#125;&#125; - &#123;&#123; item.2 &#125;&#125;&quot;</span><br><span class="line">  loop: &#123;&#123; testlist1 | zip(testlist2,testlist3) | list &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="with-nested-with-cartesian"><a href="#with-nested-with-cartesian" class="headerlink" title="with_nested/with_cartesian"></a>with_nested/with_cartesian</h2><p>可使用product过滤器配合list过滤器以替代<code>with_nested</code>或者<code>with_cartesian</code>。product过滤器也是需要将组合后的数据进行列表化，所以需要与list过滤器配合使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars: </span><br><span class="line">    testlist1: [a,b,c]</span><br><span class="line">    testlist2: [1,2,3,4]</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123;item.0&#125;&#125; --- &#123; item.1&#125;&quot;</span><br><span class="line">      loop: &#123;&#123; testlist1 | product(testlist2) | list&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="with-sequence"><a href="#with-sequence" class="headerlink" title="with_sequence"></a>with_sequence</h2><p>使用range过滤器配合list过滤器可以替代with_sequence：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">      loop: &quot;&#123;&#123; range(0,6,2) | list &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>上例中表示生成数字，从0开始，到6结束，步长为2。但是需要说明的是，range函数的操作不包含结束范围，也就是说上面的循环只会生成0，2，4三个数字，而不包含6。</p><p>另外，with_sequence还有格式化的功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- debug:</span><br><span class="line">    msg: &quot;&#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">  with_sequence: start&#x3D;2 end&#x3D;6 stride&#x3D;2 format&#x3D;&quot;number is %0.2f&quot;</span><br></pre></td></tr></table></figure><p>可使用format配合loop实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- debug:</span><br><span class="line">    msg: &quot;&#123;&#123; &#39;number is %0.2f&#39; |format(item) &#125;&#125;&quot;</span><br><span class="line">  loop: &quot;&#123;&#123;range(2,7,2) |list&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="with-random-choice"><a href="#with-random-choice" class="headerlink" title="with_random_choice"></a>with_random_choice</h2><p>使用random函数可以替代with_random_choice，由于random函数是随机取出列表中的一个值，并不涉及循环操作，所以并不使用loop关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    testlist: [a,b,c]</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; testlist | random &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="with-dict"><a href="#with-dict" class="headerlink" title="with_dict"></a>with_dict</h2><p>可使用loop配合dict2items过滤器实现with_dict功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    users:</span><br><span class="line">      alice: female</span><br><span class="line">      bob: male</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item.key &#125;&#125; is &#123;&#123; item.value&#125;&#125;&quot;</span><br><span class="line">      loop: &quot;&#123;&#123;users | dict2items &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="with-subelements"><a href="#with-subelements" class="headerlink" title="with_subelements"></a>with_subelements</h2><p>可使用loop配合subelements过滤器替代with_subelements：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    users:</span><br><span class="line">      - name: bob</span><br><span class="line">        gender: male</span><br><span class="line">        hobby:</span><br><span class="line">          - Skateboard</span><br><span class="line">          - VideoGame</span><br><span class="line">      - name: alice</span><br><span class="line">        gender: female</span><br><span class="line">        hobby:</span><br><span class="line">          - Music</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item.0.name &#125;&#125;&#39;s hobby is &#123;&#123; item.1&#125;&#125;&quot;</span><br><span class="line">      with_subelements:</span><br><span class="line">        - &quot;&#123;&#123; users &#125;&#125;&quot;</span><br><span class="line">        - hobby</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; item.0.name &#125;&#125;&#39;s hobby is &#123;&#123; item.1&#125;&#125;&quot;</span><br><span class="line">      loop: &quot;&#123;&#123; users | subelements(&#39;hobby&#39;) &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="在循环语句中注册变量"><a href="#在循环语句中注册变量" class="headerlink" title="在循环语句中注册变量"></a>在循环语句中注册变量</h2><p>下面是一个register的变量在循环中使用的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># cat register_loop.yml </span><br><span class="line">- name: registered variable usage as a loop list</span><br><span class="line">  hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">      - name: ensure &#x2F;mnt&#x2F;bkspool exists</span><br><span class="line">        file:</span><br><span class="line">          path: &#x2F;mnt&#x2F;bkspool</span><br><span class="line">          state: directory</span><br><span class="line">          </span><br><span class="line">      - name: retrieve the list of home directories</span><br><span class="line">        command: ls &#x2F;home</span><br><span class="line">        register: home_dirs</span><br><span class="line">        </span><br><span class="line">      - name: Show home_dirs results</span><br><span class="line">        debug:</span><br><span class="line">          var: home_dirs.stdout_lines</span><br><span class="line">          </span><br><span class="line">      - name: add home dirs to the backup spooler</span><br><span class="line">        file: </span><br><span class="line">          path: &#x2F;mnt&#x2F;bkspool&#x2F;&#123;&#123; item &#125;&#125;</span><br><span class="line">          src: &#x2F;home&#x2F;&#123;&#123; item &#125;&#125;</span><br><span class="line">          state: link</span><br><span class="line">          force: yes</span><br><span class="line">        loop: &quot;&#123;&#123; home_dirs.stdout_lines &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>在循环语句中注册变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- name: Loop Register test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Looping Echo Task</span><br><span class="line">      shell: &quot;echo this is my item: &#123;&#123; item &#125;&#125;&quot;</span><br><span class="line">      loop:</span><br><span class="line">        - one</span><br><span class="line">        - two</span><br><span class="line">      register: echo_results</span><br><span class="line">      </span><br><span class="line">    - name: Show echo_results variable</span><br><span class="line">      debug:</span><br><span class="line">        var: echo_results</span><br></pre></td></tr></table></figure><p>执行语句，可以看到变量的返回结果为一个字典列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">ok: [10.1.61.187] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;echo_results&quot;: &#123;</span><br><span class="line">        &quot;changed&quot;: true,</span><br><span class="line">        &quot;msg&quot;: &quot;All items completed&quot;,</span><br><span class="line">        &quot;results&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;ansible_loop_var&quot;: &quot;item&quot;,</span><br><span class="line">                &quot;changed&quot;: true,</span><br><span class="line">                &quot;cmd&quot;: &quot;echo this is my item: one&quot;,</span><br><span class="line">                &quot;delta&quot;: &quot;0:00:00.004905&quot;,</span><br><span class="line">                &quot;end&quot;: &quot;2019-06-10 00:23:51.814151&quot;,</span><br><span class="line">                &quot;failed&quot;: false,</span><br><span class="line">                &quot;invocation&quot;: &#123;</span><br><span class="line">                    &quot;module_args&quot;: &#123;</span><br><span class="line">                        &quot;_raw_params&quot;: &quot;echo this is my item: one&quot;,</span><br><span class="line">                        &quot;_uses_shell&quot;: true,</span><br><span class="line">                        &quot;argv&quot;: null,</span><br><span class="line">                        &quot;chdir&quot;: null,</span><br><span class="line">                        &quot;creates&quot;: null,</span><br><span class="line">                        &quot;executable&quot;: null,</span><br><span class="line">                        &quot;removes&quot;: null,</span><br><span class="line">                        &quot;stdin&quot;: null,</span><br><span class="line">                        &quot;stdin_add_newline&quot;: true,</span><br><span class="line">                        &quot;strip_empty_ends&quot;: true,</span><br><span class="line">                        &quot;warn&quot;: true</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;item&quot;: &quot;one&quot;,</span><br><span class="line">                &quot;rc&quot;: 0,</span><br><span class="line">                &quot;start&quot;: &quot;2019-06-10 00:23:51.809246&quot;,</span><br><span class="line">                &quot;stderr&quot;: &quot;&quot;,</span><br><span class="line">                &quot;stderr_lines&quot;: [],</span><br><span class="line">                &quot;stdout&quot;: &quot;this is my item: one&quot;,</span><br><span class="line">                &quot;stdout_lines&quot;: [</span><br><span class="line">                    &quot;this is my item: one&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;ansible_loop_var&quot;: &quot;item&quot;,</span><br><span class="line">                &quot;changed&quot;: true,</span><br><span class="line">                &quot;cmd&quot;: &quot;echo this is my item: two&quot;,</span><br><span class="line">                &quot;delta&quot;: &quot;0:00:00.004736&quot;,</span><br><span class="line">                &quot;end&quot;: &quot;2019-06-10 00:23:52.008981&quot;,</span><br><span class="line">                &quot;failed&quot;: false,</span><br><span class="line">                &quot;invocation&quot;: &#123;</span><br><span class="line">                    &quot;module_args&quot;: &#123;</span><br><span class="line">                        &quot;_raw_params&quot;: &quot;echo this is my item: two&quot;,</span><br><span class="line">                        &quot;_uses_shell&quot;: true,</span><br><span class="line">                        &quot;argv&quot;: null,</span><br><span class="line">                        &quot;chdir&quot;: null,</span><br><span class="line">                        &quot;creates&quot;: null,</span><br><span class="line">                        &quot;executable&quot;: null,</span><br><span class="line">                        &quot;removes&quot;: null,</span><br><span class="line">                        &quot;stdin&quot;: null,</span><br><span class="line">                        &quot;stdin_add_newline&quot;: true,</span><br><span class="line">                        &quot;strip_empty_ends&quot;: true,</span><br><span class="line">                        &quot;warn&quot;: true</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;item&quot;: &quot;two&quot;,</span><br><span class="line">                &quot;rc&quot;: 0,</span><br><span class="line">                &quot;start&quot;: &quot;2019-06-10 00:23:52.004245&quot;,</span><br><span class="line">                &quot;stderr&quot;: &quot;&quot;,</span><br><span class="line">                &quot;stderr_lines&quot;: [],</span><br><span class="line">                &quot;stdout&quot;: &quot;this is my item: two&quot;,</span><br><span class="line">                &quot;stdout_lines&quot;: [</span><br><span class="line">                    &quot;this is my item: two&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16. Ansible Playbook条件语句</title>
      <link href="/2020/05/20/16.%20Ansible%20Playbook%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
      <url>/2020/05/20/16.%20Ansible%20Playbook%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="16-Ansible-Playbook条件语句"><a href="#16-Ansible-Playbook条件语句" class="headerlink" title="16. Ansible Playbook条件语句"></a>16. Ansible Playbook条件语句</h1><p>[toc]</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在有的时候play的结果依赖于变量、fact或者是前一个任务的执行结果，或者有的时候，我们会基于上一个task执行返回的结果而决定如何执行后续的task。这个时候就需要用到条件判断。</p><p>条件语句在Ansible中的使用场景：</p><ul><li>在目标主机上定义了一个硬限制，比如目标主机的最小内存必须达到多少，才能执行该task</li><li>捕获一个命令的输出，根据命令输出结果的不同以触发不同的task</li><li>根据不同目标主机的facts，以定义不同的task</li><li>根据目标机的cpu的大小，以调优相关应用性能</li><li>用于判断某个服务的配置文件是否发生变更，以确定是否需要重启服务</li></ul><h2 id="when关键字"><a href="#when关键字" class="headerlink" title="when关键字"></a>when关键字</h2><h3 id="1-when基本使用"><a href="#1-when基本使用" class="headerlink" title="1. when基本使用"></a>1. when基本使用</h3><p>在ansible中，使用条件判断的关键字就是when。 </p><p>如在安装包的时候，需要指定主机的操作系统类型，或者是当操作系统的硬盘满了之后，需要清空文件等,可以使用when语句来做判断 。when关键字后面跟着的是python的表达式,在表达式中你能够使用任何的变量或者fact,当表达式的结果返回的是false,便会跳过本次的任务</p><p>下面是一个基本的用法示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: Install vim</span><br><span class="line">  hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Install VIM via yum</span><br><span class="line">      yum: </span><br><span class="line">        name: vim-enhanced </span><br><span class="line">        state: installed</span><br><span class="line">      when: ansible_os_family &#x3D;&#x3D;&quot;RedHat&quot;</span><br><span class="line">      </span><br><span class="line">    - name: Install VIM via apt</span><br><span class="line">      apt: </span><br><span class="line">        name: vim </span><br><span class="line">        state: installed</span><br><span class="line">      when: ansible_os_family &#x3D;&#x3D;&quot;Debian&quot;</span><br><span class="line">      </span><br><span class="line">    - name: Unexpected OS family</span><br><span class="line">      debug: msg&#x3D;&quot;OS Family &#123;&#123; ansible_os_family &#125;&#125; is not supported&quot;</span><br><span class="line">      when: not ansible_os_family &#x3D;&#x3D;&quot;RedHat&quot; or ansible_os_family &#x3D;&#x3D;&quot;Debian&quot;</span><br></pre></td></tr></table></figure><h3 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2. 比较运算符"></a>2. 比较运算符</h3><p>在上面的示例当中，我们使用了”==”的比较运算符，在ansible中，还支持如下比较运算符：</p><ul><li><code>==</code>：比较两个对象是否相等，相等则返回真。可用于比较字符串和数字</li><li><code>!=</code>：比较两个对象是否不等，不等则为真。</li><li><code>&gt;</code>：比较两个对象的大小，左边的值大于右边的值，则为真</li><li><code>&lt;</code>：比较两个对象的大小，左边的值小于右边的值，则为真</li><li><code>&gt;=</code>：比较两个对象的大小，左边的值大于等于右边的值，则为真</li><li><code>&lt;=</code>：比较两个对象的大小，左边的值小于等于右边的值，则为真</li></ul><p>下面是一些简单的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">when: ansible_machine &#x3D;&#x3D; &quot;x86_64&quot; </span><br><span class="line"></span><br><span class="line">when: max_memory &lt;&#x3D; 512</span><br></pre></td></tr></table></figure><h3 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3. 逻辑运算符"></a>3. 逻辑运算符</h3><p>在Ansible中，除了比较运算符，还支持逻辑运算符：</p><ul><li>and：逻辑与，当左边和右边两个表达式同时为真，则返回真</li><li>or：逻辑或，当左右和右边两个表达式任意一个为真，则返回真</li><li>not：逻辑否，对表达式取反</li><li>()：当一组表达式组合在一起，形成一个更大的表达式，组合内的所有表达式都是逻辑与的关系</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 逻辑或</span><br><span class="line">when: ansible_distribution &#x3D;&#x3D; &quot;RedHat&quot; or ansible_distribution &#x3D;&#x3D; &quot;Fedora&quot;</span><br><span class="line"></span><br><span class="line"># 逻辑与</span><br><span class="line">when: ansible_distribution_version &#x3D;&#x3D; &quot;7.5&quot; and ansible_kernel &#x3D;&#x3D; &quot;3.10.0-327.el7.x86_64&quot;</span><br><span class="line"></span><br><span class="line">when:</span><br><span class="line">  - ansible_distribution_version &#x3D;&#x3D; &quot;7.5&quot;</span><br><span class="line">  - ansible_kernel &#x3D;&#x3D; &quot;3.10.0-327.el7.x86_64&quot;</span><br><span class="line">  </span><br><span class="line"># 组合</span><br><span class="line"></span><br><span class="line">when: &#x3D;&gt; </span><br><span class="line">  ( ansible_distribution &#x3D;&#x3D; &quot;RedHat&quot; and ansible_distribution_major_version &#x3D;&#x3D; &quot;7&quot; )</span><br><span class="line">  or</span><br><span class="line">  ( ansible_distribution &#x3D;&#x3D; &quot;Fedora&quot; and ansible_distribution_major_version &#x3D;&#x3D; &quot;28&quot;)</span><br></pre></td></tr></table></figure><p>一个完整的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 判断register注册变量的返回结果</span><br><span class="line">- name: restart httpd if postfix is running</span><br><span class="line">  hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">    - name: get postfix server status</span><br><span class="line">      command: &#x2F;usr&#x2F;bin&#x2F;systemctl is-active postfix</span><br><span class="line">      ignore_errors: yes</span><br><span class="line">      register: result</span><br><span class="line">      </span><br><span class="line">    - name: restart apache httpd based on postfix status</span><br><span class="line">      service:</span><br><span class="line">        name: httpd</span><br><span class="line">        state: restarted</span><br><span class="line">      when: result.rc &#x3D;&#x3D; 0</span><br></pre></td></tr></table></figure><h2 id="条件判断与tests"><a href="#条件判断与tests" class="headerlink" title="条件判断与tests"></a>条件判断与tests</h2><p>在shell当中，我们可使用test命令来进行一些常用的判断操作，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 判断&#x2F;test文件是否存在</span><br><span class="line">test -e &#x2F;test</span><br><span class="line"></span><br><span class="line"># 判断&#x2F;testdir是否存在且为一个目录</span><br><span class="line">test -d &#x2F;testdir</span><br></pre></td></tr></table></figure><p>事实上，在ansible中也有类似的用法，只不过ansible没有使用linux的test命令，而是jinja2模板的tests。</p><p>下面是一个简单示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 通过条件语句判断testpath的路径是否存在</span><br><span class="line">- hosts: test</span><br><span class="line">  vars:</span><br><span class="line">    testpath: &#x2F;testdir</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;file exist&quot;</span><br><span class="line">      when: testpath is exists</span><br></pre></td></tr></table></figure><p>上面的示例中，我们使用了<code>is exists</code>用于路径存在时返回真，也可以使用<code>is not exists</code>用于路径不存在时返回真。也可以在整个条件表达式的前面使用not以取反：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  vars:</span><br><span class="line">    testpath: &#x2F;testdir1</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;file not exist&quot;</span><br><span class="line">      when: not testpath is exists</span><br></pre></td></tr></table></figure><p>在ansible中，除了能够使用exists这种tests之外，还有一些别的tests。接下来我们详细说一说。</p><h3 id="判断变量"><a href="#判断变量" class="headerlink" title="判断变量"></a>判断变量</h3><ul><li>defined：判断变量是否已定义，已定义则返回真</li><li>undefined：判断变量是否未定义，未定义则返回真</li><li>none：判断变量的值是否为空，如果变量已定义且值为空，则返回真</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    testvar: &quot;test&quot;</span><br><span class="line">    testvar1:</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;testvar is defined&quot;</span><br><span class="line">      when: testvar is defined</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;testvar2 is undefined&quot;</span><br><span class="line">      when: testvar2 is undefined</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;testvar1 is none&quot;</span><br><span class="line">      when: testvar1 is none</span><br></pre></td></tr></table></figure><h3 id="判断执行结果"><a href="#判断执行结果" class="headerlink" title="判断执行结果"></a>判断执行结果</h3><ul><li>sucess或succeeded：通过任务执行结果返回的信息判断任务的执行状态，任务执行成功则返回true</li><li>failure或failed：任务执行失败则返回true</li><li>change或changed：任务执行状态为changed则返回true</li><li>skip或skipped：任务被跳过则返回true</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    doshell: true</span><br><span class="line">  tasks:</span><br><span class="line">    - shell: &#39;cat &#x2F;testdir&#x2F;aaa&#39;</span><br><span class="line">      when: doshell</span><br><span class="line">      register: result</span><br><span class="line">      ignore_errors: true</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;success&quot;</span><br><span class="line">      when: result is success</span><br><span class="line">      </span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;failed&quot;</span><br><span class="line">      when: result is failure</span><br><span class="line">      </span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;changed&quot;</span><br><span class="line">      when: result is change</span><br><span class="line">      </span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;skip&quot;</span><br><span class="line">      when: result is skip</span><br></pre></td></tr></table></figure><h3 id="判断路径"><a href="#判断路径" class="headerlink" title="判断路径"></a>判断路径</h3><ul><li>file：判断指定路径是否为一个文件，是则为真</li><li>directory：判断指定路径是否为一个目录，是则为真</li><li>link：判断指定路径是否为一个软链接，是则为真</li><li>mount：判断指定路径是否为一个挂载点，是则为真</li><li>exists：判断指定路径是否存在，存在则为真</li></ul><blockquote><p>特别注意：关于路径的所有判断均是判断主控端上的路径，而非被控端上的路径</p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    testpath1: &quot;&#x2F;testdir&#x2F;test&quot;</span><br><span class="line">    testpath2: &quot;&#x2F;testdir&quot;</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;file&quot;</span><br><span class="line">      when: testpath1 is file</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;directory&quot;</span><br><span class="line">      when: testpath2 is directory</span><br></pre></td></tr></table></figure><h3 id="判断字符串"><a href="#判断字符串" class="headerlink" title="判断字符串"></a>判断字符串</h3><ul><li>lower：判断字符串中的所有字母是否都是小写，是则为真</li><li>upper：判断字符串中的所有字母是否都是大写，是则为真</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars: </span><br><span class="line">    str1: &quot;abc&quot;</span><br><span class="line">    str2: &quot;ABC&quot;</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;str1 is all lowercase&quot;</span><br><span class="line">      when: str1 is lower</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;str2 is all uppercase&quot;</span><br><span class="line">      when: str2 is upper</span><br></pre></td></tr></table></figure><h3 id="判断整除"><a href="#判断整除" class="headerlink" title="判断整除"></a>判断整除</h3><ul><li>even：判断数值是否为偶数，是则为真</li><li>odd：判断数值是否为奇数，是则为真</li><li>divisibleby(num)：判断是否可以整除指定的数值，是则为真</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars: </span><br><span class="line">    num1: 6</span><br><span class="line">    num2: 8 </span><br><span class="line">    num3: 15</span><br><span class="line">  tasks:</span><br><span class="line">    - debug: </span><br><span class="line">        msg: &quot;num1 is an even number&quot;</span><br><span class="line">      when: num1 is even</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;num2 is an odd number&quot;</span><br><span class="line">      when: num2 is odd</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;num3 can be divided exactly by&quot;</span><br><span class="line">      when: num3 is divisibleby(3)</span><br></pre></td></tr></table></figure><h3 id="其他tests"><a href="#其他tests" class="headerlink" title="其他tests"></a>其他tests</h3><ol><li><p>version</p><p> 可用于对比两个版本号的大小，或者与指定的版本号进行对比，使用语法为version(“版本号”,”比较操作符”)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  vars:</span><br><span class="line">    ver1: 1.2</span><br><span class="line">    ver2: 1.3</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;ver1 is greater than ver2&quot;</span><br><span class="line">      when: ver1 is version(ver2,&quot;&gt;&quot;)</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;system version &#123;&#123; ansible_distribution_version &#125;&#125; greater than 7.3&quot;</span><br><span class="line">      when: ansible_distribution_version is version(&quot;7.3&quot;,&quot;gt&quot;)</span><br></pre></td></tr></table></figure><p> version中使用的比较运算符说明：</p><ul><li>大于： &gt;, gt</li><li>大于等于： &gt;=, ge</li><li>小于： &lt;, lt</li><li>小于等于： &lt;=, le</li><li>等于： =, ==, eq</li><li>不等于： !=, &lt;&gt;, ne</li></ul></li><li><p>subset<br> 判断一个list是不是另一个list的子集</p></li><li><p>superset<br> 判断一个list是不是另一个list的父集”</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    a:</span><br><span class="line">      - 2</span><br><span class="line">      - 5</span><br><span class="line">    b: [1,2,3,4,5]</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;A is a subset of B&quot;</span><br><span class="line">      when: a is subset(b)</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;B is the parent set of A&quot;</span><br><span class="line">      when: b is superset(a)</span><br></pre></td></tr></table></figure></li><li><p>in<br> 判断一个字符串是否存在于另一个字符串中，也可用于判断某个特定的值是否存在于列表中</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  vars:</span><br><span class="line">    supported_distros:</span><br><span class="line">      - RedHat</span><br><span class="line">      - CentOS</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;&#123;&#123; ansible_distribution &#125;&#125; in supported_distros&quot;</span><br><span class="line">      when: ansible_distribution in supported_distros</span><br></pre></td></tr></table></figure></li><li><p>string<br> 判断对象是否为一个字符串，是则为真</p></li><li><p>number<br> 判断对象是否为一个数字，是则为真</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars:</span><br><span class="line">    var1: 1</span><br><span class="line">    var2: &quot;1&quot;</span><br><span class="line">    var3: a</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;var1 is a number&quot;</span><br><span class="line">      when: var1 is number</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;var2 is a string&quot;</span><br><span class="line">      when: var2 is string</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;var3 is a string&quot;</span><br><span class="line">      when: var3 is string</span><br></pre></td></tr></table></figure><h2 id="条件判断与block"><a href="#条件判断与block" class="headerlink" title="条件判断与block"></a>条件判断与block</h2><h3 id="block"><a href="#block" class="headerlink" title="block"></a>block</h3><p>我们在前面使用when做条件判断时，如果条件成立则执行对应的任务。但这就面临一个问题，当我们要使用同一个条件判断执行多个任务的时候，就意味着我们要在某一个任务下面都写一下when语句，而且判断条件完全一样。这种方式不仅麻烦而且显得low。Ansible提供了一种更好的方式来解决这个问题，即block。</p><p>在ansible中，使用block将多个任务进行组合，当作一个整体。我们可以对这一个整体做条件判断，当条件成立时，则执行块中的所有任务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;task1 not in block&quot;</span><br><span class="line">    - block:</span><br><span class="line">        - debug:</span><br><span class="line">            msg: &quot;task2 in block1&quot;</span><br><span class="line">        - debug:</span><br><span class="line">            msg: &quot;task3 in block1&quot;</span><br><span class="line">      when: 2 &gt; 1</span><br></pre></td></tr></table></figure><p>下面是一个稍微有用点儿的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">    - name: set &#x2F;etc&#x2F;resolv.conf</span><br><span class="line">      template: </span><br><span class="line">        src: resolv.conf.j2 </span><br><span class="line">        dest: &#x2F;etc&#x2F;resolv.conf </span><br><span class="line">        owner: root </span><br><span class="line">        group: root </span><br><span class="line">        mode: 0644</span><br><span class="line">    - block:</span><br><span class="line">        - name: ensure &#x2F;etc&#x2F;resolvconf&#x2F;resolv.conf.d&#x2F;base file for ubuntu 16.04</span><br><span class="line">          template: </span><br><span class="line">            src: resolv.conf.j2</span><br><span class="line">            dest: &#x2F;etc&#x2F;resolvconf&#x2F;resolv.conf.d&#x2F;base</span><br><span class="line">       </span><br><span class="line">        - name: config dns for ubuntu 16.04</span><br><span class="line">          template: </span><br><span class="line">            src: resolv.conf.j2</span><br><span class="line">            dest: &#x2F;etc&#x2F;resolv.conf</span><br><span class="line">      when: ansible_distribution &#x3D;&#x3D; &quot;Ubuntu&quot; and ansible_distribution_major_version &#x3D;&#x3D; &quot;16&quot;</span><br></pre></td></tr></table></figure><p>使用block注意事项：</p><ol><li>可以为block定义name（ansible 2.3增加的特性）</li><li>可以直接对block使用when，但不能直接对block使用loop</li></ol><h3 id="rescue"><a href="#rescue" class="headerlink" title="rescue"></a>rescue</h3><p>block除了能和when一起使用之外，还能作错误处理。这个时候就需要用到rescue关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">    - block:</span><br><span class="line">        - shell: &#39;ls &#x2F;testdir&#39;</span><br><span class="line">      rescue:</span><br><span class="line">        - debug:</span><br><span class="line">            msg: &#39;&#x2F;testdir is not exists&#39;</span><br></pre></td></tr></table></figure><p>在上面的例子中，当block中的任务执行失败时，则运行rescue中的任务。如果block中的任务正常执行，则rescue的任务就不会被执行。如果block中有多个任务，则任何一个任务执行失败，都会执行rescue。block中可以定义多个任务，同样rescue当中也可以定义多个任务。</p><h3 id="always"><a href="#always" class="headerlink" title="always"></a>always</h3><p>当block执行失败时，rescue中的任务才会被执行；而无论block执行成功还是失败，always中的任务都会被执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">    - block:</span><br><span class="line">        - shell: &#39;ls &#x2F;testdir&#39;</span><br><span class="line">      rescue:</span><br><span class="line">        - debug:</span><br><span class="line">            msg: &#39;&#x2F;testdir is not exists&#39;</span><br><span class="line">      always:</span><br><span class="line">        - debug:</span><br><span class="line">            msg: &#39;This task always executes&#39;</span><br></pre></td></tr></table></figure><h2 id="条件判断与错误处理"><a href="#条件判断与错误处理" class="headerlink" title="条件判断与错误处理"></a>条件判断与错误处理</h2><p>在上面讲block的使用方法的时候，我们说block除了可以将多个任务组合到一起，还有错误处理的功能。接下来我们继续说一说错误处理。</p><h3 id="fail模块"><a href="#fail模块" class="headerlink" title="fail模块"></a>fail模块</h3><p>在shell中，可能会有这样的需求：当脚本执行至某个阶段时，需要对某个条件进行判断，如果条件成立，则立即终止脚本的运行。在shell中，可以直接调用”exit”即可执行退出。事实上，在playbook中也有类似的模块可以做这件事。即fail模块。</p><p>fail模块用于终止当前playbook的执行，通常与条件语句组合使用，当满足条件时，终止当前play的运行。</p><p>选项只有一个：</p><ul><li>msg：终止前打印出信息</li></ul><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用fail模块中断playbook输出</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">echo</span> <span class="string">"Just a test--error"</span> </span><br><span class="line">      <span class="attr">register:</span> <span class="string">result</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">fail:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"Conditions established,Interrupt running playbook"</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">"'error' in result.stdout"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"Inever execute,Because the playbook has stopped"</span></span><br></pre></td></tr></table></figure><h3 id="failed-when"><a href="#failed-when" class="headerlink" title="failed_when"></a>failed_when</h3><p>事实上，当fail和when组合使用的时候，还有一个更简单的写法，即<code>failed_when</code>，当满足某个条件时，ansible主动触发失败。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 如果在command_result存在错误输出，且错误输出中，包含了&#96;FAILED&#96;字串，即返回失败状态：</span><br><span class="line">- name: this command prints FAILED when it fails</span><br><span class="line">  command: &#x2F;usr&#x2F;bin&#x2F;example-command -x -y -z</span><br><span class="line">  register: command_result</span><br><span class="line">  failed_when: &quot;&#39;FAILED&#39; in command_result.stderr&quot;</span><br></pre></td></tr></table></figure><p>也可以直接通过<code>fail</code>模块和<code>when</code>条件语句，写成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- name: this command prints FAILED when it fails</span><br><span class="line">  command: &#x2F;usr&#x2F;bin&#x2F;example-command -x -y -z</span><br><span class="line">  register: command_result</span><br><span class="line">  ignore_errors: True</span><br><span class="line"></span><br><span class="line">- name: fail the play if the previous command did not succeed</span><br><span class="line">  fail: msg&#x3D;&quot;the command failed&quot;</span><br><span class="line">  when: &quot; command_result.stderr and &#39;FAILED&#39; in command_result.stderr&quot;</span><br></pre></td></tr></table></figure><blockquote><p>ansible一旦执行返回失败，后续操作就会中止，所以failed_when通常可以用于满足某种条件时主动中止playbook运行的一种方式。</p></blockquote><blockquote><p>ansible默认处理错误的机制是遇到错误就停止执行。但有些时候，有些错误是计划之中的。我们希望忽略这些错误，以让playbook继续往下执行。这个时候就可以使用<code>ignore_errors</code>忽略错误，从而让playbook继续往下执行。</p></blockquote><h3 id="changed-when"><a href="#changed-when" class="headerlink" title="changed_when"></a>changed_when</h3><p>当我们控制一些远程主机执行某些任务时，当任务在远程主机上成功执行，状态发生更改时，会返回changed状态响应，状态未发生更改时，会返回OK状态响应，当任务被跳过时，会返回skipped状态响应。我们可以通过<code>changed_when</code>来手动更改<code>changed</code>响应状态。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- shell: &#x2F;usr&#x2F;bin&#x2F;billybass --mode&#x3D;&quot;take me to the river&quot;</span><br><span class="line">register: bass_result</span><br><span class="line">changed_when: &quot;bass_result.rc !&#x3D; 2&quot;    #只有该条task执行以后，bass_result.rc的值不为2时，才会返回changed状态</span><br><span class="line"></span><br><span class="line"># this will never report &#39;changed&#39; status</span><br><span class="line">- shell: wall &#39;beep&#39;</span><br><span class="line">  changed_when: False    #当changed_when为false时，该条task在执行以后，永远不会返回changed状态</span><br></pre></td></tr></table></figure><h2 id="在循环语句中使用条件语句"><a href="#在循环语句中使用条件语句" class="headerlink" title="在循环语句中使用条件语句"></a>在循环语句中使用条件语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 只打印大于5的值</span><br><span class="line">tasks:</span><br><span class="line">    - command: echo &#123;&#123; item &#125;&#125;</span><br><span class="line">      loop: [ 0, 2, 4, 6, 8, 10 ]</span><br><span class="line">      when: item &gt; 5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 确保将mariadb-server安装到根分区且根分区的可用空间要大于300M</span><br><span class="line">- name: install mariadb-server if enough space on root</span><br><span class="line">  yum: </span><br><span class="line">    name: mariadb-server</span><br><span class="line">    state；拉特st</span><br><span class="line">  loop: &quot;&#123;&#123; ansible_mounts &#125;&#125;&quot;</span><br><span class="line">  when: item.mount &#x3D;&#x3D; &quot;&#x2F;&quot; and item.size_available &gt; 300000000</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17. Ansible Playbook高级用法</title>
      <link href="/2020/05/20/17.%20Ansible%20Playbook%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
      <url>/2020/05/20/17.%20Ansible%20Playbook%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="17-Ansible-Playbook高级用法"><a href="#17-Ansible-Playbook高级用法" class="headerlink" title="17. Ansible Playbook高级用法"></a>17. Ansible Playbook高级用法</h1><p>[toc]</p><h2 id="本地执行"><a href="#本地执行" class="headerlink" title="本地执行"></a>本地执行</h2><p>如果希望在控制主机本地运行一个特定的任务，可以使用local_action语句。</p><p>假设我们需要配置的远程主机刚刚启动，如果我们直接运行playbook，可能会因为sshd服务尚未开始监听而导致失败，我们可以在控制主机上使用如下示例来等待被控端sshd端口监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- name: wait for ssh server to be running</span><br><span class="line">  wait_for</span><br><span class="line">      port: 22 </span><br><span class="line">      host: &quot;&#123;&#123; inventory_hostname &#125;&#125;&quot; </span><br><span class="line">      search_regex: OpenSSH</span><br><span class="line">  connection: local</span><br></pre></td></tr></table></figure><h2 id="任务委托"><a href="#任务委托" class="headerlink" title="任务委托"></a>任务委托</h2><p>在有些时候，我们希望运行与选定的主机或主机组相关联的task，但是这个task又不需要在选定的主机或主机组上执行，而需要在另一台服务器上执行。</p><p>这种特性适用于以下场景：</p><ul><li>在告警系统中启用基于主机的告警</li><li>向负载均衡器中添加或移除一台主机</li><li>在dns上添加或修改针对某个主机的解析</li><li>在存储节点上创建一个存储以用于主机挂载</li><li>使用一个外部程序来检测主机上的服务是否正常</li></ul><p>可以使用delegate_to语句来在另一台主机上运行task：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- name: enable alerts for web servers</span><br><span class="line">  hosts: webservers</span><br><span class="line">  tasks:</span><br><span class="line">    - name: enable alerts</span><br><span class="line">      nagios: action&#x3D;enable_alerts service&#x3D;web host&#x3D;&quot;&#123;&#123; inventory_hostname &#125;&#125;&quot;</span><br><span class="line">      delegate_to: nagios.example.com</span><br></pre></td></tr></table></figure><blockquote><p>如果delegate_to: 127.0.0.1的时候，等价于local_action</p></blockquote><h2 id="任务暂停"><a href="#任务暂停" class="headerlink" title="任务暂停"></a>任务暂停</h2><p>有些情况下，一些任务的运行需要等待一些状态的恢复，比如某一台主机或者应用刚刚重启，我们需要需要等待它上面的某个端口开启，此时就需要将正在运行的任务暂停，直到其状态满足要求。</p><p>Ansible提供了wait_for模块以实现任务暂停的需求</p><p>wait_for模块常用参数：</p><ul><li>connect_timeout：在下一个任务执行之前等待连接的超时时间</li><li>delay：等待一个端口或者文件或者连接到指定的状态时，默认超时时间为300秒，在这等待的300s的时间里，wait_for模块会一直轮询指定的对象是否到达指定的状态，delay即为多长时间轮询一次状态。</li><li>host：wait_for模块等待的主机的地址，默认为127.0.0.1</li><li>port：wait_for模块待待的主机的端口</li><li>path：文件路径，只有当这个文件存在时，下一任务才开始执行，即等待该文件创建完成</li><li>state：等待的状态，即等待的文件或端口或者连接状态达到指定的状态时，下一个任务开始执行。当等的对象为端口时，状态有started，stoped，即端口已经监听或者端口已经关闭；当等待的对象为文件时，状态有present或者started，absent，即文件已创建或者删除；当等待的对象为一个连接时，状态有drained，即连接已建立。默认为started</li><li>timeout：wait_for的等待的超时时间,默认为300秒</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#等待8080端口已正常监听，才开始下一个任务，直到超时</span><br><span class="line">- wait_for: </span><br><span class="line">    port: 8080 </span><br><span class="line">    state: started  </span><br><span class="line">    </span><br><span class="line">#等待8000端口正常监听，每隔10s检查一次，直至等待超时</span><br><span class="line">- wait_for: </span><br><span class="line">    port: 8000 </span><br><span class="line">    delay: 10 </span><br><span class="line">    </span><br><span class="line">#等待8000端口直至有连接建立</span><br><span class="line">- wait_for: </span><br><span class="line">    host: 0.0.0.0 </span><br><span class="line">    port: 8000 </span><br><span class="line">    delay: 10 </span><br><span class="line">    state: drained</span><br><span class="line">    </span><br><span class="line">#等待8000端口有连接建立，如果连接来自10.2.1.2或者10.2.1.3，则忽略。</span><br><span class="line">- wait_for: </span><br><span class="line">    host: 0.0.0.0 </span><br><span class="line">    port: 8000 </span><br><span class="line">    state: drained </span><br><span class="line">    exclude_hosts: 10.2.1.2,10.2.1.3 </span><br><span class="line">    </span><br><span class="line">#等待&#x2F;tmp&#x2F;foo文件已创建    </span><br><span class="line">- wait_for: </span><br><span class="line">    path: &#x2F;tmp&#x2F;foo </span><br><span class="line"></span><br><span class="line">#等待&#x2F;tmp&#x2F;foo文件已创建，而且该文件中需要包含completed字符串    </span><br><span class="line">- wait_for: </span><br><span class="line">    path: &#x2F;tmp&#x2F;foo </span><br><span class="line">    search_regex: completed </span><br><span class="line"></span><br><span class="line">#等待&#x2F;var&#x2F;lock&#x2F;file.lock被删除    </span><br><span class="line">- wait_for: </span><br><span class="line">    path: &#x2F;var&#x2F;lock&#x2F;file.lock </span><br><span class="line">    state: absent </span><br><span class="line">    </span><br><span class="line">#等待指定的进程被销毁</span><br><span class="line">- wait_for: </span><br><span class="line">    path: &#x2F;proc&#x2F;3466&#x2F;status </span><br><span class="line">    state: absent </span><br><span class="line">    </span><br><span class="line">#等待openssh启动，10s检查一次</span><br><span class="line">- wait_for: </span><br><span class="line">    port: 22 </span><br><span class="line">    host: &quot;&#123;&#123; ansible_ssh_host | default(inventory_hostname) &#125;&#125;&quot; search_regex: OpenSSH </span><br><span class="line">    delay: 10</span><br></pre></td></tr></table></figure><h2 id="滚动执行"><a href="#滚动执行" class="headerlink" title="滚动执行"></a>滚动执行</h2><p>默认情况下，ansible会并行的在所有选定的主机或主机组上执行每一个task，但有的时候，我们会希望能够逐台运行。最典型的例子就是对负载均衡器后面的应用服务器进行更新时。通常来讲，我们会将应用服务器逐台从负载均衡器上摘除，更新，然后再添加回去。我们可以在play中使用serial语句来告诉ansible限制并行执行play的主机数量。</p><p>下面是一个在amazon EC2的负载均衡器中移除主机，更新软件包，再添加回负载均衡的配置示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- name: upgrade pkgs on servers behind load balancer</span><br><span class="line">  hosts: myhosts</span><br><span class="line">  serial: 1</span><br><span class="line">  tasks:</span><br><span class="line">    - name: get the ec2 instance id and elastic load balancer id</span><br><span class="line">      ec2_facts:</span><br><span class="line"></span><br><span class="line">    - name: take the host out of the elastic load balancer id</span><br><span class="line">      local_action: ec2_elb</span><br><span class="line">      args:</span><br><span class="line">        instance_id: &quot;&#123;&#123; ansible_ec2_instance_id &#125;&#125;&quot;</span><br><span class="line">        state: absent</span><br><span class="line"></span><br><span class="line">    - name: upgrade pkgs</span><br><span class="line">      apt: </span><br><span class="line">          update_cache: yes </span><br><span class="line">          upgrade: yes</span><br><span class="line"></span><br><span class="line">    - name: put the host back n the elastic load balancer</span><br><span class="line">      local_action: ec2_elb</span><br><span class="line">      args:</span><br><span class="line">        instance_id: &quot;&#123;&#123; ansible_ec2_instance_id &#125;&#125;&quot;</span><br><span class="line">        state: present</span><br><span class="line">        ec2_elbs: &quot;&#123;&#123; items &#125;&#125;&quot;</span><br><span class="line">      with_items: ec2_elbs</span><br></pre></td></tr></table></figure><p>在上述示例中，serial的值为1，即表示在某一个时间段内，play只在一台主机上执行。如果为2，则同时有2台主机运行play。</p><p>一般来讲，当task失败时，ansible会停止执行失败的那台主机上的任务，但是继续对其他 主机执行。在负载均衡的场景中，我们会更希望ansible在所有主机执行失败之前就让play停止，否则很可能会面临所有主机都从负载均衡器上摘除并且都执行失败导致服务不可用的场景。这个时候，我们可以使用serial语句配合max_fail_percentage语句使用。<code>max_fail_percentage</code>表示当最大失败主机的比例达到多少时，ansible就让整个play失败。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- name: upgrade pkgs on fservers behind load balancer</span><br><span class="line">  hosts: myhosts</span><br><span class="line">  serial: 1</span><br><span class="line">  max_fail_percentage: 25</span><br><span class="line">  tasks:</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>假如负载均衡后面有4台主机，并且有一台主机执行失败，这时ansible还会继续运行，要让Play停止运行，则必须超过25%，所以如果想一台失败就停止执行，我们可以将max_fail_percentage的值设为24。如果我们希望只要有执行失败，就放弃执行，我们可以将max_fail_percentage的值设为0。</p><h2 id="只执行一次"><a href="#只执行一次" class="headerlink" title="只执行一次"></a>只执行一次</h2><p>某些时候，我们希望某个task只执行一次，即使它被绑定到了多个主机上。例如在一个负载均衡器后面有多台应用服务器，我们希望执行一个数据库迁移，只需要在一个应用服务器上执行操作即可。</p><p>可以使用run_once语句来处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- name: run the database migrateions</span><br><span class="line">  command: &#x2F;opt&#x2F;run_migrateions</span><br><span class="line">  run_once: true</span><br></pre></td></tr></table></figure><p>还可以与local_action配合使用，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- name: run the task locally, only once</span><br><span class="line">  command: &#x2F;opt&#x2F;my-custom-command</span><br><span class="line">  connection: local</span><br><span class="line">  run_once: true</span><br></pre></td></tr></table></figure><p>还可以与delegate_to配合使用，让这个只执行一次的任务在指定的机器上运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- name: run the task locally, only once</span><br><span class="line">  command: &#x2F;opt&#x2F;my-custom-command</span><br><span class="line">  run_once: true</span><br><span class="line">  delegate_to: app.a1-61-105.dev.unp</span><br></pre></td></tr></table></figure><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>我们在命令行下执行某些命令的时候，这些命令可能会需要依赖环境变量。比如在安装某些包的时候，可能需要通过代理才能完成完装。或者某个脚本可能需要调用某个环境变量才能完成运行。</p><p>ansible 支持通过<code>environment</code>关键字来定义一些环境变量。</p><p>在如下场景中可能需要用到环境变量：</p><ul><li>运行shell的时候，需要设置path变量</li><li>需要加载一些库，这些库不在系统的标准库路径当中</li></ul><p>下面是一个简单示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- name: upload a remote file to aws s3</span><br><span class="line">  hosts: test</span><br><span class="line">  tasks:</span><br><span class="line">    - name: install pip</span><br><span class="line">      yum:</span><br><span class="line">        name: python-pip</span><br><span class="line">        state: installed</span><br><span class="line">    </span><br><span class="line">    - name: install the aws tools</span><br><span class="line">      pip:</span><br><span class="line">        name: awscli</span><br><span class="line">        state: present</span><br><span class="line">    </span><br><span class="line">    - name upload file to s3</span><br><span class="line">      shell: aws s3 put-object --bucket&#x3D;my-test-bucket --key&#x3D;&#123;&#123; ansible_hostname &#125;&#125;&#x2F;fstab --body&#x3D;&#x2F;etc&#x2F;fstab --region&#x3D;eu-west-1</span><br><span class="line">      environment:</span><br><span class="line">        AWS_ACCESS_KEY_ID: xxxxxx</span><br><span class="line">        AWS_SECRET_ACCESS_KEY: xxxxxx</span><br></pre></td></tr></table></figure><p>事实上，environment也可以存储在变量当中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars:</span><br><span class="line">    proxy_env:</span><br><span class="line">      http_proxy: http:&#x2F;&#x2F;proxy.example.com:8080</span><br><span class="line">      https_proxy: http:&#x2F;&#x2F;proxy.bos.example.com:8080</span><br><span class="line">  tasks:</span><br><span class="line">    - apt: name&#x3D;cobbler state&#x3D;installed</span><br><span class="line">      environment: proxy_env</span><br></pre></td></tr></table></figure><h2 id="交互式提示"><a href="#交互式提示" class="headerlink" title="交互式提示"></a>交互式提示</h2><p>在少数情况下，ansible任务运行的过程中需要用户输入一些数据，这些数据要么比较秘密不方便，或者数据是动态的，不同的用户有不同的需求，比如输入用户自己的账户和密码或者输入不同的版本号会触发不同的后续操作等。ansible的vars_prompt关键字就是用来处理上述这种与用户交互的情况的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars_prompt:</span><br><span class="line">     - name: share_user</span><br><span class="line">       prompt: &quot;what is your network username?&quot;</span><br><span class="line">       private: yes</span><br><span class="line"></span><br><span class="line">     - name: share_pass</span><br><span class="line">       prompt: &quot;what is your network password&quot;</span><br><span class="line">       private: yes</span><br><span class="line">       </span><br><span class="line">   tasks:</span><br><span class="line">     - debug:</span><br><span class="line">         var: share_user</span><br><span class="line">     - debug:</span><br><span class="line">         var: share_pass</span><br></pre></td></tr></table></figure><p>vars_prompt常用选项说明：</p><ul><li>private: 默认为yes，表示用户输入的值在命令行不可见</li><li>default：定义默认值，当用户未输入时则使用默认值</li><li>confirm：如果设置为yes，则会要求用户输入两次，适合输入密码的情况</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18. Ansible Playbook之tags</title>
      <link href="/2020/05/20/18.%20Ansible%20Playbook%E4%B9%8Btags/"/>
      <url>/2020/05/20/18.%20Ansible%20Playbook%E4%B9%8Btags/</url>
      
        <content type="html"><![CDATA[<h1 id="18-Ansible-Playbook之tags"><a href="#18-Ansible-Playbook之tags" class="headerlink" title="18. Ansible Playbook之tags"></a>18. Ansible Playbook之tags</h1><p>[toc]</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在大型项目当中，通常一个playbook会有非常多的task。而我们每次执行这个playbook时，都会将所有task运行一遍。而事实上，在实际使用过程中，我们可能只是想要执行其中的一部分任务而已，并不想把整个playbook完整跑一遍。这个时候就需要用到tags。</p><p>通过tags，我们可以给playbook中的某一些任务打上“标签”，而在执行playbook的时候，我们可以通过选定标签的方式指定只执行哪一些任务或者不执行哪一些任务。</p><h2 id="为task打tag"><a href="#为task打tag" class="headerlink" title="为task打tag"></a>为task打tag</h2><p>下面是一个安装httpd的简单示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/ansible/playbook/install_web.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">configure</span> <span class="string">webservers</span> </span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">ansible</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">yum:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">install_httpd</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cofiguration</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">copy:</span> </span><br><span class="line">        <span class="attr">src:</span> <span class="string">/root/httpd.conf</span> </span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/httpd/conf/httpd.conf</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">conf_httpd</span>   </span><br><span class="line">      <span class="attr">notify:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">restart</span> <span class="string">httpd</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Start</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">service:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span> </span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span> </span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">no</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">start_httpd</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=httpd</span> <span class="string">state=restart</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，我们为两个task定义了三个tags：<code>install_httpd</code>、<code>conf_httpd</code>以及<code>start_httpd</code>。</p><h2 id="使用tag"><a href="#使用tag" class="headerlink" title="使用tag"></a>使用tag</h2><h3 id="执行指定tag的task"><a href="#执行指定tag的task" class="headerlink" title="执行指定tag的task"></a>执行指定tag的task</h3><p>有了tags之后，我们就可以只运行playbook中指定标签的task了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook --tags&#x3D;&quot;start_httpd&quot; install_web.yml </span><br><span class="line"></span><br><span class="line">PLAY [configure webservers] *************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [Start httpd] **********************************************************************************************************************************************************</span><br><span class="line">changed: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;2    changed&#x3D;1    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><p>也可以一次指定多个tag执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook --tags&#x3D;&quot;conf_httpd,start_httpd&quot; install_web.yml     </span><br><span class="line"></span><br><span class="line">PLAY [configure webservers] *************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [Cofiguration httpd] ***************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [Start httpd] **********************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;3    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><h3 id="排除指定tag的task"><a href="#排除指定tag的task" class="headerlink" title="排除指定tag的task"></a>排除指定tag的task</h3><p>通过下面的方式可以排除指定了tag的task，即除了指定tag的task不执行，其他task都执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook --skip-tags&#x3D;&quot;install_httpd&quot; install_web.yml                           </span><br><span class="line"></span><br><span class="line">PLAY [configure webservers] *************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [Gathering Facts] ******************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [Cofiguration httpd] ***************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [Start httpd] **********************************************************************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">PLAY RECAP ******************************************************************************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;3    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><p>执行效果跟上面一样。</p><h3 id="查看playbook中的所有tag"><a href="#查看playbook中的所有tag" class="headerlink" title="查看playbook中的所有tag"></a>查看playbook中的所有tag</h3><p>可以通过<code>--list-tags</code>参数列出指定的playbook中所有的tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook --list-tags install_web.yml                          </span><br><span class="line"></span><br><span class="line">playbook: install_web.yml</span><br><span class="line"></span><br><span class="line">  play #1 (all): configure webservers   TAGS: []</span><br><span class="line">      TASK TAGS: [conf_httpd, install_httpd, start_httpd]</span><br></pre></td></tr></table></figure><h2 id="打tag的几种方式"><a href="#打tag的几种方式" class="headerlink" title="打tag的几种方式"></a>打tag的几种方式</h2><ol><li>为一个任务指定一个标签</li></ol><p>这种方式就是上面示例中的方法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span> <span class="string">conf_httpd</span></span><br></pre></td></tr></table></figure><ol start="2"><li>为一个任务指定多个标签</li></ol><p>可以通过列表的方式为一个任务指定多个标签：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">install_httpd</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">install_web</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">tags:</span> <span class="string">['install_httpd','install_web']</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tags:</span> <span class="string">install_httpd,install_web</span></span><br></pre></td></tr></table></figure><ol start="3"><li>为一个play指定一组标签</li></ol><p>当为一个play指定一组标签后，该play下的所有task都会自动继承该标签，各task也可以自定义自己的标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: configure webservers </span><br><span class="line">  hosts: all</span><br><span class="line">  remote_user: ansible</span><br><span class="line">  tags: </span><br><span class="line">    - httpd</span><br><span class="line">  tasks:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="ansible内置tag"><a href="#ansible内置tag" class="headerlink" title="ansible内置tag"></a>ansible内置tag</h2><p>除了用户自定义tag，ansible也内置了几个tag，这些tag都包含特殊含义：</p><ul><li><p>always：一旦某个task被打上了always的tag，则无论是playbook的完整执行，还是指定tag执行，不管你指定的tag是啥，该任务总是会被执行。除非明确指定”–skip-tags=always”选项，才不会执行该task。</p></li><li><p>never：该标签与always正好相反，总是不会执行，除非明确指定”–tags=never”选项。</p></li><li><p>tagged：在调用时使用</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有打了tag的任务都会被执行，包含never tag的除外，没有标签的不会被执行</span></span><br><span class="line">ansible-playbook --tags tagged install_web.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有打了tag的任务都不会被执行，包括always tag也不会被执行</span></span><br><span class="line">ansible-playbook --skip-tags tagged install_web.yaml</span><br></pre></td></tr></table></figure></li><li><p>untagged：在调用时使用</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有未打tag的任务都会被执行，打了always tag的也会被执行</span></span><br><span class="line">ansibl-playbook --tags untagged install_web.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有未打tag的任务都不会被执行</span></span><br><span class="line">ansibl-playbook --skip-tags untagged install_web.yaml</span><br></pre></td></tr></table></figure></li><li><p>all：表示所有任务都会被执行，在默认情况下，不指定任何标签，则使用的就是该标签</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19. Ansible Playbook Include</title>
      <link href="/2020/05/20/19.%20Ansible%20Playbook%20Include/"/>
      <url>/2020/05/20/19.%20Ansible%20Playbook%20Include/</url>
      
        <content type="html"><![CDATA[<h1 id="19：Ansible-Playbook-Include"><a href="#19：Ansible-Playbook-Include" class="headerlink" title="19：Ansible Playbook Include"></a>19：Ansible Playbook Include</h1><p>[toc]</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在前面的学习当中，我们一直使用一个playbook文件来组织所有的task任务。但是，当我们项目越来越大，task越来越多的时候，如果还将所有的task都写到一个playbook当中，可读性就会变差，这个时候我们就需要重新来组织playbook了。</p><p>我们可以将一个大的playbook拆成若干个小的playbook文件，在主配置文件中将这些零碎的小文件引入进来，而这种方式就叫做playbook的”include”。</p><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>playbook的include其实就是使用include关键字</p><h3 id="tasks-include"><a href="#tasks-include" class="headerlink" title="tasks include"></a>tasks include</h3><h4 id="1-include简单示例"><a href="#1-include简单示例" class="headerlink" title="1. include简单示例"></a>1. include简单示例</h4><p>下面是两个playbook示例，分别用于安装lamp和lnmp环境：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat lamp.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">package:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">package:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">php-fpm</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">package:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># cat lnmp.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">package:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">package:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">php-fpm</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">package:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br></pre></td></tr></table></figure><p>在上面的示例当中，我们可以看到lamp和lnmp中mysql和php的安装都是一样的，所以我们可以将这两个任务提取出来，放到一个单独的task文件中，然后在lnmp和lamp中引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># cat install_mysql_php.yml</span><br><span class="line">- package: </span><br><span class="line">    name: mysql</span><br><span class="line">    state: present</span><br><span class="line">- package:</span><br><span class="line">    name: php-fpm</span><br><span class="line">    state: present</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"># cat lamp.yml</span><br><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - include: install_mysql_php.yml</span><br><span class="line">    - package:</span><br><span class="line">        name: httpd</span><br><span class="line">        state: php-fpm</span><br><span class="line"></span><br><span class="line"># cat lnmp.yml</span><br><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - include: install_mysql_php.yml</span><br><span class="line">    - package:</span><br><span class="line">        name: nginx</span><br><span class="line">        state: php-fpm</span><br></pre></td></tr></table></figure><h4 id="2-在include时引入变量"><a href="#2-在include时引入变量" class="headerlink" title="2. 在include时引入变量"></a>2. 在include时引入变量</h4><p>也可以在include的时候，传入变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># cat test_include.yml</span><br><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - include: wordpress.yml user&#x3D;timmy</span><br><span class="line">    - include: wordpress.yml user&#x3D;alice</span><br><span class="line">    - include: wordpress.yml user&#x3D;bob</span><br><span class="line">  </span><br><span class="line"># cat wordpress.yml</span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;&#123;&#123; user &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>通过如下方式带入变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line"> - &#123; include: wordpress.yml, user: timmy, ssh_keys: [ &#39;keys&#x2F;one.txt&#39;, &#39;keys&#x2F;two.txt&#39; ] &#125;</span><br></pre></td></tr></table></figure><p>再给一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks: </span><br><span class="line">    - include: in.yml</span><br><span class="line">      vars:</span><br><span class="line">        users:</span><br><span class="line">          bob:</span><br><span class="line">            gender: male</span><br><span class="line">          lucy:</span><br><span class="line">            gender: female</span><br><span class="line">            </span><br><span class="line"># cat in.yml</span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;&#123;&#123; item.key &#125;&#125; is &#123;&#123; item.value.gender &#125;&#125;&quot;</span><br><span class="line">  loop: &quot;&#123;&#123;users | dict2items &#125;&#125;&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="3-在include中使用tag"><a href="#3-在include中使用tag" class="headerlink" title="3. 在include中使用tag"></a>3. 在include中使用tag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># cat test_include.yml</span><br><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - include: in1.yml</span><br><span class="line">      tags: t1</span><br><span class="line">    - include: in2.yml</span><br><span class="line">      tags: t2</span><br><span class="line"></span><br><span class="line"># cat in1.yml</span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;task1 in in1.yml&quot;</span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;task2 in in1.yml&quot;</span><br><span class="line">    </span><br><span class="line"># cat in2.yml</span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;task1 in in2.yml&quot;</span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;task2 in in2.yml&quot;</span><br></pre></td></tr></table></figure><p>在上面的示例当中，两个Include分别对应两个tag，如果我们在执行test_include.yml时，指定tag为t2，那么in2.yml中的所有任务都会被执行。所以tag是针对include的所有任务生效。</p><h4 id="4-在include中使用条件判断"><a href="#4-在include中使用条件判断" class="headerlink" title="4. 在include中使用条件判断"></a>4. 在include中使用条件判断</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># cat test_include.yml</span><br><span class="line"></span><br><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - include: in.yml</span><br><span class="line">      when: 2 &gt; 1</span><br><span class="line"></span><br><span class="line"># cat in.yml</span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;task in in.yml&quot;</span><br></pre></td></tr></table></figure><h4 id="5-在include中使用循环"><a href="#5-在include中使用循环" class="headerlink" title="5. 在include中使用循环"></a>5. 在include中使用循环</h4><p>下面是一个简单的循环示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># cat test_include.yml</span><br><span class="line"></span><br><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - include: in.yml</span><br><span class="line">      loop:</span><br><span class="line">        - 1</span><br><span class="line">        - 2</span><br><span class="line"></span><br><span class="line"># cat in.yml</span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;task1 in in.yml&quot;</span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;task2 in in.yml&quot;</span><br></pre></td></tr></table></figure><p>可以看到in.yml被循环执行了两次。</p><p>我们可以稍微修改in.yml示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cat in.yml</span><br><span class="line">- debug: </span><br><span class="line">    msg: &quot;&#123;&#123; item &#125;&#125; task1 in in.yml&quot;</span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;&#123;&#123; item &#125;&#125; task2 in in.yml&quot;</span><br></pre></td></tr></table></figure><p>再次执行playbook的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@workstation ansible]# ansible-playbook test_include.yml </span><br><span class="line"></span><br><span class="line">PLAY [servera] **********************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [include] **********************************************************************************************************************************</span><br><span class="line">included: &#x2F;etc&#x2F;ansible&#x2F;in.yml for servera &#x3D;&gt; (item&#x3D;1)</span><br><span class="line">included: &#x2F;etc&#x2F;ansible&#x2F;in.yml for servera &#x3D;&gt; (item&#x3D;2)</span><br><span class="line"></span><br><span class="line">TASK [debug] ************************************************************************************************************************************</span><br><span class="line">ok: [servera] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;1 task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [debug] ************************************************************************************************************************************</span><br><span class="line">ok: [servera] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;1 task2 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [debug] ************************************************************************************************************************************</span><br><span class="line">ok: [servera] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;2 task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [debug] ************************************************************************************************************************************</span><br><span class="line">ok: [servera] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;2 task2 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP **************************************************************************************************************************************</span><br><span class="line">servera                    : ok&#x3D;6    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0</span><br></pre></td></tr></table></figure><p>可以看到item的值就来自test_include中的loop循环。那么这就引出了一个问题：如果正好in.yml当中也有循环时怎么办？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cat in.yml</span><br><span class="line">- debug: </span><br><span class="line">    msg: &quot;&#123;&#123; item &#125;&#125; task1 in in.yml&quot;</span><br><span class="line">  loop: [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</span><br></pre></td></tr></table></figure><p>再次执行test_include，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@workstation ansible]# ansible-playbook test_include.yml </span><br><span class="line"></span><br><span class="line">PLAY [servera] **********************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [include] **********************************************************************************************************************************</span><br><span class="line">included: &#x2F;etc&#x2F;ansible&#x2F;in.yml for servera &#x3D;&gt; (item&#x3D;1)</span><br><span class="line">included: &#x2F;etc&#x2F;ansible&#x2F;in.yml for servera &#x3D;&gt; (item&#x3D;2)</span><br><span class="line"></span><br><span class="line">TASK [debug] ************************************************************************************************************************************</span><br><span class="line"> [WARNING]: The loop variable &#39;item&#39; is already in use. You should set the &#96;loop_var&#96; value in the &#96;loop_control&#96; option for the task to</span><br><span class="line">something else to avoid variable collisions and unexpected behavior.</span><br><span class="line"></span><br><span class="line">ok: [servera] &#x3D;&gt; (item&#x3D;a) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;a task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [servera] &#x3D;&gt; (item&#x3D;b) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;b task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [servera] &#x3D;&gt; (item&#x3D;c) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;c task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [debug] ************************************************************************************************************************************</span><br><span class="line"> [WARNING]: The loop variable &#39;item&#39; is already in use. You should set the &#96;loop_var&#96; value in the &#96;loop_control&#96; option for the task to</span><br><span class="line">something else to avoid variable collisions and unexpected behavior.</span><br><span class="line"></span><br><span class="line">ok: [servera] &#x3D;&gt; (item&#x3D;a) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;a task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [servera] &#x3D;&gt; (item&#x3D;b) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;b task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [servera] &#x3D;&gt; (item&#x3D;c) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;c task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP **************************************************************************************************************************************</span><br><span class="line">servera                    : ok&#x3D;4    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0</span><br></pre></td></tr></table></figure><p>这个时候，可以看到最终item的值来自in.yml中的循环。那如果我就想要使用<code>test_include</code>中的循环的值怎么办？ 我们再次修改<code>test_include.yml</code>以及<code>in.yml</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># cat test_include.yml</span><br><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - include: in.yml</span><br><span class="line">      loop:</span><br><span class="line">        - 1</span><br><span class="line">        - 2</span><br><span class="line">      loop_control:</span><br><span class="line">        loop_var: outer_item</span><br><span class="line">        </span><br><span class="line"># cat in.yml</span><br><span class="line">- debug: </span><br><span class="line">    msg: &quot;&#123;&#123;outer_item &#125;&#125; &#123;&#123; item &#125;&#125; task1 in in.yml&quot;</span><br><span class="line">  loop: [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</span><br></pre></td></tr></table></figure><p>再次查看结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PLAY [servera] **********************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [include] **********************************************************************************************************************************</span><br><span class="line">included: &#x2F;etc&#x2F;ansible&#x2F;in.yml for servera</span><br><span class="line">included: &#x2F;etc&#x2F;ansible&#x2F;in.yml for servera</span><br><span class="line"></span><br><span class="line">TASK [debug] ************************************************************************************************************************************</span><br><span class="line">ok: [servera] &#x3D;&gt; (item&#x3D;a) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;1 a task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [servera] &#x3D;&gt; (item&#x3D;b) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;1 b task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [servera] &#x3D;&gt; (item&#x3D;c) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;1 c task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [debug] ************************************************************************************************************************************</span><br><span class="line">ok: [servera] &#x3D;&gt; (item&#x3D;a) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;2 a task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [servera] &#x3D;&gt; (item&#x3D;b) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;2 b task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [servera] &#x3D;&gt; (item&#x3D;c) &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;2 c task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP **************************************************************************************************************************************</span><br><span class="line">servera                    : ok&#x3D;4    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0</span><br></pre></td></tr></table></figure><p>可以看到，<code>outer_item</code>中的值正是外层循环中item的值。当出现这个双层循环时，可以在外层循环中使用<code>loop_var</code>选项指定一个变量，这个变量用于替代外层循环中的item变量，以便在内层循环中获取到外层循环的item的值，从而避免两层循环中item变量名的冲突。</p><h3 id="handlers-include"><a href="#handlers-include" class="headerlink" title="handlers include"></a>handlers include</h3><p>handlers include与tasks include大体类似，直接给例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># handlers1.yml内容如下：</span></span><br><span class="line"><span class="comment"># this might be in a file like handlers/handlers.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">name=apache</span> <span class="string">state=restarted</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># handlers.yml包含handlers1.yml示例：</span></span><br><span class="line"><span class="attr">handlers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">include:</span> <span class="string">handlers/handlers.yml</span></span><br></pre></td></tr></table></figure><h3 id="playbook-include"><a href="#playbook-include" class="headerlink" title="playbook include"></a>playbook include</h3><p>include也可以用于将一个playbook导入到另一个playbook中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- name: this is a play at the top level of a file</span><br><span class="line">  hosts: all</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">  - name: say hi</span><br><span class="line">    tags: foo</span><br><span class="line">    shell: echo &quot;hi...&quot;</span><br><span class="line">- include: load_balancers.yml</span><br><span class="line">- include: webservers.yml</span><br><span class="line">- include: dbservers.yml</span><br></pre></td></tr></table></figure><h2 id="include-tasks"><a href="#include-tasks" class="headerlink" title="include_tasks"></a>include_tasks</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>在前面我们详细说了include的用法，然而事实上在后续的ansible版本当中，include语法可能会被弃用。而使用一些新的关键字来代替include的原始用法，include_tasks就是其中之一。</p><p>我们知道include可以用于包含tasks,handlers,playbooks等，而include_tasks则专门用于包含tasks：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># cat include_tasks_ex.yml</span><br><span class="line">- hosts:</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;task1&quot;</span><br><span class="line">    - include_tasks: in.yml</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;task2&quot;</span><br><span class="line">        </span><br><span class="line"># cat in.yml</span><br><span class="line">- debug: </span><br><span class="line">    msg: &quot;&#123;&#123; item &#125;&#125; task1 in in.yml&quot;</span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;&#123;&#123; item &#125;&#125; task2 in in.yml&quot;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PLAY [servera] **********************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [debug] ************************************************************************************************************************************</span><br><span class="line">ok: [servera] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;task1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [include_tasks] ****************************************************************************************************************************</span><br><span class="line">included: &#x2F;etc&#x2F;ansible&#x2F;in.yml for servera</span><br><span class="line"></span><br><span class="line">TASK [debug] ************************************************************************************************************************************</span><br><span class="line">ok: [servera] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;task1 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [debug] ************************************************************************************************************************************</span><br><span class="line">ok: [servera] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;task2 in in.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [debug] ************************************************************************************************************************************</span><br><span class="line">ok: [servera] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;task2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP **************************************************************************************************************************************</span><br><span class="line">servera                    : ok&#x3D;5    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0</span><br></pre></td></tr></table></figure><p>可以看到，当我们使用<code>include_tasks</code>时，<code>include_tasks</code>本身会被当做一个task，这个task会把include的文件的路径输出在控制台中中， 这就是<code>include_tasks</code>和<code>include</code>之间的区别。include是透明的，而<code>include_tasks</code>是可见的，<code>include_tasks</code>更像是一个任务，这个任务包含了其他的一些任务。</p><p>在ansible 2.7版本当中，<code>include_tasks</code>还加入了新的参数，下面是一个简单用法示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include_tasks:</span><br><span class="line">  file: in.yml</span><br></pre></td></tr></table></figure><p>当然这种使用方法与<code>include_tasks: in.yml</code>的效果完全相同。</p><h3 id="在include-tasks中使用tags"><a href="#在include-tasks中使用tags" class="headerlink" title="在include_tasks中使用tags"></a>在include_tasks中使用tags</h3><p>在前面我们提到过，如果为include添加tags，那么tags是对include中所有任务生效的。也就是说，如果调用include对应的tag，那么include文件中的所有任务都会执行。</p><p>但是对<code>include_tasks</code>添加tags，则只会对<code>include_tasks</code>本身生效，<code>include_tasks</code>中所有的任务都不生效。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># cat include_tasks_ex.yml </span><br><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;test task1&quot;</span><br><span class="line">    - include_tasks:</span><br><span class="line">        file: in.yml</span><br><span class="line">      tags: t1</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;test task3&quot;</span><br><span class="line">        </span><br><span class="line"># cat in.yml </span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;test task2&quot;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook  include_tasks_ex.yml  --tags t1</span><br><span class="line"></span><br><span class="line">PLAY [test] ******************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [include_tasks] *********************************************************************************************</span><br><span class="line">included: &#x2F;etc&#x2F;ansible&#x2F;in.yml for 10.1.61.187</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;1    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><p>如果想要tags对<code>include_tasks</code>中包含的所有任务生效，则需要使用<code>include_tasks</code>模块的apply参数并配合<code>tags: always</code>内置tag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;test task1&quot;</span><br><span class="line">    - include_tasks:</span><br><span class="line">        file: in.yml</span><br><span class="line">        apply:</span><br><span class="line">          tags: t1</span><br><span class="line">      tags: always</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;test task3&quot;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook include_tasks_ex.yml --tags t1</span><br><span class="line"></span><br><span class="line">PLAY [test] ******************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [include_tasks] *********************************************************************************************</span><br><span class="line">included: &#x2F;etc&#x2F;ansible&#x2F;in.yml for 10.1.61.187</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;test task2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;2    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><p>在上一篇我们讲到tags的时候说过，如果一个任务被打上了<code>tags: always</code>标签，则即使我们调用其他任务的标签，该任务也会被执行。</p><p>需要说明的是，在这里，<code>tags: always</code>标签只针对<code>include_tasks</code>本身生效，也就是说，如果其他任务的标签被调用，<code>include_tasks</code>本身会被调用，而其包含的任务不会被调用。如果要想其包含的任务也总是被调用，可修改配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;test task1&quot;</span><br><span class="line">    - include_tasks:</span><br><span class="line">        file: in.yml</span><br><span class="line">        apply:</span><br><span class="line">          tags: t1,always</span><br><span class="line">      tags: always</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;test task3&quot;</span><br></pre></td></tr></table></figure><h2 id="import-tasks"><a href="#import-tasks" class="headerlink" title="import_tasks"></a>import_tasks</h2><p><code>import_tasks</code>与<code>include_tasks</code>用法类似，都用于包含一个任务列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># cat import_tasks_ex.yml</span><br><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks</span><br><span class="line">    - debug: </span><br><span class="line">        msg: &quot;test task1&quot;</span><br><span class="line">    - import_tasks: in.yml</span><br><span class="line"></span><br><span class="line"># cat in.yml </span><br><span class="line">- debug:</span><br><span class="line">    msg: &quot;test task2&quot;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook import_tasks_ex.yml </span><br><span class="line"></span><br><span class="line">PLAY [test] ******************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;test task1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;test task2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;2    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;0    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><p>可以看到，<code>import_tasks</code>模块并不会像<code>include_tasks</code>模块一样，在控制台输出自身的任务信息，其相对透明。</p><p>除此之外，<code>import_tasks</code>和<code>include_tasks</code>还有如下不同：</p><ol><li><p><code>import_tasks</code>是静态的，被import的文件在playbook被加载时就预处理了，而<code>include_tasks</code>是动态的，被include的文件在playbook被运行时候才开始处理。一个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  vars: </span><br><span class="line">    file_name: in.yml</span><br><span class="line">  tasks:</span><br><span class="line">    - include_tasks: &#123;&#123; file_name &#125;&#125;</span><br><span class="line">    - import_tasks: &#123;&#123; file_name &#125;&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>include_tasks</code>和<code>import_tasks</code>均会被执行。</p><p>再看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - set_fact:</span><br><span class="line">        file_name: in.yml</span><br><span class="line">    - include_tasks: &#123;&#123; file_name &#125;&#125;</span><br><span class="line">    - import_tasks: &#123;&#123; file_name &#125;&#125;</span><br></pre></td></tr></table></figure><p>此时，<code>import_tasks</code>就会出错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook include_import_tasks_ex.yml</span><br><span class="line">ERROR! Error when evaluating variable in import path: &#123;&#123; file_name &#125;&#125;.</span><br><span class="line"></span><br><span class="line">When using static imports, ensure that any variables used in their names are defined in vars&#x2F;vars_files</span><br><span class="line">or extra-vars passed in from the command line. Static imports cannot use variables from facts or inventory</span><br><span class="line">sources like group or host vars.</span><br></pre></td></tr></table></figure><p>当使用静态的import时，请确保文件名中使用到的变量被定义在vars、vars_files或者extra-vars中，不支持其他的方式传入变量。</p></li><li><p>如果想要对包含的任务列表进行循环操作，则只能使用<code>include_tasks</code>，<code>import_tasks</code>不支持循环操作。也就是说，使用<code>loop</code>或者<code>with_X</code>对include文件进行循环操作时，只能配合<code>include_tasks</code>才能正常使用</p></li><li><p>当使用when对include文件添加条件判断时，<code>include_tasks</code>和<code>import_tasks</code><br>有着本质的不同：</p></li></ol><ul><li>当对<code>include_tasks</code>使用when时，when对应的条件只会应用于<code>include_tasks</code>任务本身，当执行被包含的任务时，不会对这些被包含的任务重新进行条件判断</li><li>当对<code>import_tasks</code>使用when时，when对应的条件会被应用于被import的文件中的每一个任务，当执行被import的任务时，会对每一个被包含的任务进行同样的条件判断。</li></ul><p>示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># cat include_import_tasks_ex2.yml              </span><br><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - name: set testvar to 0</span><br><span class="line">      set_fact: </span><br><span class="line">         testnum: 0</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &#39;include_tasks: in1.yml&#39;</span><br><span class="line">    - include_tasks: in1.yml</span><br><span class="line">      when: testnum &#x3D;&#x3D; 0</span><br><span class="line"></span><br><span class="line">    - name: set testvar to 0 </span><br><span class="line">      set_fact: </span><br><span class="line">        testnum: 0</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &#39;import_tasks: in1.yml&#39;</span><br><span class="line">    - import_tasks: in1.yml</span><br><span class="line">      when: testnum &#x3D;&#x3D; 0</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># ansible-playbook include_import_tasks_ex2.yml </span><br><span class="line"></span><br><span class="line">PLAY [test] ******************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [set testvar to 0] ******************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;include_tasks: in1.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [include_tasks] *********************************************************************************************</span><br><span class="line">included: &#x2F;etc&#x2F;ansible&#x2F;in1.yml for 10.1.61.187</span><br><span class="line"></span><br><span class="line">TASK [set_fact] **************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;test task2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [set testvar to 0] ******************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">ok: [10.1.61.187] &#x3D;&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;import_tasks: in1.yml&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TASK [set_fact] **************************************************************************************************</span><br><span class="line">ok: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">TASK [debug] *****************************************************************************************************</span><br><span class="line">skipping: [10.1.61.187]</span><br><span class="line"></span><br><span class="line">PLAY RECAP *******************************************************************************************************</span><br><span class="line">10.1.61.187                : ok&#x3D;8    changed&#x3D;0    unreachable&#x3D;0    failed&#x3D;0    skipped&#x3D;1    rescued&#x3D;0    ignored&#x3D;0</span><br></pre></td></tr></table></figure><h2 id="在handlers中使用include-tasks及import-tasks"><a href="#在handlers中使用include-tasks及import-tasks" class="headerlink" title="在handlers中使用include_tasks及import_tasks"></a>在handlers中使用include_tasks及import_tasks</h2><p>我们知道，handlers中执行的其实也是任务，只不过是被触发才会运行，所以如果要在handlers中引入任务，也可直接使用<code>include_tasks</code>和<code>import_tasks</code>。没有<code>include_handlers</code>的说法。</p><h2 id="import-playbook"><a href="#import-playbook" class="headerlink" title="import_playbook"></a>import_playbook</h2><p>我们在前面提到过，include除了可以引用任务列表，还可以引用整个playbook，在之后的版本中，如果想要引入playbook，则需要使用<code>import_playbook</code>模块。在2。8版本后，使用include引用整个playbook的特性会被弃用。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># cat import_playbook_ex.yml</span><br><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;test task&quot;</span><br><span class="line">- import_playbook: inplay.yml</span><br><span class="line"></span><br><span class="line"># cat inplay.yml</span><br><span class="line">- hosts: test</span><br><span class="line">  gather_facts: no</span><br><span class="line">  tasks:</span><br><span class="line">    - debug:</span><br><span class="line">        msg: &quot;test task in inplay.yml&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20. Ansible Playbook Roles</title>
      <link href="/2020/05/20/20.%20Ansible%20Playbook%20Roles/"/>
      <url>/2020/05/20/20.%20Ansible%20Playbook%20Roles/</url>
      
        <content type="html"><![CDATA[<h1 id="20-Ansible-Playbook-Roles"><a href="#20-Ansible-Playbook-Roles" class="headerlink" title="20. Ansible Playbook Roles"></a>20. Ansible Playbook Roles</h1><p>[toc]</p><h2 id="角色（roles）"><a href="#角色（roles）" class="headerlink" title="角色（roles）"></a>角色（roles）</h2><p>在Ansible中，role是将playbook分割为多个文件的主要机制。它大大简化了复杂playbook的编写，同时还使得它们非常易于复用。</p><h3 id="1-role的基本构成"><a href="#1-role的基本构成" class="headerlink" title="1. role的基本构成"></a>1. role的基本构成</h3><p>roles文件组织结构示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">group_vas&#x2F;</span><br><span class="line">site.yml</span><br><span class="line">webservers.yml</span><br><span class="line">roles&#x2F;</span><br><span class="line">   common&#x2F;</span><br><span class="line">     files&#x2F;</span><br><span class="line">     templates&#x2F;</span><br><span class="line">     tasks&#x2F;</span><br><span class="line">     handlers&#x2F;</span><br><span class="line">     vars&#x2F;</span><br><span class="line">     defaults&#x2F;</span><br><span class="line">     meta&#x2F;</span><br><span class="line">   webservers&#x2F;</span><br><span class="line">     files&#x2F;</span><br><span class="line">     templates&#x2F;</span><br><span class="line">     tasks&#x2F;</span><br><span class="line">     handlers&#x2F;</span><br><span class="line">     vars&#x2F;</span><br><span class="line">     defaults&#x2F;</span><br><span class="line">     meta&#x2F;</span><br></pre></td></tr></table></figure><p>roles各目录的作用及可用的文件：</p><ul><li>files：用于存放一些非模板文件的文件，如https证书等。</li><li>tempaltes：用于存放角色相关的Jinja2模板文件，当使用角色相关的模板时，如未明确指定模板路径，则默认使用此目录中的模板</li><li>tasks：角色所要执行的所有任务文件都存放于此，包含一个主文件main.yml，可以在主文件中通过include的方式引入其他任务文件</li><li>handlers：用于定义角色中需要调用 的handlers，包含一个主配置文件main.yml，可通过include引入其他的handlers文件。</li><li>vars：用于定义此角色用到的变量，包含一个主文件main.yml</li><li>meta：用于存储角色的元数据信息，这些元数据用于描述角色的相关属性，包括作者，角色的主要作用，角色的依赖关系等。默认这些信息会写入到当前目录下的main.yml文件中</li><li>defaults：除了vars目录，defaults目录也用于定义此角色用到的变量，与vars不同的是，defaults中定义的变量的优先级最低。</li></ul><p>创建role的步骤如下：</p><ol><li>创建以roles命名的目录</li><li>在roles目录中分别创建角色名称命名的目录，如websrvs等</li><li>在每个角色命名的目录中分别创建files、handlers、meta、tasks、teamplates和vars目录，用不到的目录可以创建为空目录，也可以不创建。</li><li>在playbook文件中，调用各角色</li></ol><blockquote><p>需要说明的是，以上目录并不都是必须的，如果你的roles当中并不需要用到某一个目录，也可以不用创建，比如我们将所有的变量都放到defaults中，则可以不需要vars目录，如果未用到模板文件，则不需要templates目录。</p></blockquote><h3 id="2-在playbook中使用roles"><a href="#2-在playbook中使用roles" class="headerlink" title="2. 在playbook中使用roles"></a>2. 在playbook中使用roles</h3><p>基本引用的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- hosts: webservers</span><br><span class="line">  roles:</span><br><span class="line">     - common</span><br><span class="line">     - webserver</span><br></pre></td></tr></table></figure><p>也可以通过如下方法引用时带入变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- hosts: webservers</span><br><span class="line">  roles:</span><br><span class="line">    - common</span><br><span class="line">    - &#123; role: foo_app_instance, dir: &#39;&#x2F;opt&#x2F;a&#39;,  port: 5000 &#125;</span><br><span class="line">    - &#123; role: foo_app_instance, dir: &#39;&#x2F;opt&#x2F;b&#39;,  port: 5001 &#125;</span><br></pre></td></tr></table></figure><p>还可以在引用时使用条件语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- hosts: webservers</span><br><span class="line">  roles:</span><br><span class="line">    - &#123; role: some_role, when: &quot;ansible_os_family &#x3D;&#x3D; &#39;RedHat&#39;&quot; &#125;</span><br></pre></td></tr></table></figure><p>下面也是一个带入变量的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- hosts: webservers</span><br><span class="line">  roles:</span><br><span class="line">    - role: database</span><br><span class="line">      vars: </span><br><span class="line">        database_name: &#123;&#123; db_name &#125;&#125;</span><br><span class="line">        database_user: &#123;&#123; db_pass &#125;&#125;</span><br><span class="line">    - role: webserver</span><br><span class="line">      vars: </span><br><span class="line">        live_hostname: web1</span><br><span class="line">        domains:</span><br><span class="line">          - example.com</span><br><span class="line">          - www.example.com</span><br></pre></td></tr></table></figure><blockquote><p>注1： 在引用roles时，在roles下使用vars传入的变量是全局的，即多个role都会共享这一变量</p></blockquote><blockquote><p>注2： 在roles当中，通过命令行传入的变量优先级最高，其次是定义在vars目录下的变量，再次是使用vars定义在引入的roles文件中的变量</p></blockquote><h3 id="3-pre-tasks和post-tasks"><a href="#3-pre-tasks和post-tasks" class="headerlink" title="3. pre_tasks和post_tasks"></a>3. <code>pre_tasks</code>和<code>post_tasks</code></h3><p>如果在执行一个role时，需要在其前或其后依然要执行某些任务，我们可以使用<code>pre_tasks</code>及<code>post_tasks</code>来声明。<code>pre_tasks</code>是在<code>role</code>之前执行，而<code>post_tasks</code>则在role之后执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- name: deply webservers</span><br><span class="line">  host: webservers</span><br><span class="line">  vars_files:</span><br><span class="line">    - secrets.yml</span><br><span class="line">  pre_tasks:</span><br><span class="line">    - name: update yum cache</span><br><span class="line">      yum: update_cache&#x3D;yes</span><br><span class="line">  roles:</span><br><span class="line">    - role: apache</span><br><span class="line">      database_host: &#123;&#123; hostvars.db.ansible_eth0.ipv4.address &#125;&#125;</span><br><span class="line">      domains:</span><br><span class="line">        - exampel.com</span><br><span class="line">        - www.example.com</span><br><span class="line">  post_tasks:</span><br><span class="line">    - name: print something</span><br><span class="line">      shell: echo &quot;The roles have been updated!&quot;</span><br></pre></td></tr></table></figure><h3 id="4-role的依赖"><a href="#4-role的依赖" class="headerlink" title="4. role的依赖"></a>4. role的依赖</h3><p>如果当前role在执行前需要依赖另一个role，我们可以在roles的meta目录中的main.yml中定义role的依赖关系。</p><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># roles&#x2F;webservers&#x2F;meta&#x2F;main.yml</span><br><span class="line">dependencies:</span><br><span class="line">  - &#123; role: common, some_parameter: 3 &#125;</span><br><span class="line">  - &#123; role: apache, port: 80 &#125;</span><br><span class="line">  - &#123; role: postgres, dbname: blarg, other_parameter: 12 &#125;</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  - &#123;role: ntp, ntp_server&#x3D;ntp.ubuntu.com&#125;</span><br><span class="line">  - &#123;role: web&#125;</span><br><span class="line">  - &#123;role: memcached&#125;</span><br></pre></td></tr></table></figure><h2 id="Ansible-Galaxy"><a href="#Ansible-Galaxy" class="headerlink" title="Ansible Galaxy"></a>Ansible Galaxy</h2><p>ansible-galaxy是一个工具，我们可以利用它快速的创建一个标准的roles目录结构，还可以通过它在<a href="https://galaxy.ansible.com上下载别人写好的roles，直接拿来用。" target="_blank" rel="noopener">https://galaxy.ansible.com上下载别人写好的roles，直接拿来用。</a></p><p>通过ansible-galaxy初始化一个roles的目录结构，方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-galaxy init my_new_role</span><br></pre></td></tr></table></figure><p>安装别人写好的roles：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-galaxy install -p &#x2F;etc&#x2F;ansible&#x2F;roles bennojoy.mysql</span><br></pre></td></tr></table></figure><p>列出已安装的roles：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-galaxy list</span><br></pre></td></tr></table></figure><p>查看已安装的roles信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-galaxy info bennojoy.mysql</span><br></pre></td></tr></table></figure><p>卸载roles：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-galaxy remove bennojoy.mysql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21. 动态Inventory管理</title>
      <link href="/2020/05/20/21.%20%E5%8A%A8%E6%80%81Inventory%E7%AE%A1%E7%90%86/"/>
      <url>/2020/05/20/21.%20%E5%8A%A8%E6%80%81Inventory%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="21-动态Inventory管理"><a href="#21-动态Inventory管理" class="headerlink" title="21. 动态Inventory管理"></a>21. 动态Inventory管理</h1><p>[toc]</p><h2 id="动态主机管理模块"><a href="#动态主机管理模块" class="headerlink" title="动态主机管理模块"></a>动态主机管理模块</h2><h3 id="add-host"><a href="#add-host" class="headerlink" title="add_host"></a>add_host</h3><p>在playbook执行的过程中，动态的添加主机到指定的主机组中<br>常用参数：  </p><ul><li>groups：添加主机至指定的组</li><li>name：要添加的主机名或IP地址</li></ul><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">a</span> <span class="string">host</span> <span class="string">to</span> <span class="string">group</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">add_host:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">"<span class="template-variable">&#123;&#123; item &#125;&#125;</span>"</span> </span><br><span class="line">        <span class="attr">group:</span> <span class="string">webservers</span> </span><br><span class="line">        <span class="string">foo=42</span> <span class="comment">#添加主机到webservers组中，主机的变量foo的值为42</span></span><br><span class="line">      <span class="attr">loop:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">host1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">host2</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">"<span class="template-variable">&#123;&#123; groups.webservers &#125;&#125;</span>"</span></span><br></pre></td></tr></table></figure><h3 id="group-by"><a href="#group-by" class="headerlink" title="group_by"></a>group_by</h3><p>在playbook执行的过程中，动态的创建主机组  </p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">operating</span> <span class="string">system</span> <span class="string">group</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="comment">#在playbook中设置一个新的主机组</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group_by:</span> </span><br><span class="line">        <span class="attr">key:</span> <span class="string">"os_<span class="template-variable">&#123;&#123; ansible_distribution &#125;&#125;</span>"</span></span><br><span class="line">    </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">on</span> <span class="string">CentOS</span> <span class="string">hosts</span> <span class="string">only</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">os_CentOS</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Apache</span></span><br><span class="line">      <span class="attr">yum:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span> </span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line">      </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">on</span> <span class="string">Ubuntu</span> <span class="string">hosts</span> <span class="string">only</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">os_Ubuntu</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Apache</span></span><br><span class="line">      <span class="attr">apt:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">apache2</span> </span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br></pre></td></tr></table></figure><h2 id="动态inventory管理"><a href="#动态inventory管理" class="headerlink" title="动态inventory管理"></a>动态inventory管理</h2><h3 id="动态inventory简介"><a href="#动态inventory简介" class="headerlink" title="动态inventory简介"></a>动态inventory简介</h3><p>在前面我们所有的选取主机组的操作都是通过维护inventory文件来完成的。而事实上，当在大规模应用当中，如果主机达成千上万台，这个时候还手动维护inventory文件将会给运维工作带来巨大的挑战。</p><p>在这种大规模的应用场景中，通常的做法是，将所有的主机都存储在cmdb当中。当需要对某一组主机或者某一类型的主机执行相应操作时，通过cmdb将相应主机取出来，动态的生成inventory，然后交由ansible处理即可。</p><p>所以其实Ansible Inventory包含静态inventory和动态inventory两部分。而我们前面通过手动在inventory文件中维护主机列表的方式即称之为静态inventory。而动态inventory则是指通过外部脚本获取主机列表，并按照ansible所要求的格式返回给ansible指令的操作方式。</p><p>动态inventory一般都会结合cmdb或者云计算平台等获取主机信息，由于主机资源一般会动态的进行增减，而这些系统一般会智能更新。我们需要通过这些工具提供的api或者接入库查询等方式返回主机列表。</p><h3 id="动态inventory脚本规约"><a href="#动态inventory脚本规约" class="headerlink" title="动态inventory脚本规约"></a>动态inventory脚本规约</h3><p>动态inventory脚本最终返回的满足ansible输出格式的json数据。ansible对于使用什么语言来实现动态inventory没有要求。但脚本必须支持两个参数：</p><ul><li>–list：用于返回所有的主机组信息，每个组所包含的主机列表hosts、子组列表children、主机变量列表vars都应该是字典形式的，而<code>_meta</code>则用于存放主机变量</li><li>–host <host>：返回指定主机的变量列表，也可返回一个空字典</li></ul><h3 id="动态inventory脚本示例"><a href="#动态inventory脚本示例" class="headerlink" title="动态inventory脚本示例"></a>动态inventory脚本示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">#cat dynamic_inventory.py</span><br><span class="line"></span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># coding: utf-8</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import argparse</span><br><span class="line"> </span><br><span class="line">try:</span><br><span class="line">    import json</span><br><span class="line">except ImportError:</span><br><span class="line">    import simplejson as json</span><br><span class="line"> </span><br><span class="line">class ExampleInventory(object):</span><br><span class="line"> </span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.inventory &#x3D; &#123;&#125;</span><br><span class="line">        self.read_cli_args()</span><br><span class="line"> </span><br><span class="line">        # Called with &#96;--list&#96;.</span><br><span class="line">        if self.args.list:</span><br><span class="line">            self.inventory &#x3D; self.inventory_groups()</span><br><span class="line">        # Called with &#96;--host [hostname]&#96;.</span><br><span class="line">        elif self.args.host:</span><br><span class="line">            # Not implemented, since we return _meta info &#96;--list&#96;.</span><br><span class="line">            self.inventory &#x3D; self.inventory_hosts(self.args.host)</span><br><span class="line">        # If no groups or vars are present, return empty inventory.</span><br><span class="line">        else:</span><br><span class="line">            self.inventory &#x3D; self.empty_inventory()</span><br><span class="line"> </span><br><span class="line">        print json.dumps(self.inventory);</span><br><span class="line"> </span><br><span class="line">    # Example inventory for testing.</span><br><span class="line"> </span><br><span class="line">    def inventory_groups(self):</span><br><span class="line">        return &#123;</span><br><span class="line">            &quot;webserver&quot;:  # 定义webserver组</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;hosts&quot;: [&quot;10.10.0.112&quot;],  # webserver 组内主机</span><br><span class="line">                &quot;vars&quot;: &#123;  # 组变量</span><br><span class="line">                    &quot;ansible_ssh_pass&quot;: &quot;123456&quot;,  </span><br><span class="line">                    &quot;ansible_ssh_port&quot;: &quot;27100&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;children&quot;: [&quot;dbserver&quot;]  # 定义子组</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;dbserver&quot;:</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;hosts&quot;: [&quot;10.10.0.109&quot;],</span><br><span class="line">                &quot;vars&quot;: &#123;</span><br><span class="line">                    &quot;ansible_ssh_pass&quot;: &quot;123456&quot;,</span><br><span class="line">                    &quot;ansible_ssh_port&quot;: &quot;27100&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#39;_meta&#39;: &#123;</span><br><span class="line">                # 定义主机变量</span><br><span class="line">                &#39;hostvars&#39;: &#123;</span><br><span class="line">                    &#39;10.10.0.112&#39;: &#123;</span><br><span class="line">                        &#39;host_specific_var&#39;: &#39;foo&#39;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#39;10.10.0.109&#39;: &#123;</span><br><span class="line">                        &#39;host_specific_var&#39;: &#39;bar&#39;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    def inventory_hosts(self,host):</span><br><span class="line">        if host &#x3D;&#x3D; &quot;10.10.0.112&quot;:</span><br><span class="line">            return &#123;</span><br><span class="line">              &#39;_meta&#39;: &#123;</span><br><span class="line">                &#39;hostvars&#39;: &#123;</span><br><span class="line">                    &#39;10.10.0.112&#39;: &#123;</span><br><span class="line">                        &#39;host_specific_var&#39;: &#39;foo&#39;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        elif host &#x3D;&#x3D; &quot;10.10.0.109&quot;:</span><br><span class="line">            return &#123;</span><br><span class="line">              &#39;_meta&#39;: &#123;</span><br><span class="line">                &#39;hostvars&#39;: &#123;</span><br><span class="line">                    &#39;10.10.0.109&#39;: &#123;</span><br><span class="line">                        &#39;host_specific_var&#39;: &#39;bar&#39;</span><br><span class="line">                    &#125;   </span><br><span class="line">                &#125;   </span><br><span class="line">              &#125;   </span><br><span class="line">            &#125;      </span><br><span class="line">        else:</span><br><span class="line">            return &#123;&#39;_meta&#39;: &#123;&#39;hostvars&#39;: &#123;&#125;&#125;&#125;</span><br><span class="line"> </span><br><span class="line">    # Read the command line args passed to the script.</span><br><span class="line">    def read_cli_args(self):</span><br><span class="line">        parser &#x3D; argparse.ArgumentParser()</span><br><span class="line">        parser.add_argument(&#39;--list&#39;, help&#x3D;&quot;list hosts&quot;, action &#x3D; &#39;store_true&#39;)</span><br><span class="line">        parser.add_argument(&#39;--host&#39;, help&#x3D;&quot;display hostvars for host&quot;,action &#x3D; &#39;store&#39;)</span><br><span class="line">        self.args &#x3D; parser.parse_args()</span><br><span class="line"> </span><br><span class="line"># Get the inventory.</span><br><span class="line">ExampleInventory()</span><br></pre></td></tr></table></figure><p>脚本需要设置<code>x</code>权限，否则ansible会提示没有权限调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x .&#x2F;dynamic_inventory.py</span><br></pre></td></tr></table></figure><p>执行该脚本，返回如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#  .&#x2F;dynamic_inventory.py --list</span><br><span class="line">&#123;&quot;webserver&quot;: &#123;&quot;hosts&quot;: [&quot;10.10.0.112&quot;], &quot;vars&quot;: &#123;&quot;ansible_ssh_port&quot;: &quot;27100&quot;, &quot;ansible_ssh_pass&quot;: &quot;123456&quot;&#125;, &quot;children&quot;: [&quot;dbserver&quot;]&#125;, &quot;_meta&quot;: &#123;&quot;hostvars&quot;: &#123;&quot;10.10.0.112&quot;: &#123;&quot;host_specific_var&quot;: &quot;foo&quot;&#125;, &quot;10.10.0.109&quot;: &#123;&quot;host_specific_var&quot;: &quot;bar&quot;&#125;&#125;&#125;, &quot;dbserver&quot;: &#123;&quot;hosts&quot;: [&quot;10.10.0.109&quot;], &quot;vars&quot;: &#123;&quot;ansible_ssh_port&quot;: &quot;27100&quot;, &quot;ansible_ssh_pass&quot;: &quot;123456&quot;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"># .&#x2F;dynamic_inventory.py --host 10.10.0.109</span><br><span class="line">&#123;&quot;_meta&quot;: &#123;&quot;hostvars&quot;: &#123;&quot;10.10.0.109&quot;: &#123;&quot;host_specific_var&quot;: &quot;bar&quot;&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"># .&#x2F;dynamic_inventory.py --host 192.168.0.1</span><br><span class="line">&#123;&quot;_meta&quot;: &#123;&quot;hostvars&quot;: &#123;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>通过ansible操作示例如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ansible -i dynamic_inventory.py webserver --list-hosts</span></span><br><span class="line">  hosts (1):</span><br><span class="line">    10.10.0.112</span><br><span class="line"></span><br><span class="line"><span class="comment"># ansible -i dynamic_inventory.py all --list-hosts</span></span><br><span class="line">  hosts (2):</span><br><span class="line">    10.10.0.112</span><br><span class="line">    10.10.0.109</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22. Ansible性能调优</title>
      <link href="/2020/05/20/22.%20Ansible%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
      <url>/2020/05/20/22.%20Ansible%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h1 id="22-Ansible性能调优"><a href="#22-Ansible性能调优" class="headerlink" title="22. Ansible性能调优"></a>22. Ansible性能调优</h1><p>[toc]</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在当前配置管理工具大行其道的应用中，ansible凭借其轻量级、agentless等特性得以占据一席之地。然而其也并不是完美无缺，事实上，其最为人所诟病的就是在大规模服务器应用场景当中表现出的性能问题。所以本篇文档就来说一说如何通过一些配置优化来加速ansible的运行。</p><h2 id="SSH-Multiplexing"><a href="#SSH-Multiplexing" class="headerlink" title="SSH Multiplexing"></a>SSH Multiplexing</h2><p>默认情况下，ansible基于ssh连接被控端，当ansible在运行playbook的时候，会建立很多的ssh连接来执行相应的task，而每个task都会创建一个新的ssh连接，ssh连接的建立毫无疑问需要额外tcp建立连接的开销。</p><p>openssh支持一个优化，叫做ssh nultiplexing，也被称作ControlPersist。当启用了该特性，则多个连接到相同主机的ssh会话将会共享相同的tcp连接。这样就只有第一次连接的时候需要进行TCP三次握手。</p><p>当启用Multiplexing后：</p><ul><li>第一次ssh连接到主机的时候，openssh会创建一个主连接</li><li>紧接着openssh会创建一个控制套接字，通过主连接与远程主机关联</li><li>当有新的ssh尝试连接到主机时，openssh将使用控制套接字与远程主机通信，并不会创建新的tcp连接</li></ul><p>开启该配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#cat ansible.cfg</span><br><span class="line">[ssh_connection]</span><br><span class="line">ssh_args &#x3D; -C -o ControlMaster&#x3D;auto -o ControlPersist&#x3D;10m</span><br></pre></td></tr></table></figure><p>配置项说明：</p><ul><li>ControlMaster：启用ssh multiplexing，auto用于告诉ssh在主连接和控制套接字不存在的情况下，自动创建它们</li><li>ControlPersist：在主连接和控制套接字创建后的多长时间内，如果一直没有ssh连接，就关闭它们。</li></ul><h2 id="pipelining"><a href="#pipelining" class="headerlink" title="pipelining"></a>pipelining</h2><p>在说明pipelining之前，需要先了解下ansible是如何执行一个task的：</p><ol><li>基于playbook中的task生成一个python脚本</li><li>将生成的python脚本复制到被控主机上</li><li>在被控主机上运行这个脚本</li></ol><p>上面三个步骤中，后面两个步骤会产生两个ssh会话。而在pipelinin模式下，ansible执行python脚本时并不会复制它，而是通过管道传递给ssh会话。这样一来，就会让原本需要的两个ssh会话减少为一个，以降低开销，节省时间。</p><p>启用pipelining：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#cat ansible.cfg</span><br><span class="line">[defaults]</span><br><span class="line">pipelining &#x3D; True</span><br></pre></td></tr></table></figure><p>需要注意的是，如果开启pipelining，则需要在被控端的/etc/sudoers文件中关闭requiretty：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cat /etc/sudoers.d/ansible</span></span><br><span class="line">ansible    ALL=(ALL)       NOPASSWD:ALL</span><br><span class="line">Defaults:ansible !requiretty</span><br></pre></td></tr></table></figure><h2 id="并发执行"><a href="#并发执行" class="headerlink" title="并发执行"></a>并发执行</h2><p>默认情况下，ansible在批量连接客户端执行play时的并发数是5个，可以通过调整该值来提高并发数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">forks &#x3D; 20</span><br></pre></td></tr></table></figure><p>即使提高了并发个数，playbook也可能在执行一个需要较长时间的任务时导致阻塞，针对这类任务，可以使用异步的方式来运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- hosts: all</span><br><span class="line">  tasks:</span><br><span class="line">    - name: Install mlocate</span><br><span class="line">      yum: </span><br><span class="line">        name: mlocate </span><br><span class="line">        state: installed</span><br><span class="line">    - name: Run updatedb</span><br><span class="line">      command: &#x2F;usr&#x2F;bin&#x2F;updatedb</span><br><span class="line">      async:300</span><br><span class="line">      poll:10</span><br></pre></td></tr></table></figure><p>当使用上面的任务控制超过forks设置的节点个数时，’install mlocate’任务会先在<code>forks</code>个节点上跑，完成后再继续下一批，这个并发数是由我们设置的<code>forks</code>选项控制的。而’Run updatedb’这个任务会一次性在所有节点上都执行，执行的超时时间为300s，然后每10s轮循一次检查它是否完成。需要说明的是，因为需要等待其执行完成，所以如果这个任务比较耗时，仍然需要等待其执行完毕后才能开始下一个任务。</p><p>但是如果该任务只是一个后台任务，比如只是在后台执行一个脚本或者启动一个服务，不需要等待其返回结果。那就不需要检查这个任务是否完成，只需要继续执行其它任务，最后再使用wait_for这个模块去检查之前的脚本或者服务是否按预期中运行了便可。这时候只需要把poll的值设置为0，便可以按上面的要求配置ansible不等待job的完成。</p><p>还有一种需求，假如一个task，它就是需要运行很长的时间，不能让它超时退出，需要一直等待这个task完成。这个时候就需要将async的值设置为0。</p><p>总结来说，大概有以下的一些场景需要使用到ansible的polling特性：</p><ul><li>某个task需要运行很长的时间,这个task很可能会达到timeout。</li><li>某个task需要在大量的机器上面运行</li><li>某个task是不需要等待它完成的</li></ul><p>当然也有一些场景是不适合使用：</p><ul><li>这个任务是需要运行完后才能继续另外的任务的</li><li>这个任务能很快的完成</li></ul><h2 id="accelerate模式"><a href="#accelerate模式" class="headerlink" title="accelerate模式"></a>accelerate模式</h2><p>Ansible官方建议在可以使用pipelining的情况下，尽量使用pipelining而不是accelerate模式。accelerate只在如下情况下有用处：</p><ul><li>管理centos6或者更早的那些依然使用paramikio作为连接被控节点的场景</li><li>无法使用pipelining的场景</li></ul><p>加速模式通过启动一个临时的 SSH守护进程来工作。只要这个守护进程在运行，Ansible将会直接通过socket来连接。Ansible通过在连接时交换临时的AES key来确保安全(这个秘钥对每个主机都是不同的并且会定期重新生成).。默认配置下，Ansible会为加速模式开启5099端口(此配置可修改)。一旦运行了，守护进程将会维持连接30分钟，过了时限后该连接将会自动终结，你需要重启一个 SSH。</p><p>accelerate模式配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#cat ansible.cfg</span><br><span class="line">[accelerate]</span><br><span class="line">accelerate_port &#x3D; 5099</span><br><span class="line">accelerate_timeout &#x3D; 30</span><br><span class="line">accelerate_connect_timeout &#x3D; 5.0</span><br></pre></td></tr></table></figure><blockquote><p>需要说明的是，如果要开启accelerate模式，需要在管理端和被控端都安装python-keyczar软件包</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23. Ansible调试</title>
      <link href="/2020/05/20/23.%20Ansible%E8%B0%83%E8%AF%95/"/>
      <url>/2020/05/20/23.%20Ansible%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="23-Ansible调试"><a href="#23-Ansible调试" class="headerlink" title="23. Ansible调试"></a>23. Ansible调试</h1><p>[toc]</p><h2 id="运行前检查"><a href="#运行前检查" class="headerlink" title="运行前检查"></a>运行前检查</h2><ol><li><p>当我们在运行ansible-playbook时，使用–check选项时，将不会对受控主机作出任何更改，而是通过模拟运行的方式执行所有task，以用于检查playbook在运行时的状态：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook foo.yml --check</span><br></pre></td></tr></table></figure></li><li><p>在运行ansible-playbook时，如果使用–diff选项配合–check选项，可以用于检查本次执行play时，相较上一次产生了哪些改变：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook foo.yml  --check --diff --limit foo.example.com</span><br></pre></td></tr></table></figure></li><li><p>有些时候，我们在检测模式下运行play时，我们会希望某个play总是运行，我们可以使用always_run子句：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">this</span> <span class="string">task</span> <span class="string">is</span> <span class="string">run</span> <span class="string">even</span> <span class="string">in</span> <span class="string">check</span> <span class="string">mode</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/something/to/run</span> <span class="string">--even-in-check-mode</span></span><br><span class="line">    <span class="attr">always_run:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><blockquote><p>需要说明的是，如果一个task中同时包含when和always_run，如果when返回了false，即使alwys_run为true，任务依然会被跳过。</p></blockquote></li></ol><h2 id="打印详细输出信息"><a href="#打印详细输出信息" class="headerlink" title="打印详细输出信息"></a>打印详细输出信息</h2><p>参考<a href="https://www.cnblogs.com/breezey/p/8811250.html" target="_blank" rel="noopener">《6. Ansible Playbook基本使用》</a></p><h1 id="使用debug模块"><a href="#使用debug模块" class="headerlink" title="使用debug模块"></a>使用debug模块</h1><p>在前面debug模块使用的比较多了，这里直接再给个示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tasks:</span><br><span class="line">  - debug:</span><br><span class="line">      var: myvariable</span><br><span class="line">  - debug:</span><br><span class="line">      msg: &quot;The value of myvariable is &#123;&#123; var &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h2 id="使用assert模块"><a href="#使用assert模块" class="headerlink" title="使用assert模块"></a>使用assert模块</h2><p>assert模块会在指定的条件不符合的时候返回错误并失败退出。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当目标机没有eth1网卡时则playbook会返回失败</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">assert</span> <span class="string">that</span> <span class="string">eth1</span> <span class="string">interface</span> <span class="string">exists</span></span><br><span class="line">  <span class="attr">assert:</span></span><br><span class="line">    <span class="attr">that:</span> <span class="string">ansible_eth1</span> <span class="string">is</span> <span class="string">defined</span></span><br></pre></td></tr></table></figure><p>当调试playbook的时候，插入assert模块在我们设定的某些条件不成立时立刻失败，对调试很有用。</p><p>下面示例用于检查目标文件是否是一个目录，如果不是，则失败退出：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">stat</span> <span class="string">/opt/foo</span></span><br><span class="line">  <span class="attr">stat:</span> <span class="string">path=/opt/foo</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">st</span></span><br><span class="line">  </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">assert</span> <span class="string">that</span> <span class="string">/opt/foo</span> <span class="string">is</span> <span class="string">a</span> <span class="string">directory</span></span><br><span class="line">  <span class="attr">assert:</span></span><br><span class="line">    <span class="attr">that:</span> <span class="string">st.stat.isdir</span></span><br></pre></td></tr></table></figure><h2 id="限制特定的task运行"><a href="#限制特定的task运行" class="headerlink" title="限制特定的task运行"></a>限制特定的task运行</h2><h3 id="指定任务执行"><a href="#指定任务执行" class="headerlink" title="指定任务执行"></a>指定任务执行</h3><p>可以通过–start-at-task参数告诉Ansible从指定的task开始运行playbook，而不是从头开始运行。如果你的playbook因为某一个task中有bug而失败了，在你修复了这个bug后希望从被修复的这个task开始再次执行playbook的时候，就可以使用这个参数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下命令会从名为"install packages"的任务开始执行playbook</span></span><br><span class="line"></span><br><span class="line">ansible-playbook playbook.yml --start-at-task=<span class="string">"install packages"</span></span><br></pre></td></tr></table></figure><h3 id="分步执行"><a href="#分步执行" class="headerlink" title="分步执行"></a>分步执行</h3><p>可以通过<code>--step</code>选项来交互式的执行playbook：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook playbook.yml --step</span><br></pre></td></tr></table></figure><p>这样ansible在每个任务前会自动停止,并询问是否应该执行该任务。<br>假如有一个名为”configure ssh”的任务,playbook执行到这里会停止并询问:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Perform task: configure ssh (y/n/c):</span><br></pre></td></tr></table></figure><ul><li>“y”会执行该任务</li><li>“n”会跳过该任务</li><li>“c”则会继续执行剩余的所有任务而不再询问</li></ul><h3 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h3><p>参考<a href="">《17. Ansible Playbook之tags》</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24. Ansible AWX基本部署和使用</title>
      <link href="/2020/05/20/24.%20Ansible%20AWX%E5%9F%BA%E6%9C%AC%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/20/24.%20Ansible%20AWX%E5%9F%BA%E6%9C%AC%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="24-Ansible-AWX基本部署和使用"><a href="#24-Ansible-AWX基本部署和使用" class="headerlink" title="24. Ansible AWX基本部署和使用"></a>24. Ansible AWX基本部署和使用</h1><p>[toc]</p><h2 id="AWX简介"><a href="#AWX简介" class="headerlink" title="AWX简介"></a>AWX简介</h2><h2 id="AWX部署"><a href="#AWX部署" class="headerlink" title="AWX部署"></a>AWX部署</h2><p><a href="https://www.jianshu.com/p/67068436a052" target="_blank" rel="noopener">https://www.jianshu.com/p/67068436a052</a></p><h2 id="AWX的基本使用"><a href="#AWX的基本使用" class="headerlink" title="AWX的基本使用"></a>AWX的基本使用</h2><p>基本使用：<br><a href="https://blog.51cto.com/10616534/2407182" target="_blank" rel="noopener">https://blog.51cto.com/10616534/2407182</a></p><p>更详细的用法：</p><p><a href="https://kionf.com/2018/11/21/tower-useage/" target="_blank" rel="noopener">https://kionf.com/2018/11/21/tower-useage/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25. Ansible become用法</title>
      <link href="/2020/05/20/25.%20Ansible%20become%E7%94%A8%E6%B3%95/"/>
      <url>/2020/05/20/25.%20Ansible%20become%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="25-Ansible-become用法"><a href="#25-Ansible-become用法" class="headerlink" title="25. Ansible become用法"></a>25. Ansible become用法</h1><p>这篇文章，我们来专门说一说ansible的become相关参数的用法。</p><p>在实际生产环境中，通常服务器的root用户是被禁用的，我们都只会通过一个一个普通用户使用sudo来完成提权操作。也就意味着，我们没有办法直接通过ansible获取远程用户的root执行权限。</p><p>ansible在playbook中提供如下几个常用参数来完成提权操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">become  <span class="comment"># 是否开启become提权</span></span><br><span class="line">become_user <span class="comment"># 要提权获取哪个用户的身份，默认为root</span></span><br><span class="line">become_method   <span class="comment"># 提权方式，有sudo、su、enable等，默认是sudo</span></span><br></pre></td></tr></table></figure><blockquote><p>需要说明的是，become_method默认的方式是sudo。如果使用这种方式，普通用户会直接取得become_user的身份，这个时候如果要查看当前用户的家目录，查看到的也是become_user的家目录，而不是原用户的家目录，如果要查看原用户的家目录，需要将become_method修改为enable</p></blockquote><p>ansible的内置变量，与become相关的参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ansible_become</span><br><span class="line">ansible_become_method</span><br><span class="line">ansible_become_user</span><br><span class="line">ansible_become_pass</span><br></pre></td></tr></table></figure><p>下面是一个示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test ansible_ssh_host&#x3D;192.168.0.1 ansible_ssh_port&#x3D;22 ansible_ssh_user&#x3D;breeze ansible_ssh_pass&#x3D;xxxxxx ansible_become_pass&#x3D;xxxxxx ansible_become_user&#x3D;root</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26. Ansible lineinfile模块</title>
      <link href="/2020/05/20/26.%20Ansible%20lineinfile%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/05/20/26.%20Ansible%20lineinfile%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="26-Ansible-lineinfile模块"><a href="#26-Ansible-lineinfile模块" class="headerlink" title="26. Ansible lineinfile模块"></a>26. Ansible lineinfile模块</h1><p>[toc]</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>之所以专门说一说这个模块，是因为lineinfile在实际使用中非常有用。</p><p>实际上，在大多数时候，我们在linux上的操作，就是针对文件的操作，通过配置管理工具对配置文件作统一的配置修改是一个非常酷的功能。</p><p>下面是官方针对该模块的说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lineinfile - Ensure a particular line is in a file, or replace an existing line using a back-referenced regular expression</span><br></pre></td></tr></table></figure><p>简单讲，这个模块就是针对一个文件中行内容的操作。</p><p>下面我们详细说一说其具体可以做的事情。</p><h2 id="修改匹配行"><a href="#修改匹配行" class="headerlink" title="修改匹配行"></a>修改匹配行</h2><p>下面是一个简单的task示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将/etc/selinux/config中匹配到以'SELINUX='开头的行，将其替换为'SELINUX=disabled'</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">modify</span> <span class="string">selinux</span> <span class="string">to</span> <span class="string">disabled</span></span><br><span class="line">  <span class="attr">lineinfile:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/etc/selinux/config</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">'^SELINUX='</span></span><br><span class="line">    <span class="attr">line:</span> <span class="string">'SELINUX=disabled'</span></span><br></pre></td></tr></table></figure><h2 id="在匹配行前或后添加内容"><a href="#在匹配行前或后添加内容" class="headerlink" title="在匹配行前或后添加内容"></a>在匹配行前或后添加内容</h2><p>示例文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cat &#x2F;etc&#x2F;http.conf</span><br><span class="line"></span><br><span class="line">Listen 127.0.0.1:80</span><br><span class="line">Listen 80</span><br><span class="line">Port</span><br></pre></td></tr></table></figure><h3 id="在匹配行前添加"><a href="#在匹配行前添加" class="headerlink" title="在匹配行前添加"></a>在匹配行前添加</h3><p>在http.conf文件的<code>Listen 80</code>前面添加一行<code>Listen 8080</code>，task示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: add line before Listen 80</span><br><span class="line">  lineinfile:</span><br><span class="line">    dest: &#x2F;etc&#x2F;http.conf</span><br><span class="line">    insertbefore: &#39;^Listen 80&#39;</span><br><span class="line">    line: &#39;Listen 8080&#39;</span><br></pre></td></tr></table></figure><h3 id="在匹配行后添加"><a href="#在匹配行后添加" class="headerlink" title="在匹配行后添加"></a>在匹配行后添加</h3><p>在http.conf文件的<code>Port</code>后面添加一行<code>just a test</code>，task示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: add line before Listen 80</span><br><span class="line">  lineinfile:</span><br><span class="line">    dest: &#x2F;etc&#x2F;http.conf</span><br><span class="line">    insertafter: &#39;^Port&#39;</span><br><span class="line">    line: &#39;just a test&#39;</span><br></pre></td></tr></table></figure><h2 id="修改文件内容及权限"><a href="#修改文件内容及权限" class="headerlink" title="修改文件内容及权限"></a>修改文件内容及权限</h2><p>示例文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cat /etc/hosts</span></span><br><span class="line"></span><br><span class="line">127.0.0.1       localhost.localdomain localhost ::1       localhost6.localdomain6 localhost6</span><br><span class="line">10.1.61.130     hub.dz11.com</span><br></pre></td></tr></table></figure><p>修改/etc/hosts，将以<code>127.0.0.1</code>开头的行替换为<code>127.0.0.1 localhost</code>，并将/etc/hosts的属主和属组都修改为root，权限改为644，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- name: modify hosts</span><br><span class="line">  lineinfile:</span><br><span class="line">    dest: &#x2F;etc&#x2F;hosts</span><br><span class="line">    regex: &#39;^127\.0\.0\.1&#39;</span><br><span class="line">    line: &#39;127.0.0.1 localhost&#39;</span><br><span class="line">    owner: root</span><br><span class="line">    group: root</span><br><span class="line">    mode: 0644</span><br></pre></td></tr></table></figure><h2 id="删除一行内容"><a href="#删除一行内容" class="headerlink" title="删除一行内容"></a>删除一行内容</h2><p>示例原文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#cat /etc/hosts</span></span><br><span class="line"></span><br><span class="line">127.0.0.1       localhost.localdomain localhost ::1       localhost6.localdomain6 localhost6</span><br><span class="line">10.1.61.130     hub.dz11.com</span><br></pre></td></tr></table></figure><p>删除以<code>10.1.61.130</code>开头的行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: delete a line</span><br><span class="line">  lineinfile:</span><br><span class="line">    dest: &#x2F;etc&#x2F;hosts</span><br><span class="line">    regex: &#39;^10\.1\.61&#39;</span><br><span class="line">    state: absent</span><br></pre></td></tr></table></figure><h2 id="文件存在则添加一行内容"><a href="#文件存在则添加一行内容" class="headerlink" title="文件存在则添加一行内容"></a>文件存在则添加一行内容</h2><p>往/etc/hosts里添加一行<code>10.1.61.131 test.dz11.com</code>（多次执行，不会重复添加），示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">a</span> <span class="string">line</span></span><br><span class="line">  <span class="attr">lineinfile:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/etc/hosts</span></span><br><span class="line">    <span class="attr">line:</span> <span class="string">'10.1.61.131 test.dz11.com'</span></span><br></pre></td></tr></table></figure><h2 id="如果有匹配的行则修改该行，如果不匹配则添加"><a href="#如果有匹配的行则修改该行，如果不匹配则添加" class="headerlink" title="如果有匹配的行则修改该行，如果不匹配则添加"></a>如果有匹配的行则修改该行，如果不匹配则添加</h2><p>示例原文件/tmp/test.txt内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %wheel   ALL=(ALL)   ALL</span></span><br></pre></td></tr></table></figure><p>下面的示例task中，匹配以<code>%wheel</code>开头的行，匹配到，则执行替换，未匹配，则添加。因为原文件中，没有以<code>%wheel</code>开头的行，所以会添加一行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">or</span> <span class="string">modify</span> <span class="string">a</span> <span class="string">line</span></span><br><span class="line">  <span class="attr">lineinfile:</span> </span><br><span class="line">    <span class="attr">path:</span> <span class="string">/tmp/test.txt</span></span><br><span class="line">    <span class="attr">regex:</span> <span class="string">'^%wheel'</span></span><br><span class="line">    <span class="attr">line:</span> <span class="string">'%wheel  ALL=(ALL)       NOPASSWD: ALL'</span></span><br></pre></td></tr></table></figure><p>修改后的文件如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cat /tmp/text.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %wheel   ALL=(ALL)   ALL</span></span><br><span class="line">%wheel  ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><h2 id="参数backrefs，backup说明"><a href="#参数backrefs，backup说明" class="headerlink" title="参数backrefs，backup说明"></a>参数backrefs，backup说明</h2><ul><li>backup： 是否备份原文件，默认为no</li><li>backrefs：<ul><li>当backrefs为no时，如果regex没有匹配到行，则添加一行，如果Regx匹配到行，则修改该行</li><li>当backrefs为yes时，如果regex没有匹配到行，则保持原文件不变，如果regex匹配到行，则修改该行</li><li>backrefs默认为no，所以上面那个示例中，我们没有配置backrefs，而默认没有匹配，则修改。</li></ul></li></ul><p>下面我们看一看backrefs为yes时匹配到行的示例：</p><p>示例原文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /tmp/testfile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %wheel   ALL=(ALL)   ALL</span></span><br><span class="line">%wheel  ALL=(ALL)       NOPASSWD: ALL</span><br><span class="line"><span class="comment">#?bar</span></span><br></pre></td></tr></table></figure><p>task示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- name: test backrefs</span><br><span class="line"> lineinfile:</span><br><span class="line">     backup: yes</span><br><span class="line">     state: present</span><br><span class="line">     path: &#x2F;tmp&#x2F;testfile</span><br><span class="line">     regexp: &#39;^#\?bar&#39;</span><br><span class="line">     backrefs: yes</span><br><span class="line">     line: &#39;bar&#39;</span><br></pre></td></tr></table></figure><p>修改后的文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /tmp/testfile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %wheel   ALL=(ALL)   ALL</span></span><br><span class="line">%wheel  ALL=(ALL)       NOPASSWD: ALL</span><br><span class="line">bar</span><br></pre></td></tr></table></figure><h2 id="使用validate验证文件是否正确修改"><a href="#使用validate验证文件是否正确修改" class="headerlink" title="使用validate验证文件是否正确修改"></a>使用validate验证文件是否正确修改</h2><p>在一些场景下，我们修改完文件后，需要对文件做一下测试，用以检查文件修改之后，是否能正常运行。如http.conf、nginx.conf等，一旦改错，而不加以测试，可能会直接导致http服务挂掉。</p><p>可以使用validate关键字，在修改完成以后，对文件执行检测：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- name: test validate</span><br><span class="line">  lineinfile:</span><br><span class="line">      dest: &#x2F;etc&#x2F;sudoers</span><br><span class="line">      state: present</span><br><span class="line">      regexp: &#39;^%ADMIN ALL&#x3D;&#39;</span><br><span class="line">      line: &#39;%ADMIN ALL&#x3D;(ALL)&#39;</span><br><span class="line">      validate: &#39;visudo -cf %s&#39;</span><br><span class="line">  tags:</span><br><span class="line">    - testsudo</span><br></pre></td></tr></table></figure><p>参考：<a href="http://blog.51cto.com/zouqingyun/1882367" target="_blank" rel="noopener">http://blog.51cto.com/zouqingyun/1882367</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27. Ansible安装与运行常见错误</title>
      <link href="/2020/05/20/27.%20Ansible%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BF%90%E8%A1%8C%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
      <url>/2020/05/20/27.%20Ansible%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BF%90%E8%A1%8C%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="27-ansible安装与运行常见错误"><a href="#27-ansible安装与运行常见错误" class="headerlink" title="27.ansible安装与运行常见错误"></a>27.ansible安装与运行常见错误</h1><p>[toc]</p><h2 id="pip安装ansible附加包时编译错误"><a href="#pip安装ansible附加包时编译错误" class="headerlink" title="pip安装ansible附加包时编译错误"></a>pip安装ansible附加包时编译错误</h2><p>错误示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install paramiko PyYAML Jinja2 httplib2six</span><br><span class="line">Downloading&#x2F;unpacking paramiko</span><br><span class="line">  Cannot fetch index base URL http:&#x2F;&#x2F;pypi.python.org&#x2F;simple&#x2F;</span><br><span class="line">  Downloading paramiko-2.0.2.tar.gz (1.2Mb): 1.2Mb downloaded</span><br><span class="line">  Running setup.py egg_info for package paramiko</span><br><span class="line">     </span><br><span class="line">Downloading&#x2F;unpacking PyYAML</span><br><span class="line">  Downloading PyYAML-3.12.tar.gz (253Kb): 253Kb downloaded</span><br><span class="line">  Running setup.py egg_info for package PyYAML</span><br><span class="line">     </span><br><span class="line">Downloading&#x2F;unpacking Jinja2</span><br><span class="line">  Real name of requirement Jinja2 is jinja2</span><br><span class="line">  Downloading Jinja2-2.8.tar.gz (357Kb): 45Kb downloaded</span><br><span class="line">Exception:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;pip&#x2F;basecommand.py&quot;, line 126, in main</span><br><span class="line">    self.run(options, args)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;pip&#x2F;commands&#x2F;install.py&quot;, line 223, in run</span><br><span class="line">    requirement_set.prepare_files(finder, force_root_egg_info&#x3D;self.bundle, bundle&#x3D;self.bundle)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;pip&#x2F;req.py&quot;, line 955, in prepare_files</span><br><span class="line">    self.unpack_url(url, location, self.is_download)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;pip&#x2F;req.py&quot;, line 1072, in unpack_url</span><br><span class="line">    return unpack_http_url(link, location, self.download_cache, only_download)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;pip&#x2F;download.py&quot;, line 441, in unpack_http_url</span><br><span class="line">    download_hash &#x3D; _download_url(resp, link, temp_location)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;pip&#x2F;download.py&quot;, line 366, in _download_url</span><br><span class="line">    chunk &#x3D; resp.read(4096)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;socket.py&quot;, line 380, in read</span><br><span class="line">    data &#x3D; self._sock.recv(left)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;httplib.py&quot;, line 569, in read</span><br><span class="line">    s &#x3D; self.fp.read(amt)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;socket.py&quot;, line 380, in read</span><br><span class="line">    data &#x3D; self._sock.recv(left)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;ssl.py&quot;, line 241, in recv</span><br><span class="line">    return self.read(buflen)</span><br><span class="line">  File &quot;&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;ssl.py&quot;, line 160, in read</span><br><span class="line">    return self._sslobj.read(len)</span><br><span class="line">error: [Errno 104] Connection reset by peer</span><br><span class="line">Storing complete log in &#x2F;home&#x2F;ansible&#x2F;.pip&#x2F;pip.log</span><br><span class="line">error: Setup script exited with error: command &#39;gcc&#39; failed with exit status 1</span><br><span class="line">make: *** [install] Error 1</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install python-dev</span><br><span class="line">$ sudo apt-get install libffi-dev</span><br></pre></td></tr></table></figure><h2 id="Failed-to-connect-to-the-host-via-ssh错误"><a href="#Failed-to-connect-to-the-host-via-ssh错误" class="headerlink" title="Failed to connect to the host via ssh错误"></a>Failed to connect to the host via ssh错误</h2><p>错误示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ansible all -m ping -u root</span><br><span class="line">192.168.3.2 | UNREACHABLE! &#x3D;&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;msg&quot;: &quot;Failed to connect to the host via ssh.&quot;, </span><br><span class="line">    &quot;unreachable&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法：<br>在/etc/ansible/hosts中开启如下配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ssh_connection]</span><br><span class="line">scp_if_ssh &#x3D; True</span><br></pre></td></tr></table></figure><h2 id="通过ping返回错误"><a href="#通过ping返回错误" class="headerlink" title="通过ping返回错误"></a>通过ping返回错误</h2><p>错误示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ansible share -m ping</span><br><span class="line">192.168.30.200 | UNREACHABLE! &#x3D;&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;msg&quot;: &quot;SSH Error: data could not be sent to the remote host. Make sure this host can be reached over ssh&quot;, </span><br><span class="line">    &quot;unreachable&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法：<br>在/etc/ansible/hosts中开启如下配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ssh_connection]</span><br><span class="line">scp_if_ssh &#x3D; True</span><br></pre></td></tr></table></figure><p>配置后需要检查远程被控机器的ssh是否打开sftp，否则无法联通：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line">Subsystem sftp &#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;sftp-server</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>28. python调用ansible api示例</title>
      <link href="/2020/05/20/28.%20python%E8%B0%83%E7%94%A8ansible%20api%E7%A4%BA%E4%BE%8B/"/>
      <url>/2020/05/20/28.%20python%E8%B0%83%E7%94%A8ansible%20api%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="28-python调用ansible-api示例"><a href="#28-python调用ansible-api示例" class="headerlink" title="28. python调用ansible api示例"></a>28. python调用ansible api示例</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ansible.runner</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># construct the ansible runner and execute on all hosts</span></span><br><span class="line">results = ansible.runner.Runner(</span><br><span class="line">    pattern=<span class="string">'*'</span>, forks=<span class="number">10</span>,</span><br><span class="line">    module_name=<span class="string">'command'</span>, module_args=<span class="string">'/usr/bin/uptime'</span>,</span><br><span class="line">).run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> results <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"No hosts found"</span></span><br><span class="line">   sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"UP ***********"</span></span><br><span class="line"><span class="keyword">for</span> (hostname, result) <span class="keyword">in</span> results[<span class="string">'contacted'</span>].items():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="string">'failed'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s &gt;&gt;&gt; %s"</span> % (hostname, result[<span class="string">'stdout'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"FAILED *******"</span></span><br><span class="line"><span class="keyword">for</span> (hostname, result) <span class="keyword">in</span> results[<span class="string">'contacted'</span>].items():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'failed'</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"%s &gt;&gt;&gt; %s"</span> % (hostname, result[<span class="string">'msg'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"DOWN *********"</span></span><br><span class="line"><span class="keyword">for</span> (hostname, result) <span class="keyword">in</span> results[<span class="string">'dark'</span>].items():</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"%s &gt;&gt;&gt; %s"</span> % (hostname, result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 集群管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-list-tuple-string</title>
      <link href="/2020/05/20/python-list-tuple-string/"/>
      <url>/2020/05/20/python-list-tuple-string/</url>
      
        <content type="html"><![CDATA[<h2 id="列表，元祖，字典，字符串"><a href="#列表，元祖，字典，字符串" class="headerlink" title="列表，元祖，字典，字符串"></a>列表，元祖，字典，字符串</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li><p>在 <code>ipython3</code> 中定义一个 <strong>列表</strong>，例如：<code>name_list = []</code></p></li><li><p>输入 <code>name_list.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>列表</strong> 能够使用的 <strong>方法</strong> 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: name_list.</span><br><span class="line">name_list.append   name_list.count    name_list.insert   name_list.reverse</span><br><span class="line">name_list.clear    name_list.extend   name_list.pop      name_list.sort</span><br><span class="line">name_list.copy     name_list.index    name_list.remove</span><br></pre></td></tr></table></figure><table><thead><tr><th>序号</th><th>分类</th><th align="left">关键字 / 函数 / 方法</th><th>说明</th></tr></thead><tbody><tr><td></td><td>增加</td><td align="left">列表.insert(索引, 数据)</td><td>在指定位置插入数据</td></tr><tr><td></td><td></td><td align="left">列表.append(数据)</td><td>在末尾追加数据</td></tr><tr><td></td><td></td><td align="left">列表.extend(列表2)</td><td>将列表2 的数据追加到列表</td></tr><tr><td>2</td><td>修改</td><td align="left">列表[索引] = 数据</td><td>修改指定索引的数据</td></tr><tr><td>3</td><td>删除</td><td align="left">del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td></td><td align="left">列表.remove[数据]</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td></td><td align="left">列表.pop</td><td>删除末尾数据</td></tr><tr><td></td><td></td><td align="left">列表.pop(索引)</td><td>删除指定索引数据</td></tr><tr><td></td><td></td><td align="left">列表.clear</td><td>清空列表</td></tr><tr><td>4</td><td>统计</td><td align="left">len(列表)</td><td>列表长度</td></tr><tr><td></td><td></td><td align="left">列表.count(数据)</td><td>数据在列表中出现的次数</td></tr><tr><td>5</td><td>排序</td><td align="left">列表.sort()</td><td>升序排序</td></tr><tr><td></td><td></td><td align="left">列表.sort(reverse=True)</td><td>降序排序</td></tr><tr><td></td><td></td><td align="left">列表.reverse()</td><td>逆序、反转</td></tr></tbody></table></li></ul><h3 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h3><ul><li>创建元祖,元祖创建之后不可变。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info_tuple = ()</span><br><span class="line"><span class="comment"># 只包含一个元素 时，需要 在元素后面添加逗号</span></span><br><span class="line">info_tuple = (<span class="number">50</span>, )</span><br></pre></td></tr></table></figure><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info = (<span class="string">"wc"</span>,<span class="string">"ww"</span>,<span class="string">"cc"</span>,<span class="string">"wc"</span>)</span><br><span class="line">info.count(<span class="string">"wc"</span>)  <span class="comment"># 2 计算 wc 在元祖中出现的次数</span></span><br><span class="line">info.index(<span class="string">"wc"</span>)  <span class="comment"># 0 获得 wc 第一次出现的位置</span></span><br><span class="line">info.index(<span class="number">2</span>)  <span class="comment"># cc 取下标第三的数</span></span><br><span class="line">len(info)  <span class="comment"># 4 取元素的长度</span></span><br></pre></td></tr></table></figure><ul><li><p>list 与tuple 转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list(元祖)   将转换为列表</span><br><span class="line">tuple(列表)  将转为元祖</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xiaoming = &#123;<span class="string">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="string">"gender"</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">"height"</span>: <span class="number">1.75</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>与列表比较<ul><li><strong>列表</strong> 是 <strong>有序</strong> 的对象集合</li><li><strong>字典</strong> 是 <strong>无序</strong> 的对象集合</li></ul></li><li>字典使用键值对存储数据<ul><li><strong>键</strong> <code>key</code> 是索引</li><li><strong>值</strong> <code>value</code> 是数据</li><li><strong>键</strong> 和 <strong>值</strong> 之间使用 <code>:</code> 分隔</li><li><strong>键必须是唯一的</strong></li><li><strong>值</strong> 可以取任何数据类型，但 <strong>键</strong> 只能使用 <strong>字符串</strong>、<strong>数字</strong>或 <strong>元组</strong></li></ul></li></ul><h5 id="字典常用方法"><a href="#字典常用方法" class="headerlink" title="字典常用方法"></a>字典常用方法</h5><ul><li>len()  获取键值对长度</li></ul><p><strong>读取所有</strong></p><ul><li>xiaoming.keys()  获取所有key  以列表的方式返回</li><li>xiaoming.values() 获取所有value 列表</li><li>xiaoming.items()  所有（key,values）元祖列表</li></ul><p><strong>读取单个</strong></p><ul><li>xiaoming[key] 可以从字典中取值，key不存在<strong>会报错</strong></li><li>xiaoming.get(key)  也可以从字典中取值，key不存在<strong>不会报错</strong></li></ul><p><strong>删除</strong></p><ul><li>del xiaoming.[key] 删除指定键值对，key不存在<strong>会报错</strong></li><li>xiaoming.pop(key) 删除指定键值对，key不存在<strong>会报错</strong></li><li>xiaoming.popitem() 随机删除一个键值对</li><li>xiaoming.clear() 清空键值对</li></ul><p><strong>修改</strong></p><ul><li>xiaoming[key] = value  如果key存在，修改数据。 key不存在,新建键值对</li><li>xiaoming.setdefault(key,value) 如果key存在，不动。 key不存在，修改为value。</li><li>xiaoming.update(字典2) 将字典2的数据合并到xiaoming中</li></ul><p><strong>其他</strong></p><ul><li>xiaoming.copy()  复制一份字典</li><li>xiaoming.fromkeys(seq[, value])  用于创建新字典，seq作为keys value 作为默认值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: xiaoming.fromkeys(<span class="string">"sdn"</span>,<span class="string">"qwe"</span>)</span><br><span class="line">Out[<span class="number">8</span>]: &#123;<span class="string">'s'</span>: <span class="string">'qwe'</span>, <span class="string">'d'</span>: <span class="string">'qwe'</span>, <span class="string">'n'</span>: <span class="string">'qwe'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"Hello Python"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure><ul><li>len(string) 获取字符串长度</li><li>string.count(字符串2)  字符串2 在string中出现的次数</li><li>string[索引] 从字符串中取出单个字符</li><li>string.index(字符串2)  字符串2 在string中第一次出现的索引</li></ul><h4 id="字符串常用操作"><a href="#字符串常用操作" class="headerlink" title="字符串常用操作"></a>字符串常用操作</h4><ul><li>在 <code>ipython3</code> 中定义一个 <strong>字符串</strong>，例如：<code>hello_str = &quot;&quot;</code></li><li>输入 <code>hello_str.</code> 按下 <code>TAB</code> 键，<code>ipython</code> 会提示 <strong>字符串</strong> 能够使用的 <strong>方法</strong> 如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: hello_str.</span><br><span class="line">hello_str.capitalize    hello_str.isidentifier  hello_str.rindex</span><br><span class="line">hello_str.casefold      hello_str.islower       hello_str.rjust</span><br><span class="line">hello_str.center        hello_str.isnumeric     hello_str.rpartition</span><br><span class="line">hello_str.count         hello_str.isprintable   hello_str.rsplit</span><br><span class="line">hello_str.encode        hello_str.isspace       hello_str.rstrip</span><br><span class="line">hello_str.endswith      hello_str.istitle       hello_str.split</span><br><span class="line">hello_str.expandtabs    hello_str.isupper       hello_str.splitlines</span><br><span class="line">hello_str.find          hello_str.join          hello_str.startswith</span><br><span class="line">hello_str.format        hello_str.ljust         hello_str.strip</span><br><span class="line">hello_str.format_map    hello_str.lower         hello_str.swapcase</span><br><span class="line">hello_str.index         hello_str.lstrip        hello_str.title</span><br><span class="line">hello_str.isalnum       hello_str.maketrans     hello_str.translate</span><br><span class="line">hello_str.isalpha       hello_str.partition     hello_str.upper</span><br><span class="line">hello_str.isdecimal     hello_str.replace       hello_str.zfill</span><br><span class="line">hello_str.isdigit       hello_str.rfind</span><br></pre></td></tr></table></figure><blockquote><p>提示：正是因为 python 内置提供的方法足够多，才使得在开发时，能够针对字符串进行更加灵活的操作！应对更多的开发需求！</p></blockquote><h4 id="1-判断类型-9"><a href="#1-判断类型-9" class="headerlink" title="1) 判断类型 - 9"></a>1) 判断类型 - 9</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.isspace()</td><td>如果 string 中只包含空格，则返回 True</td></tr><tr><td>string.isalnum()</td><td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True</td></tr><tr><td>string.isalpha()</td><td>如果 string 至少有一个字符并且所有字符都是字母则返回 True</td></tr><tr><td>string.isdecimal()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code></td></tr><tr><td>string.isdigit()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>、<code>⑴</code>、<code>\u00b2</code></td></tr><tr><td>string.isnumeric()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>，<code>汉字数字</code></td></tr><tr><td>string.istitle()</td><td>如果 string 是标题化的(每个单词的首字母大写)则返回 True</td></tr><tr><td>string.islower()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True</td></tr><tr><td>string.isupper()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True</td></tr></tbody></table><h4 id="2-查找和替换-7"><a href="#2-查找和替换-7" class="headerlink" title="2) 查找和替换 - 7"></a>2) 查找和替换 - 7</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.startswith(str)</td><td>检查字符串是否是以 str 开头，是则返回 True</td></tr><tr><td>string.endswith(str)</td><td>检查字符串是否是以 str 结束，是则返回 True</td></tr><tr><td>string.find(str, start=0, end=len(string))</td><td>检测 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 <code>-1</code></td></tr><tr><td>string.rfind(str, start=0, end=len(string))</td><td>类似于 find()，不过是从右边开始查找</td></tr><tr><td>string.index(str, start=0, end=len(string))</td><td>跟 find() 方法类似，不过如果 str 不在 string 会报错</td></tr><tr><td>string.rindex(str, start=0, end=len(string))</td><td>类似于 index()，不过是从右边开始</td></tr><tr><td>string.replace(old_str, new_str, num=string.count(old))</td><td>把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次</td></tr></tbody></table><h4 id="3-大小写转换-5"><a href="#3-大小写转换-5" class="headerlink" title="3) 大小写转换 - 5"></a>3) 大小写转换 - 5</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.capitalize()</td><td>把字符串的第一个字符大写</td></tr><tr><td>string.title()</td><td>把字符串的每个单词首字母大写</td></tr><tr><td>string.lower()</td><td>转换 string 中所有大写字符为小写</td></tr><tr><td>string.upper()</td><td>转换 string 中的小写字母为大写</td></tr><tr><td>string.swapcase()</td><td>翻转 string 中的大小写</td></tr></tbody></table><h4 id="4-文本对齐-3"><a href="#4-文本对齐-3" class="headerlink" title="4) 文本对齐 - 3"></a>4) 文本对齐 - 3</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.ljust(width)</td><td>返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.rjust(width)</td><td>返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.center(width)</td><td>返回一个原字符串居中，并使用空格填充至长度 width 的新字符串</td></tr></tbody></table><h4 id="5-去除空白字符-3"><a href="#5-去除空白字符-3" class="headerlink" title="5) 去除空白字符 - 3"></a>5) 去除空白字符 - 3</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.lstrip()</td><td>截掉 string 左边（开始）的空白字符</td></tr><tr><td>string.rstrip()</td><td>截掉 string 右边（末尾）的空白字符</td></tr><tr><td>string.strip()</td><td>截掉 string 左右两边的空白字符</td></tr></tbody></table><h4 id="6-拆分和连接-5"><a href="#6-拆分和连接-5" class="headerlink" title="6) 拆分和连接 - 5"></a>6) 拆分和连接 - 5</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.partition(str)</td><td>把字符串 string 分成一个 3 元素的元组 (str前面, str, str后面)</td></tr><tr><td>string.rpartition(str)</td><td>类似于 partition() 方法，不过是从右边开始查找</td></tr><tr><td>string.split(str=””, num)</td><td>以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 ‘\r’, ‘\t’, ‘\n’ 和空格</td></tr><tr><td>string.splitlines()</td><td>按照行(‘\r’, ‘\n’, ‘\r\n’)分隔，返回一个包含各行作为元素的列表</td></tr><tr><td>string.join(seq)</td><td>以 string 作为分隔符，将 seq 中所有的元素（的字符串表示）合并为一个新的字符串</td></tr></tbody></table><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>切片适用于字符串，列表，元祖</p><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li></ul><p>字符串[开始索引:结束索引:步长]</p><p><strong>注意</strong>：</p><ol><li>指定的区间属于 <strong>左闭右开</strong> 型 <code>[开始索引,  结束索引)</code> =&gt; <code>开始索引 &lt;= 范围 &lt; 结束索引</code><ul><li>从 <code>起始</code> 位开始，到 <strong><code>结束</code>位的前一位</strong> 结束（<strong>不包含结束位本身</strong>)</li></ul></li><li>从头开始，<strong>开始索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>到末尾结束，<strong>结束索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>步长默认为 <code>1</code>，如果连续切片，<strong>数字和冒号都可以省略</strong></li></ol><h3 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h3><h4 id="pytohn内置函数"><a href="#pytohn内置函数" class="headerlink" title="pytohn内置函数"></a>pytohn内置函数</h4><table><thead><tr><th>函数</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>len(item)</td><td>计算容器中元素个数</td><td></td></tr><tr><td>del(item)</td><td>删除变量</td><td>del 有两种方式</td></tr><tr><td>max(item)</td><td>返回容器中元素最大值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>min(item)</td><td>返回容器中元素最小值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>cmp(item1, item2)</td><td>比较两个值，-1 小于/0 相等/1 大于</td><td>Python 3.x 取消了 cmp 函数</td></tr></tbody></table><p><strong>注意</strong></p><ul><li><strong>字符串</strong> 比较符合以下规则： “0” &lt; “A” &lt; “a”</li></ul><h4 id="切片-1"><a href="#切片-1" class="headerlink" title="切片"></a>切片</h4><table><thead><tr><th align="center">描述</th><th>Python 表达式</th><th>结果</th><th>支持的数据类型</th></tr></thead><tbody><tr><td align="center">切片</td><td>“0123456789”[::-2]</td><td>“97531”</td><td>字符串、列表、元组</td></tr></tbody></table><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li></ul><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><table><thead><tr><th align="center">运算符</th><th>Python 表达式</th><th>结果</th><th>描述</th><th>支持的数据类型</th></tr></thead><tbody><tr><td align="center">+</td><td>[1, 2] + [3, 4]</td><td>[1, 2, 3, 4]</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td align="center">*</td><td>[“Hi!”] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>重复</td><td>字符串、列表、元组</td></tr><tr><td align="center">in</td><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td align="center">not in</td><td>4 not in (1, 2, 3)</td><td>True</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr><tr><td align="center">&gt; &gt;= == &lt; &lt;=</td><td>(1, 2, 3) &lt; (2, 2, 3)</td><td>True</td><td>元素比较</td><td>字符串、列表、元组</td></tr></tbody></table><p><strong>注意</strong></p><ul><li><code>in</code> 在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></li><li><code>in</code> 和 <code>not in</code> 被称为 <strong>成员运算符</strong></li></ul><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><p>成员运算符用于 <strong>测试</strong> 序列中是否包含指定的 <strong>成员</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False</td><td><code>3 in (1, 2, 3)</code> 返回 <code>True</code></td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False</td><td><code>3 not in (1, 2, 3)</code> 返回 <code>False</code></td></tr></tbody></table><p>注意：在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></p><h4 id="完整的for循环语法"><a href="#完整的for循环语法" class="headerlink" title="完整的for循环语法"></a>完整的for循环语法</h4><ul><li>在 <code>Python</code> 中完整的 <code>for 循环</code> 的语法如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 集合:</span><br><span class="line">    </span><br><span class="line">    循环体代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    没有通过 <span class="keyword">break</span> 退出循环，循环结束后，会执行的代码</span><br></pre></td></tr></table></figure><p>** for示例**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"阿土"</span>,</span><br><span class="line">     <span class="string">"age"</span>: <span class="number">20</span>,</span><br><span class="line">     <span class="string">"gender"</span>: <span class="literal">True</span>,</span><br><span class="line">     <span class="string">"height"</span>: <span class="number">1.7</span>,</span><br><span class="line">     <span class="string">"weight"</span>: <span class="number">75.0</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"小美"</span>,</span><br><span class="line">     <span class="string">"age"</span>: <span class="number">19</span>,</span><br><span class="line">     <span class="string">"gender"</span>: <span class="literal">False</span>,</span><br><span class="line">     <span class="string">"height"</span>: <span class="number">1.6</span>,</span><br><span class="line">     <span class="string">"weight"</span>: <span class="number">45.0</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">find_name = <span class="string">"阿土"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> stu_dict <span class="keyword">in</span> students:</span><br><span class="line"></span><br><span class="line">    print(stu_dict)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断当前遍历的字典中姓名是否为find_name</span></span><br><span class="line">    <span class="keyword">if</span> stu_dict[<span class="string">"name"</span>] == find_name:</span><br><span class="line">        print(<span class="string">"找到了"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果已经找到，直接退出循环，就不需要再对后续的数据进行比较</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 这里是别的语言里面没有的</span></span><br><span class="line">    print(<span class="string">"没有找到"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"循环结束"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 元组 </tag>
            
            <tag> 字典 </tag>
            
            <tag> 列表 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
